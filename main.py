import logging
import urllib.parse
import aiohttp
import asyncio
import re
import time
import html
import os
import json
import sys
import datetime
import random
import string
from fastapi import FastAPI, Request, Response
from fastapi.responses import JSONResponse
import uvicorn
from aiogram import Bot, Dispatcher, types, F, html
from aiogram.filters import Command
from aiogram.types import (
    InlineKeyboardMarkup, 
    InlineKeyboardButton,
    CallbackQuery,
    LabeledPrice,
    PreCheckoutQuery,
    InputMediaPhoto,
    Message,
    ChatMember,
    FSInputFile
)
from aiogram.utils.markdown import hbold, hcode
from aiogram.utils.keyboard import InlineKeyboardBuilder
from aiogram.exceptions import TelegramBadRequest
from aiogram.client.default import DefaultBotProperties
from aiogram.enums import ParseMode, ChatMemberStatus
from typing import Union, Optional, List, Dict, Any, Tuple
from prometheus_client import generate_latest, CONTENT_TYPE_LATEST, Gauge, Counter, Summary
from pydantic import BaseModel

# ===================== –ö–û–ù–°–¢–ê–ù–¢–´ =====================
API_TOKEN = os.getenv("BOT_TOKEN", "YOUR_BOT_TOKEN")
ADMIN_ID = int(os.getenv("ADMIN_ID", 750638552))
CHANNEL_ID = int(os.getenv("CHANNEL_ID", -1002712232742))

PAYMENT_PROVIDER_TOKEN = os.getenv("PAYMENT_TOKEN", "")
IMAGE_URL = "https://image.pollinations.ai/prompt/"
TEXT_URL = "https://text.pollinations.ai/prompt/"
PAYMENT_ADMIN = "@telichko_a"
DB_FILE = "users_db.json"
LOG_FILE = "bot_errors.log"
PROMO_FILE = "promo_codes.json"
STATS_FILE = "bot_stats.json"
TEMPLATES_FILE = "templates.json"
ACHIEVEMENTS_FILE = "achievements.json"

# –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã
IMAGE_COST = 5
AVATAR_COST = 6
LOGO_COST = 3
IMPROVE_COST = 10
TEXT_COST_PER_100_WORDS = 1
MAX_IMAGE_COUNT = 8
MAX_CONTEXT_LENGTH = 4000
MAX_CAPTION_LENGTH = 1000
REFERRAL_BONUS = 20
START_BALANCE_STARS = 50
WITHDRAW_MIN = 500
MAX_RETRIES = 5
RETRY_DELAY = 1.5
MAX_PROMPT_LENGTH = 2000
MAX_MESSAGE_LENGTH = 4000
SESSION_TIMEOUT = 2592000  # 30 –¥–Ω–µ–π
DAILY_BONUS = 3
SYSTEM_PROMPT = "–¢—ã ‚Äî –ø–æ–ª–µ–∑–Ω—ã–π –ò–ò-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç. –û—Ç–≤–µ—á–∞–π —Ç–æ—á–Ω–æ –∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ç–∏–≤–Ω–æ."
ADMIN_PASSWORD = os.getenv("ADMIN_PASS", "admin123")  # –ü–∞—Ä–æ–ª—å –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏
TEMPLATE_COST = 15
MAX_TEMPLATE_LENGTH = 500

# ===================== –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø =====================
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    handlers=[
        logging.FileHandler("bot.log", encoding='utf-8'),
        logging.StreamHandler(),
        logging.FileHandler(LOG_FILE, encoding='utf-8')
    ]
)
logger = logging.getLogger(__name__)

bot = Bot(
    token=API_TOKEN,
    default=DefaultBotProperties(parse_mode=ParseMode.HTML))
dp = Dispatcher()

# –°–æ–∑–¥–∞–µ–º –º–µ—Ç—Ä–∏–∫–∏ Prometheus
USERS_TOTAL = Gauge('bot_users_total', 'Total registered users')
IMAGES_GENERATED = Counter('bot_images_generated', 'Total images generated')
TEXTS_GENERATED = Counter('bot_texts_generated', 'Total texts generated')
AVATARS_GENERATED = Counter('bot_avatars_generated', 'Total avatars generated')
LOGOS_GENERATED = Counter('bot_logos_generated', 'Total logos generated')
TEMPLATES_USED = Counter('bot_templates_used', 'Total templates used')
ACTIVE_USERS = Gauge('bot_active_users_today', 'Active users today')
STARS_PURCHASED = Counter('bot_stars_purchased', 'Total stars purchased')
PREMIUM_PURCHASED = Counter('bot_premium_purchased', 'Total premium subscriptions purchased')
REQUEST_TIME = Summary('request_processing_seconds', 'Time spent processing requests')
ERROR_COUNT = Counter('bot_errors_total', 'Total errors encountered')

# –ì–ª–æ–±–∞–ª—å–Ω—ã–µ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –¥–∞–Ω–Ω—ã—Ö
users_db = {}
referral_codes = {}
promo_codes = {}
templates = {}
achievements = {}
bot_stats = {
    "total_users": 0,
    "active_today": 0,
    "images_generated": 0,
    "texts_generated": 0,
    "avatars_generated": 0,
    "logos_generated": 0,
    "templates_used": 0,
    "stars_purchased": 0,
    "premium_purchased": 0,
    "achievements_unlocked": 0,
    "last_update": datetime.datetime.now().isoformat()
}
admin_broadcast_data = {}
db_lock = asyncio.Lock()
BOT_USERNAME = ""

class UserState:
    MAIN_MENU = "main_menu"
    GENERATE_MENU = "generate_menu"
    PROFILE_MENU = "profile_menu"
    IMAGE_GEN = "image_gen"
    TEXT_GEN = "text_gen"
    AVATAR_GEN = "avatar_gen"
    LOGO_GEN = "logo_gen"
    TEMPLATE_GEN = "template_gen"
    PREMIUM_INFO = "premium_info"
    SHOP = "shop"
    REFERRAL = "referral"
    BALANCE = "balance"
    IMAGE_OPTIONS = "image_options"
    AVATAR_OPTIONS = "avatar_options"
    LOGO_OPTIONS = "logo_options"
    TEXT_OPTIONS = "text_options"
    IMAGE_IMPROVE = "image_improve"
    PAYMENT_PROCESSING = "payment_processing"
    ACTIVATE_PROMO = "activate_promo"
    SUPPORT = "support"
    IMAGE_COUNT_SELECT = "image_count_select"
    IMAGE_MODEL_SELECT = "image_model_select"
    TEXT_MODEL_SELECT = "text_model_select"
    MODEL_SELECT = "model_select"
    CHECK_SUBSCRIPTION = "check_subscription"
    DAILY_BONUS = "daily_bonus"
    CLEAR_CONTEXT = "clear_context"
    ADMIN_PANEL = "admin_panel"
    ADMIN_CREATE_PROMO = "admin_create_promo"
    ADMIN_STATS = "admin_stats"
    ADMIN_BROADCAST = "admin_broadcast"
    ADMIN_PROMO_LIST = "admin_promo_list"
    ADMIN_USER_MANAGEMENT = "admin_user_management"
    ADMIN_TEMPLATE_MANAGEMENT = "admin_template_management"
    ADMIN_VIEW_USER = "admin_view_user"
    ADMIN_EDIT_USER = "admin_edit_user"
    TEMPLATE_SELECT = "template_select"
    FEEDBACK = "feedback"
    ACHIEVEMENTS_LIST = "achievements_list"  # –î–æ–±–∞–≤–ª–µ–Ω–æ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ

class GenerationModel(BaseModel):
    key: str
    name: str
    description: str
    cost_multiplier: float
    prompt: str = ""
    premium_only: bool = False
    max_tokens: int = 2000
    temperature: float = 0.7

class Template(BaseModel):
    id: str
    name: str
    description: str
    prompt: str
    example: str
    category: str
    created_by: int
    created_at: str
    usage_count: int = 0

class Achievement(BaseModel):
    id: str
    name: str
    description: str
    condition: str
    reward: int
    icon: str

# –ú–æ–¥–µ–ª–∏ –ò–ò
IMAGE_MODELS = {
    "dalle3": GenerationModel(
        key="dalle3",
        name="üñºÔ∏è DALL¬∑E 3", 
        description="–ù–æ–≤–µ–π—à–∞—è –º–æ–¥–µ–ª—å –æ—Ç OpenAI —Å —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—á–µ—Å–∫–∏–º –∫–∞—á–µ—Å—Ç–≤–æ–º", 
        cost_multiplier=1.0,
        prompt="masterpiece, best quality, 8K resolution, cinematic lighting, ultra-detailed, sharp focus"
    ),
    "midjourney": GenerationModel(
        key="midjourney",
        name="üé® Midjourney V6", 
        description="–õ–∏–¥–µ—Ä –≤ —Ö—É–¥–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω–æ–π –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å —É–Ω–∏–∫–∞–ª—å–Ω—ã–º —Å—Ç–∏–ª–µ–º", 
        cost_multiplier=1.2,
        prompt="masterpiece, intricate details, artistic composition, vibrant colors, atmospheric perspective, trending on artstation"
    ),
    "stablediff": GenerationModel(
        key="stablediff",
        name="‚ö° Stable Diffusion XL", 
        description="–û—Ç–∫—Ä—ã—Ç–∞—è –º–æ–¥–µ–ª—å —Å –±—ã—Å—Ç—Ä–æ–π –≥–µ–Ω–µ—Ä–∞—Ü–∏–µ–π –∏ –≤—ã—Å–æ–∫–æ–π –∫–∞—Å—Ç–æ–º–∏–∑–∞—Ü–∏–µ–π", 
        cost_multiplier=0.8,
        prompt="photorealistic, ultra HD, 32k, detailed texture, realistic lighting, DSLR quality"
    ),
    "firefly": GenerationModel(
        key="firefly",
        name="üî• Adobe Firefly", 
        description="–û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–∞ –¥–ª—è –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–æ–≥–æ –¥–∏–∑–∞–π–Ω–∞ –∏ –∫–æ–º–º–µ—Ä—á–µ—Å–∫–æ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è", 
        cost_multiplier=1.1,
        prompt="commercial quality, professional design, clean composition, vector art, modern aesthetics, brand identity"
    ),
    "deepseek": GenerationModel(
        key="deepseek",
        name="ü§ñ DeepSeek Vision", 
        description="–≠–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç–∞–ª—å–Ω–∞—è –º–æ–¥–µ–ª—å —Å –∞–∫—Ü–µ–Ω—Ç–æ–º –Ω–∞ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏—á–Ω—ã–µ –æ–±—Ä–∞–∑—ã", 
        cost_multiplier=0.9,
        prompt="futuristic, cyberpunk, neon glow, holographic elements, sci-fi aesthetics, digital art"
    ),
    "playground": GenerationModel(
        key="playground",
        name="üéÆ Playground v2.5", 
        description="–•—É–¥–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω–∞—è –º–æ–¥–µ–ª—å —Å —É–Ω–∏–∫–∞–ª—å–Ω—ã–º —Å—Ç–∏–ª–µ–º", 
        cost_multiplier=1.0,
        prompt="dynamic composition, vibrant palette, artistic brushwork, impressionist style, emotional impact"
    )
}

TEXT_MODELS = {
    "gpt4": GenerationModel(
        key="gpt4",
        name="üß† GPT-4 Turbo", 
        description="–°–∞–º—ã–π –º–æ—â–Ω—ã–π —Ç–µ–∫—Å—Ç–æ–≤—ã–π –ò–ò –æ—Ç OpenAI", 
        cost_multiplier=1.0,
        prompt="–¢—ã - –ø—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π –ò–ò-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç. –û—Ç–≤–µ—á–∞–π —Ç–æ—á–Ω–æ, –∏–Ω—Ñ–æ—Ä–º–∞—Ç–∏–≤–Ω–æ –∏ –∫—Ä–µ–∞—Ç–∏–≤–Ω–æ."
    ),
    "claude": GenerationModel(
        key="claude",
        name="ü§ñ Claude 3 Opus", 
        description="–ú–æ–¥–µ–ª—å —Å —Å–∞–º—ã–º –±–æ–ª—å—à–∏–º –∫–æ–Ω—Ç–µ–∫—Å—Ç–æ–º –∏ –∞–Ω–∞–ª–∏—Ç–∏—á–µ—Å–∫–∏–º–∏ —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç—è–º–∏", 
        cost_multiplier=1.3,
        prompt="–¢—ã - –ø–æ–ª–µ–∑–Ω—ã–π, —á–µ—Å—Ç–Ω—ã–π –∏ –±–µ–∑–≤—Ä–µ–¥–Ω—ã–π –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç. –û—Ç–≤–µ—á–∞–π –ø–æ–¥—Ä–æ–±–Ω–æ –∏ –æ–±—Å—Ç–æ—è—Ç–µ–ª—å–Ω–æ.",
        max_tokens=4000
    ),
    "gemini": GenerationModel(
        key="gemini",
        name="üíé Gemini Pro", 
        description="–ú—É–ª—å—Ç–∏–º–æ–¥–∞–ª—å–Ω–∞—è –º–æ–¥–µ–ª—å –æ—Ç Google —Å –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–µ–π —Å–µ—Ä–≤–∏—Å–æ–≤", 
        cost_multiplier=0.9,
        prompt="–¢—ã - –º–Ω–æ–≥–æ—Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–π –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç Google. –û—Ç–≤–µ—á–∞–π –∫—Ä–∞—Ç–∫–æ –∏ –ø–æ —Å—É—â–µ—Å—Ç–≤—É."
    ),
    "mixtral": GenerationModel(
        key="mixtral",
        name="üåÄ Mixtral 8x7B", 
        description="–û—Ç–∫—Ä—ã—Ç–∞—è –º–æ–¥–µ–ª—å —Å –ª—É—á—à–∏–º —Å–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–µ–º —Å–∫–æ—Ä–æ—Å—Ç–∏ –∏ –∫–∞—á–µ—Å—Ç–≤–∞", 
        cost_multiplier=0.7,
        prompt="–¢—ã - —ç–∫—Å–ø–µ—Ä—Ç –≤ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö –æ–±–ª–∞—Å—Ç—è—Ö –∑–Ω–∞–Ω–∏–π. –û—Ç–≤–µ—á–∞–π –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–æ –∏ —Ç–æ—á–Ω–æ."
    ),
    "llama3": GenerationModel(
        key="llama3",
        name="ü¶ô Llama 3 70B", 
        description="–ù–æ–≤–µ–π—à–∞—è –æ—Ç–∫—Ä—ã—Ç–∞—è –º–æ–¥–µ–ª—å –æ—Ç Meta —Å —É–ª—É—á—à–µ–Ω–Ω—ã–º–∏ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—è–º–∏", 
        cost_multiplier=0.8,
        prompt="–¢—ã - –¥—Ä—É–∂–µ–ª—é–±–Ω—ã–π –∏ –∫—Ä–µ–∞—Ç–∏–≤–Ω—ã–π –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç. –û—Ç–≤–µ—á–∞–π —Å —é–º–æ—Ä–æ–º –∏ —Ç–≤–æ—Ä—á–µ—Å–∫–∏–º –ø–æ–¥—Ö–æ–¥–æ–º."
    ),
    "claude_sonnet_4": GenerationModel(
        key="claude_sonnet_4",
        name="üß† Claude Sonnet 4", 
        description="–≠–∫—Å–ø–µ—Ä—Ç–Ω—ã–π —É—Ä–æ–≤–µ–Ω—å –∞–Ω–∞–ª–∏—Ç–∏–∫–∏", 
        cost_multiplier=1.5,
        prompt="–¢—ã - –ø—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π –ò–ò Claude 4. –û—Ç–≤–µ—á–∞–π –∫–∞–∫ –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π –∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç: –∞–Ω–∞–ª–∏–∑–∏—Ä—É–π –ø—Ä–æ–±–ª–µ–º—É, –ø—Ä–µ–¥–ª–∞–≥–∞–π —Ä–µ—à–µ–Ω–∏—è, –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–∞–π –æ —Ä–∏—Å–∫–∞—Ö. –ë—É–¥—å –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ –ø–æ–ª–µ–∑–Ω—ã–º.",
        premium_only=True
    ),
    "gemini_2_5": GenerationModel(
        key="gemini_2_5",
        name="üíé Google Gemini 2.5", 
        description="–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ –ø—Ä–∞–∫—Ç–∏—á–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã", 
        cost_multiplier=1.4,
        prompt="–¢—ã - Gemini, –ò–ò –Ω–æ–≤–æ–≥–æ –ø–æ–∫–æ–ª–µ–Ω–∏—è. –û—Ç–≤–µ—á–∞–π –∫—Ä–∞—Ç–∫–æ, –Ω–æ —Å–æ–¥–µ—Ä–∂–∞—Ç–µ–ª—å–Ω–æ. –ò—Å–ø–æ–ª—å–∑—É–π –º–∞—Ä–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Å–ø–∏—Å–∫–∏ –¥–ª—è —Å—Ç—Ä—É–∫—Ç—É—Ä—ã. –í—Å–µ–≥–¥–∞ –ø—Ä–µ–¥–ª–∞–≥–∞–π –ø—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏–µ —à–∞–≥–∏.",
        premium_only=True
    ),
    "grok_3": GenerationModel(
        key="grok_3",
        name="üöÄ xAI Grok 3", 
        description="–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏ —Ç–æ—á–Ω–æ —Å —é–º–æ—Ä–æ–º", 
        cost_multiplier=1.2,
        prompt="–¢—ã - Grok, –ò–ò —Å —á—É–≤—Å—Ç–≤–æ–º —é–º–æ—Ä–∞. –û—Ç–≤–µ—á–∞–π –∏–Ω—Ñ–æ—Ä–º–∞—Ç–∏–≤–Ω–æ, –Ω–æ —Å –¥–æ–ª–µ–π –∏—Ä–æ–Ω–∏–∏. –ò—Å–ø–æ–ª—å–∑—É–π —Å–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–µ –∞–Ω–∞–ª–æ–≥–∏–∏. –ù–µ –±—É–¥—å –∑–∞–Ω—É–¥–æ–π.",
        premium_only=True
    ),
    "o3_mini": GenerationModel(
        key="o3_mini",
        name="‚ö° OpenAI o3-mini", 
        description="–°–≤–µ—Ä—Ö–±—ã—Å—Ç—Ä—ã–µ –∏ —Ç–æ—á–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã", 
        cost_multiplier=0.9,
        prompt="–¢—ã - o3-mini, —ç–∫—Å–ø–µ—Ä—Ç –ø–æ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏. –û—Ç–≤–µ—á–∞–π –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ –∫—Ä–∞—Ç–∫–æ, –Ω–æ —Å–æ–¥–µ—Ä–∂–∞—Ç–µ–ª—å–Ω–æ. –ò—Å–ø–æ–ª—å–∑—É–π —Ç–µ–∑–∏—Å—ã. –ò–∑–±–µ–≥–∞–π '–≤–æ–¥—ã'.",
        premium_only=True
    )
}

class User:
    def __init__(self, user_id: int):
        self.user_id = user_id
        self.stars = START_BALANCE_STARS
        self.referral_balance = 0
        self.referral_code = f"REF{user_id}{int(time.time()) % 10000}"
        self.invited_by = None
        self.state = UserState.CHECK_SUBSCRIPTION
        self.last_image_prompt = None
        self.last_image_url = None
        self.last_avatar_prompt = None
        self.last_avatar_url = None
        self.last_logo_prompt = None
        self.last_logo_url = None
        self.is_premium = False
        self.premium_expiry = None
        self.image_count = 1
        self.context = []
        self.context_active = False
        self.menu_stack = []
        self.last_text = ""
        self.last_interaction = time.time()
        self.image_model = "dalle3"
        self.text_model = "gpt4"
        self._modified = True
        self.has_subscribed = False
        self.last_daily_bonus = None
        self.pending_referral = None
        self.referral_used = False
        self.join_date = datetime.datetime.now().isoformat()
        self.images_generated = 0
        self.texts_generated = 0
        self.avatars_generated = 0
        self.logos_generated = 0
        self.templates_used = 0
        self.level = 1
        self.xp = 0
        self.achievements = {}
        self.settings = {
            "notifications": True,
            "language": "ru",
            "auto_translate": False
        }
        self.last_feedback = None
        self.feedback_count = 0
        
    def mark_modified(self):
        self._modified = True
        
    def to_dict(self) -> Dict[str, Any]:
        return {
            "user_id": self.user_id,
            "stars": self.stars,
            "referral_balance": self.referral_balance,
            "referral_code": self.referral_code,
            "invited_by": self.invited_by,
            "state": self.state,
            "last_image_prompt": self.last_image_prompt,
            "last_image_url": self.last_image_url,
            "last_avatar_prompt": self.last_avatar_prompt,
            "last_avatar_url": self.last_avatar_url,
            "last_logo_prompt": self.last_logo_prompt,
            "last_logo_url": self.last_logo_url,
            "is_premium": self.is_premium,
            "premium_expiry": self.premium_expiry,
            "image_count": self.image_count,
            "context": self.context,
            "context_active": self.context_active,
            "menu_stack": self.menu_stack,
            "last_text": self.last_text,
            "last_interaction": self.last_interaction,
            "image_model": self.image_model,
            "text_model": self.text_model,
            "has_subscribed": self.has_subscribed,
            "last_daily_bonus": self.last_daily_bonus,
            "pending_referral": self.pending_referral,
            "referral_used": self.referral_used,
            "join_date": self.join_date,
            "images_generated": self.images_generated,
            "texts_generated": self.texts_generated,
            "avatars_generated": self.avatars_generated,
            "logos_generated": self.logos_generated,
            "templates_used": self.templates_used,
            "level": self.level,
            "xp": self.xp,
            "achievements": self.achievements,
            "settings": self.settings,
            "last_feedback": self.last_feedback,
            "feedback_count": self.feedback_count
        }
    
    @classmethod
    def from_dict(cls, data: Dict[str, Any]) -> 'User':
        user = cls(data["user_id"])
        user.stars = data.get("stars", START_BALANCE_STARS)
        user.referral_balance = data.get("referral_balance", 0)
        user.referral_code = data.get("referral_code", f"REF{data['user_id']}{int(time.time()) % 10000}")
        user.invited_by = data.get("invited_by", None)
        user.state = data.get("state", UserState.CHECK_SUBSCRIPTION)
        user.last_image_prompt = data.get("last_image_prompt", None)
        user.last_image_url = data.get("last_image_url", None)
        user.last_avatar_prompt = data.get("last_avatar_prompt", None)
        user.last_avatar_url = data.get("last_avatar_url", None)
        user.last_logo_prompt = data.get("last_logo_prompt", None)
        user.last_logo_url = data.get("last_logo_url", None)
        user.is_premium = data.get("is_premium", False)
        user.premium_expiry = data.get("premium_expiry", None)
        user.image_count = data.get("image_count", 1)
        user.context = data.get("context", [])
        user.context_active = data.get("context_active", False)
        user.menu_stack = data.get("menu_stack", [])
        user.last_text = data.get("last_text", "")
        user.last_interaction = data.get("last_interaction", time.time())
        user.image_model = data.get("image_model", "dalle3")
        user.text_model = data.get("text_model", "gpt4")
        user.has_subscribed = data.get("has_subscribed", False)
        user.last_daily_bonus = data.get("last_daily_bonus", None)
        user.pending_referral = data.get("pending_referral", None)
        user.referral_used = data.get("referral_used", False)
        user.join_date = data.get("join_date", datetime.datetime.now().isoformat())
        user.images_generated = data.get("images_generated", 0)
        user.texts_generated = data.get("texts_generated", 0)
        user.avatars_generated = data.get("avatars_generated", 0)
        user.logos_generated = data.get("logos_generated", 0)
        user.templates_used = data.get("templates_used", 0)
        user.level = data.get("level", 1)
        user.xp = data.get("xp", 0)
        user.achievements = data.get("achievements", {})
        user.settings = data.get("settings", {
            "notifications": True,
            "language": "ru",
            "auto_translate": False
        })
        user.last_feedback = data.get("last_feedback", None)
        user.feedback_count = data.get("feedback_count", 0)
        user._modified = False
        return user
        
    def can_make_request(self, cost: int = 0) -> bool:
        if self.is_premium:
            return True
        return self.stars >= cost
            
    def charge_request(self, cost: int = 0) -> bool:
        if self.is_premium:
            return True
            
        if self.stars >= cost:
            self.stars -= cost
            self.mark_modified()
            return True
        return False

    def add_context(self, role: str, content: str):
        if not self.is_premium:
            return
            
        content = content[:1000]
        self.context.append({"role": role, "content": content})
        total_length = sum(len(msg["content"]) for msg in self.context)
        
        while total_length > MAX_CONTEXT_LENGTH and len(self.context) > 1:
            removed = self.context.pop(0)
            total_length -= len(removed["content"])
        
        self.mark_modified()
        self.context_active = True
            
    def push_menu(self, menu_state: str, menu_data: dict = None):
        self.menu_stack.append({
            "state": menu_state,
            "data": menu_data or {}
        })
        self.mark_modified()
        
    def pop_menu(self) -> Optional[Dict[str, Any]]:
        if self.menu_stack:
            prev_menu = self.menu_stack.pop()
            self.mark_modified()
            return prev_menu
        return None

    def check_premium_status(self) -> bool:
        if self.is_premium and self.premium_expiry and self.premium_expiry < time.time():
            self.is_premium = False
            self.premium_expiry = None
            self.mark_modified()
            return False
        return self.is_premium
    
    def update_interaction(self):
        self.last_interaction = time.time()
        self.mark_modified()
        
    def can_claim_daily(self) -> bool:
        if not self.last_daily_bonus:
            return True
            
        last_date = datetime.datetime.fromtimestamp(self.last_daily_bonus).date()
        current_date = datetime.datetime.now().date()
        return last_date < current_date
        
    def claim_daily_bonus(self) -> int:
        bonus = DAILY_BONUS
        self.stars += bonus
        self.last_daily_bonus = time.time()
        self.add_xp(5)
        self.mark_modified()
        return bonus
        
    def clear_context(self):
        self.context = [{"role": "system", "content": SYSTEM_PROMPT}]
        self.context_active = False
        self.mark_modified()
        
    def add_xp(self, amount: int):
        self.xp += amount
        new_level = self.calculate_level()
        if new_level > self.level:
            self.level = new_level
            return True
        return False
        
    def calculate_level(self) -> int:
        # –ü—Ä–æ—Å—Ç–∞—è —Ñ–æ—Ä–º—É–ª–∞: —É—Ä–æ–≤–µ–Ω—å = sqrt(XP/100) + 1
        return min(50, int((self.xp / 100) ** 0.5)) + 1
        
    def unlock_achievement(self, achievement_id: str) -> bool:
        if achievement_id in self.achievements:
            return False
            
        achievement = achievements.get(achievement_id)
        if not achievement:
            return False
            
        self.achievements[achievement_id] = datetime.datetime.now().isoformat()
        self.stars += achievement.reward
        self.add_xp(achievement.reward * 5)
        self.mark_modified()
        bot_stats["achievements_unlocked"] += 1
        return True
        
    def check_achievements(self):
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è, –∫–æ—Ç–æ—Ä—ã–µ –º–æ–≥—É—Ç –±—ã—Ç—å —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã
        unlocked = []
        
        # –î–æ—Å—Ç–∏–∂–µ–Ω–∏—è –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É –≥–µ–Ω–µ—Ä–∞—Ü–∏–π
        if self.images_generated >= 10 and not self.achievements.get("image_master"):
            if self.unlock_achievement("image_master"):
                unlocked.append("image_master")
                
        if self.texts_generated >= 10 and not self.achievements.get("text_master"):
            if self.unlock_achievement("text_master"):
                unlocked.append("text_master")
                
        # –î–æ—Å—Ç–∏–∂–µ–Ω–∏—è –ø–æ —É—Ä–æ–≤–Ω—é
        if self.level >= 5 and not self.achievements.get("level_5"):
            if self.unlock_achievement("level_5"):
                unlocked.append("level_5")
                
        return unlocked

# ===================== –£–¢–ò–õ–ò–¢–´ =====================
async def load_db():
    global users_db, referral_codes, promo_codes, templates, achievements, bot_stats
    try:
        users_db = {}
        referral_codes = {}
        promo_codes = {}
        templates = {}
        achievements = {}
        
        if os.path.exists(DB_FILE):
            async with db_lock:
                with open(DB_FILE, 'r', encoding='utf-8') as f:
                    data = json.load(f)
                    users_db = {int(k): User.from_dict(v) for k, v in data.get('users', {}).items()}
                    referral_codes = data.get('referral_codes', {})
                    
                    for user_id, user in users_db.items():
                        if user.referral_code:
                            referral_codes[user.referral_code] = user_id
                    
                    logger.info("Database loaded successfully")
        
        # –ó–∞–≥—Ä—É–∑–∫–∞ –ø—Ä–æ–º–æ–∫–æ–¥–æ–≤
        if os.path.exists(PROMO_FILE):
            with open(PROMO_FILE, 'r', encoding='utf-8') as f:
                promo_codes = json.load(f)
                logger.info(f"Loaded {len(promo_codes)} promo codes")
                
        # –ó–∞–≥—Ä—É–∑–∫–∞ —à–∞–±–ª–æ–Ω–æ–≤
        if os.path.exists(TEMPLATES_FILE):
            with open(TEMPLATES_FILE, 'r', encoding='utf-8') as f:
                templates_data = json.load(f)
                for t_id, t_data in templates_data.items():
                    templates[t_id] = Template(**t_data)
                logger.info(f"Loaded {len(templates)} templates")
                
        # –ó–∞–≥—Ä—É–∑–∫–∞ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π
        if os.path.exists(ACHIEVEMENTS_FILE):
            with open(ACHIEVEMENTS_FILE, 'r', encoding='utf-8') as f:
                achievements_data = json.load(f)
                for a_id, a_data in achievements_data.items():
                    achievements[a_id] = Achievement(**a_data)
                logger.info(f"Loaded {len(achievements)} achievements")
                
        # –ó–∞–≥—Ä—É–∑–∫–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
        if os.path.exists(STATS_FILE):
            with open(STATS_FILE, 'r', encoding='utf-8') as f:
                bot_stats = json.load(f)
                logger.info("Bot stats loaded")
                    
        # –°–æ–∑–¥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –∞–¥–º–∏–Ω–∞ –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
        if ADMIN_ID not in users_db:
            admin_user = User(ADMIN_ID)
            admin_user.is_premium = True
            admin_user.premium_expiry = None
            admin_user.stars = 1000
            admin_user.has_subscribed = True
            users_db[ADMIN_ID] = admin_user
            admin_user.mark_modified()
            logger.info(f"Created admin user: {ADMIN_ID}")
        else:
            admin_user = users_db[ADMIN_ID]
            admin_user.is_premium = True
            admin_user.premium_expiry = None
            admin_user.has_subscribed = True
            admin_user.mark_modified()
            logger.info(f"Admin premium status set for {ADMIN_ID}")
            
        # –°–æ–∑–¥–∞–µ–º –±–∞–∑–æ–≤—ã–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è, –µ—Å–ª–∏ –∏—Ö –Ω–µ—Ç
        if not achievements:
            create_default_achievements()
            
        # –°–æ–∑–¥–∞–µ–º –±–∞–∑–æ–≤—ã–µ —à–∞–±–ª–æ–Ω—ã, –µ—Å–ª–∏ –∏—Ö –Ω–µ—Ç
        if not templates:
            create_default_templates()
            
    except Exception as e:
        logger.error(f"Error loading database: {e}")
        users_db = {}
        referral_codes = {}
        promo_codes = {}
        templates = {}
        achievements = {}

async def save_db():
    try:
        async with db_lock:
            data = {
                'users': {k: v.to_dict() for k, v in users_db.items()},
                'referral_codes': referral_codes
            }
            
            with open(DB_FILE, 'w', encoding='utf-8') as f:
                json.dump(data, f, ensure_ascii=False, indent=2)
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø—Ä–æ–º–æ–∫–æ–¥—ã
            with open(PROMO_FILE, 'w', encoding='utf-8') as f:
                json.dump(promo_codes, f, ensure_ascii=False, indent=2)
                
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —à–∞–±–ª–æ–Ω—ã
            templates_data = {t_id: t.dict() for t_id, t in templates.items()}
            with open(TEMPLATES_FILE, 'w', encoding='utf-8') as f:
                json.dump(templates_data, f, ensure_ascii=False, indent=2)
                
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è
            achievements_data = {a_id: a.dict() for a_id, a in achievements.items()}
            with open(ACHIEVEMENTS_FILE, 'w', encoding='utf-8') as f:
                json.dump(achievements_data, f, ensure_ascii=False, indent=2)
                
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
            with open(STATS_FILE, 'w', encoding='utf-8') as f:
                json.dump(bot_stats, f, ensure_ascii=False, indent=2)
            
            for user in users_db.values():
                user._modified = False
                
            logger.info("Database saved")
    except Exception as e:
        logger.error(f"Error saving database: {e}")

def create_default_achievements():
    global achievements
    achievements = {
        "first_generation": Achievement(
            id="first_generation",
            name="–ü–µ—Ä–≤—ã–π —à–∞–≥",
            description="–°–æ–∑–¥–∞–π—Ç–µ –≤–∞—à –ø–µ—Ä–≤—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç",
            condition="generated_content_count >= 1",
            reward=20,
            icon="üöÄ"
        ),
        "image_master": Achievement(
            id="image_master",
            name="–ú–∞—Å—Ç–µ—Ä –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π",
            description="–°–æ–∑–¥–∞–π—Ç–µ 10 –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π",
            condition="images_generated >= 10",
            reward=50,
            icon="üé®"
        ),
        "text_master": Achievement(
            id="text_master",
            name="–ú–∞—Å—Ç–µ—Ä —Ç–µ–∫—Å—Ç–æ–≤",
            description="–°–æ–∑–¥–∞–π—Ç–µ 10 —Ç–µ–∫—Å—Ç–æ–≤",
            condition="texts_generated >= 10",
            reward=50,
            icon="üìù"
        ),
        "level_5": Achievement(
            id="level_5",
            name="–û–ø—ã—Ç–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å",
            description="–î–æ—Å—Ç–∏–≥–Ω–∏—Ç–µ 5 —É—Ä–æ–≤–Ω—è",
            condition="level >= 5",
            reward=100,
            icon="üåü"
        ),
        "premium_user": Achievement(
            id="premium_user",
            name="–ü—Ä–µ–º–∏—É–º —Å—Ç–∞—Ç—É—Å",
            description="–ê–∫—Ç–∏–≤–∏—Ä—É–π—Ç–µ –ø—Ä–µ–º–∏—É–º –ø–æ–¥–ø–∏—Å–∫—É",
            condition="is_premium = true",
            reward=150,
            icon="üíé"
        )
    }

def create_default_templates():
    global templates
    templates = {
        "social_post": Template(
            id="social_post",
            name="–ü–æ—Å—Ç –¥–ª—è —Å–æ—Ü—Å–µ—Ç–µ–π",
            description="–°–æ–∑–¥–∞–π—Ç–µ –ø—Ä–∏–≤–ª–µ–∫–∞—Ç–µ–ª—å–Ω—ã–π –ø–æ—Å—Ç –¥–ª—è —Å–æ—Ü–∏–∞–ª—å–Ω—ã—Ö —Å–µ—Ç–µ–π",
            prompt="–ù–∞–ø–∏—à–∏ –∫—Ä–µ–∞—Ç–∏–≤–Ω—ã–π –ø–æ—Å—Ç –¥–ª—è —Å–æ—Ü—Å–µ—Ç–µ–π –Ω–∞ —Ç–µ–º—É: {topic}. –î–ª–∏–Ω–∞: 200-300 —Å–∏–º–≤–æ–ª–æ–≤. –î–æ–±–∞–≤—å —ç–º–æ–¥–∑–∏ –∏ —Ö—ç—à—Ç–µ–≥–∏.",
            example="–¢–µ–º–∞: –û—Ç–∫—Ä—ã—Ç–∏–µ –Ω–æ–≤–æ–≥–æ –∫–æ—Ñ–µ–π–Ω–æ–≥–æ –º–∞–≥–∞–∑–∏–Ω–∞",
            category="–¢–µ–∫—Å—Ç",
            created_by=ADMIN_ID,
            created_at=datetime.datetime.now().isoformat()
        ),
        "business_idea": Template(
            id="business_idea",
            name="–ë–∏–∑–Ω–µ—Å-–∏–¥–µ—è",
            description="–°–≥–µ–Ω–µ—Ä–∏—Ä—É–π—Ç–µ —É–Ω–∏–∫–∞–ª—å–Ω—É—é –±–∏–∑–Ω–µ—Å-–∏–¥–µ—é",
            prompt="–ü—Ä–µ–¥–ª–æ–∂–∏ –∏–Ω–Ω–æ–≤–∞—Ü–∏–æ–Ω–Ω—É—é –±–∏–∑–Ω–µ—Å-–∏–¥–µ—é –≤ —Å—Ñ–µ—Ä–µ: {industry}. –û–ø–∏—à–∏ —Ü–µ–ª–µ–≤—É—é –∞—É–¥–∏—Ç–æ—Ä–∏—é, —É–Ω–∏–∫–∞–ª—å–Ω–æ–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –∏ –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—ã–µ —Ä–∏—Å–∫–∏.",
            example="–°—Ñ–µ—Ä–∞: —ç–∫–æ–ª–æ–≥–∏—á–µ—Å–∫–∏ —á–∏—Å—Ç—ã–µ –ø—Ä–æ–¥—É–∫—Ç—ã",
            category="–¢–µ–∫—Å—Ç",
            created_by=ADMIN_ID,
            created_at=datetime.datetime.now().isoformat()
        ),
        "logo_design": Template(
            id="logo_design",
            name="–î–∏–∑–∞–π–Ω –ª–æ–≥–æ—Ç–∏–ø–∞",
            description="–°–æ–∑–¥–∞–π—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è –ª–æ–≥–æ—Ç–∏–ø–∞",
            prompt="–°–æ–∑–¥–∞–π –æ–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è –ª–æ–≥–æ—Ç–∏–ø–∞ –∫–æ–º–ø–∞–Ω–∏–∏: {company_name}, —Å—Ñ–µ—Ä–∞: {industry}. –°—Ç–∏–ª—å: {style}. –û—Å–Ω–æ–≤–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã: {elements}.",
            example="–ù–∞–∑–≤–∞–Ω–∏–µ: TechVision, –°—Ñ–µ—Ä–∞: IT-–∫–æ–Ω—Å–∞–ª—Ç–∏–Ω–≥, –°—Ç–∏–ª—å: –º–∏–Ω–∏–º–∞–ª–∏–∑–º, –≠–ª–µ–º–µ–Ω—Ç—ã: –≥–ª–∞–∑, –º–∏–∫—Ä–æ—Å—Ö–µ–º–∞",
            category="–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ",
            created_by=ADMIN_ID,
            created_at=datetime.datetime.now().isoformat()
        )
    }

async def get_user(user_id: int) -> User:
    if user_id in users_db:
        user = users_db[user_id]
        user.check_premium_status()
    else:
        user = User(user_id)
        users_db[user_id] = user
        referral_codes[user.referral_code] = user_id
        bot_stats["total_users"] += 1
        user.mark_modified()
    
    return users_db[user_id]

def detect_language(text: str) -> str:
    if re.search(r'[–∞-—è–ê-–Ø]', text):
        return 'ru'
    return 'en'

def trim_caption(text: str, max_length: int = MAX_CAPTION_LENGTH) -> str:
    if len(text) > max_length:
        return text[:max_length-3] + "..."
    return text

def truncate_prompt(text: str, max_length: int = MAX_PROMPT_LENGTH) -> str:
    if len(text) > max_length:
        return text[:max_length-3] + "..."
    return text

def split_message(text: str, max_length: int = MAX_MESSAGE_LENGTH) -> List[str]:
    return [text[i:i+max_length] for i in range(0, len(text), max_length)]

def clean_html(text: str) -> str:
    text = re.sub(r'<!?[^>]+>', '', text)
    replacements = {
        '<': '&lt;',
        '>': '&gt;',
        '&': '&amp;',
        '"': '&quot;'
    }
    for char, entity in replacements.items():
        text = text.replace(char, entity)
    text = re.sub(r'<\?.*?\?>', '', text)
    return text

def format_code_blocks(text: str) -> str:
    text = clean_html(text)
    text = re.sub(r'```(.*?)```', r'<pre><code>\1</code></pre>', text, flags=re.DOTALL)
    text = re.sub(r'`(.*?)`', r'<code>\1</code>', text)
    return text

async def fetch_with_retry(url: str, retries: int = MAX_RETRIES, delay: float = RETRY_DELAY) -> Optional[str]:
    for i in range(retries):
        try:
            async with aiohttp.ClientSession() as session:
                async with session.get(url, timeout=aiohttp.ClientTimeout(total=30)) as resp:
                    if resp.status == 200:
                        return await resp.text()
                    elif resp.status in [400, 401, 403, 404]:
                        logger.error(f"Client error {resp.status}: {url}")
                        return None
                    elif resp.status in [500, 502, 503, 504]:
                        logger.warning(f"Server error {resp.status}, retry {i+1}/{retries}")
                        await asyncio.sleep(delay)
                    else:
                        logger.warning(f"Unexpected status {resp.status}, retry {i+1}/{retries}")
                        await asyncio.sleep(delay)
        except (aiohttp.ClientConnectionError, aiohttp.ServerDisconnectedError) as e:
            logger.warning(f"Connection error (attempt {i+1}/{retries}): {e}")
            await asyncio.sleep(delay)
        except (aiohttp.ClientError, asyncio.TimeoutError) as e:
            logger.warning(f"Request error (attempt {i+1}/{retries}): {e}")
            await asyncio.sleep(delay)
        except Exception as e:
            logger.error(f"Unexpected error: {e}")
            break
    logger.error(f"Failed after {retries} attempts: {url}")
    return None

async def safe_send_photo(
    message: Message, 
    photo: str, 
    caption: str, 
    reply_markup: InlineKeyboardMarkup,
    max_retries: int = 3
) -> Optional[types.Message]:
    for attempt in range(max_retries):
        try:
            return await message.answer_photo(
                photo=photo,
                caption=caption,
                reply_markup=reply_markup
            )
        except TelegramBadRequest as e:
            if "failed to get HTTP URL content" in str(e) and attempt < max_retries-1:
                logger.warning(f"Telegram download failed, retry {attempt+1}/{max_retries}")
                await asyncio.sleep(1)
            else:
                raise
    raise Exception(f"Failed to send photo after {max_retries} attempts")

async def translate_to_english(text: str) -> str:
    try:
        translation_prompt = f"Translate this to English without any additional text: {text}"
        result = await fetch_with_retry(f"{TEXT_URL}{urllib.parse.quote(translation_prompt)}")
        return result.strip().strip('"') if result else text
    except Exception as e:
        logger.error(f"Translation error: {e}")
        return text

async def send_typing_effect(chat_id: int, duration: int = 5):
    end_time = time.time() + duration
    while time.time() < end_time:
        await bot.send_chat_action(chat_id, "typing")
        await asyncio.sleep(2.5)

async def improve_prompt(original_prompt: str) -> str:
    try:
        improvement_prompt = (
            "–£–ª—É—á—à–∏ —Å–ª–µ–¥—É—é—â–∏–π –ø—Ä–æ–º–ø—Ç –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è, –¥–æ–±–∞–≤–∏–≤: "
            "1. –ö–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ –¥–µ—Ç–∞–ª–∏ –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏ "
            "2. –•—É–¥–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –¥–µ—Å–∫—Ä–∏–ø—Ç–æ—Ä—ã "
            "3. –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∫–∞—á–µ—Å—Ç–≤–∞\n\n"
            f"–ò—Å—Ö–æ–¥–Ω—ã–π –ø—Ä–æ–º–ø—Ç: {original_prompt}"
        )
        result = await fetch_with_retry(f"{TEXT_URL}{urllib.parse.quote(improvement_prompt)}")
        return result.strip().strip('"') if result else original_prompt
    except Exception as e:
        logger.error(f"Prompt improvement error: {e}")
        return original_prompt

def count_words(text: str) -> int:
    words = re.findall(r'\b\w+\b', text)
    return len(words)

def generate_random_id(length=8):
    return ''.join(random.choices(string.ascii_letters + string.digits, k=length))
# ===================== –§–£–ù–ö–¶–ò–ò –î–õ–Ø –§–û–ù–û–í–´–• –ó–ê–î–ê–ß =====================
async def auto_save_db():
    """–§–æ–Ω–æ–≤–∞—è –∑–∞–¥–∞—á–∞ –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
    while True:
        try:
            await asyncio.sleep(300)  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–∞–∂–¥—ã–µ 5 –º–∏–Ω—É—Ç
            await save_db()
            logger.info("Auto-saved database")
        except Exception as e:
            logger.error(f"Auto-save error: {e}")

async def self_pinger():
    """–§–æ–Ω–æ–≤–∞—è –∑–∞–¥–∞—á–∞ –¥–ª—è –ø–æ–¥–¥–µ—Ä–∂–∞–Ω–∏—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
    while True:
        try:
            await asyncio.sleep(60)  # –ü–∏–Ω–≥ –∫–∞–∂–¥—É—é –º–∏–Ω—É—Ç—É
            async with aiohttp.ClientSession() as session:
                async with session.get("https://your-app-url.onrender.com/"):
                    pass
            logger.debug("Self-ping executed")
        except Exception as e:
            logger.error(f"Self-ping error: {e}")

# ===================== –ü–†–û–í–ï–†–ö–ê –ü–û–î–ü–ò–°–ö–ò =====================
async def check_subscription(user_id: int) -> bool:
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –ø–æ–¥–ø–∏—Å–∞–Ω –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞ –∫–∞–Ω–∞–ª"""
    try:
        chat_member = await bot.get_chat_member(CHANNEL_ID, user_id)
        return chat_member.status in [
            ChatMemberStatus.MEMBER,
            ChatMemberStatus.ADMINISTRATOR,
            ChatMemberStatus.CREATOR
        ]
    except Exception as e:
        logger.error(f"Subscription check error: {e}")
        return False

async def ensure_subscription(update: Union[Message, CallbackQuery], user: User) -> bool:
    """–û–±–µ—Å–ø–µ—á–∏–≤–∞–µ—Ç, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ–¥–ø–∏—Å–∞–Ω –Ω–∞ –∫–∞–Ω–∞–ª"""
    if user.has_subscribed:
        return True
    
    if await check_subscription(user.user_id):
        user.has_subscribed = True
        user.mark_modified()
        await save_db()
        return True
    
    text = (
        "üì¢ –î–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –±–æ—Ç–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –Ω–∞—à –∫–∞–Ω–∞–ª!\n"
        "üëâ https://t.me/neurogptpro üëà\n\n"
        "–ü–æ—Å–ª–µ –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ"
    )
    
    if isinstance(update, Message):
        await update.answer(text, reply_markup=subscribe_keyboard())
    else:
        await update.message.answer(text, reply_markup=subscribe_keyboard())
    
    return False

# ===================== –û–ë–†–ê–ë–û–¢–ö–ê –ü–õ–ê–¢–ï–ñ–ï–ô –ò –ü–†–û–ú–û–ö–û–î–û–í =====================
@dp.pre_checkout_query()
async def process_pre_checkout_query(pre_checkout_query: PreCheckoutQuery):
    user_id = pre_checkout_query.from_user.id
    user = await get_user(user_id)
    await bot.answer_pre_checkout_query(pre_checkout_query.id, ok=True)
    logger.info(f"Pre-checkout approved for {user_id}")

@dp.message(F.successful_payment)
async def process_successful_payment(message: Message):
    user = await get_user(message.from_user.id)
    payment = message.successful_payment
    item = payment.invoice_payload
    
    items = {
        "stars30": {"stars": 30},
        "stars50": {"stars": 50},
        "stars150": {"stars": 150},
        "stars500": {"stars": 500},
        "premium_month": {"premium": True, "expiry": time.time() + 30 * 24 * 3600},
        "premium_forever": {"premium": True, "expiry": None}
    }
    
    if item in items:
        product = items[item]
        if "stars" in product:
            user.stars += product["stars"]
            bot_stats["stars_purchased"] += product["stars"]
            STARS_PURCHASED.inc(product["stars"])
            text = f"‚úÖ –ö—É–ø–ª–µ–Ω–æ {product['stars']} ‚≠ê"
        else:
            user.is_premium = True
            user.premium_expiry = product.get("expiry")
            bot_stats["premium_purchased"] += 1
            PREMIUM_PURCHASED.inc()
            text = "üíé –ü—Ä–µ–º–∏—É–º –ø–æ–¥–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞!"
        
        user.mark_modified()
        await save_db()
        await message.answer(text + "\n" + format_balance(user), reply_markup=main_keyboard(user))
    else:
        await message.answer("‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–æ–≤–∞—Ä, –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É")

async def process_referral(user: User, ref_code: str):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–π –∫–æ–¥"""
    if user.referral_used:
        return
    
    referrer_id = referral_codes.get(ref_code)
    if not referrer_id or referrer_id == user.user_id:
        return
    
    if referrer_id in users_db:
        referrer = users_db[referrer_id]
        referrer.referral_balance += REFERRAL_BONUS
        referrer.mark_modified()
        
        user.stars += START_BALANCE_STARS // 2
        user.referral_used = True
        user.mark_modified()
        
        await send_notification(
            referrer_id,
            f"üéâ –ù–æ–≤—ã–π —Ä–µ—Ñ–µ—Ä–∞–ª!\n"
            f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{user.user_id} –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª—Å—è –ø–æ –≤–∞—à–µ–π —Å—Å—ã–ª–∫–µ\n"
            f"+{REFERRAL_BONUS} üíé –Ω–∞ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–π –±–∞–ª–∞–Ω—Å"
        )
        
        await bot.send_message(
            user.user_id,
            f"üéÅ –†–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–π –±–æ–Ω—É—Å!\n"
            f"+{START_BALANCE_STARS // 2} ‚≠ê –Ω–∞ –≤–∞—à –±–∞–ª–∞–Ω—Å"
        )
        
        await save_db()

async def process_promo_code(user: User, promo_code: str, message: Message):
    """–ê–∫—Ç–∏–≤–∏—Ä—É–µ—Ç –ø—Ä–æ–º–æ–∫–æ–¥ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    promo_data = promo_codes.get(promo_code.upper())
    
    if not promo_data or not promo_data.get("active", True):
        await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –∏–ª–∏ –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã–π –ø—Ä–æ–º–æ–∫–æ–¥")
        return
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ª–∏–º–∏—Ç–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
    used_count = promo_data.get("used_count", 0)
    if "limit" in promo_data and used_count >= promo_data["limit"]:
        await message.answer("‚ùå –õ–∏–º–∏—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –ø—Ä–æ–º–æ–∫–æ–¥–∞ –∏—Å—á–µ—Ä–ø–∞–Ω")
        return
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞, –Ω–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ —ç—Ç–æ—Ç –ø—Ä–æ–º–æ–∫–æ–¥
    if "used_by" in promo_data:
        if any(entry["user_id"] == user.user_id for entry in promo_data["used_by"]):
            await message.answer("‚ÑπÔ∏è –í—ã —É–∂–µ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–ª–∏ —ç—Ç–æ—Ç –ø—Ä–æ–º–æ–∫–æ–¥")
            return
    
    # –ê–∫—Ç–∏–≤–∞—Ü–∏—è –ø—Ä–æ–º–æ–∫–æ–¥–∞
    promo_type = promo_data["type"]
    value = promo_data["value"]
    
    if promo_type == "stars":
        user.stars += value
        text = f"üéÅ –ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–æ {value} ‚≠ê"
    elif promo_type == "premium":
        if value == "forever":
            user.is_premium = True
            user.premium_expiry = None
            text = "üíé –ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω –≤–µ—á–Ω—ã–π –ø—Ä–µ–º–∏—É–º –¥–æ—Å—Ç—É–ø!"
        else:
            days = int(value)
            expiry = time.time() + days * 24 * 3600
            user.is_premium = True
            user.premium_expiry = expiry
            text = f"üíé –ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω –ø—Ä–µ–º–∏—É–º –¥–æ—Å—Ç—É–ø –Ω–∞ {days} –¥–Ω–µ–π!"
    
    # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –ø—Ä–æ–º–æ–∫–æ–¥–∞
    promo_data["used_count"] = used_count + 1
    if "used_by" not in promo_data:
        promo_data["used_by"] = []
    
    promo_data["used_by"].append({
        "user_id": user.user_id,
        "date": datetime.datetime.now().isoformat()
    })
    
    promo_codes[promo_code.upper()] = promo_data
    user.mark_modified()
    
    # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
    await save_db()
    await message.answer(text + "\n" + format_balance(user), reply_markup=main_keyboard(user))

# ===================== –ê–î–ú–ò–ù-–§–£–ù–ö–¶–ò–ò =====================
async def process_admin_command(message: Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /admin"""
    user = await get_user(message.from_user.id)
    if user.user_id != ADMIN_ID:
        return
    
    args = message.text.split()
    if len(args) > 1 and args[1] == ADMIN_PASSWORD:
        user.state = UserState.ADMIN_PANEL
        await message.answer("üëë –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å", reply_markup=admin_keyboard())
    else:
        await message.answer("üîí –í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å –∞–¥–º–∏–Ω–∞:")

async def process_promo_creation(message: Message):
    """–°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ–º–æ–∫–æ–¥–∞ –ø–æ –∫–æ–º–∞–Ω–¥–µ –∞–¥–º–∏–Ω–∞"""
    user = await get_user(message.from_user.id)
    if user.user_id != ADMIN_ID:
        return
    
    try:
        parts = message.text.split(":")
        if len(parts) < 3:
            raise ValueError("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç")
        
        promo_type = parts[0].strip()
        value = parts[1].strip()
        limit = int(parts[2].strip())
        
        if promo_type not in ["stars", "premium"]:
            raise ValueError("–ù–µ–≤–µ—Ä–Ω—ã–π —Ç–∏–ø –ø—Ä–æ–º–æ–∫–æ–¥–∞")
        
        # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —É–Ω–∏–∫–∞–ª—å–Ω–æ–≥–æ –∫–æ–¥–∞
        promo_code = "PROMO" + ''.join(random.choices(string.ascii_uppercase + string.digits, k=8))
        while promo_code in promo_codes:
            promo_code = "PROMO" + ''.join(random.choices(string.ascii_uppercase + string.digits, k=8))
        
        # –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ–º–æ–∫–æ–¥–∞
        promo_codes[promo_code] = {
            "type": promo_type,
            "value": value,
            "limit": limit if limit > 0 else 0,
            "created_by": user.user_id,
            "created_at": datetime.datetime.now().isoformat(),
            "active": True,
            "used_count": 0
        }
        
        # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ
        with open(PROMO_FILE, 'w', encoding='utf-8') as f:
            json.dump(promo_codes, f, ensure_ascii=False, indent=2)
        
        await message.answer(f"‚úÖ –ü—Ä–æ–º–æ–∫–æ–¥ —Å–æ–∑–¥–∞–Ω: {promo_code}")
        user.state = UserState.ADMIN_PANEL
        await show_menu(message, user)
    except Exception as e:
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞: {str(e)}")

async def process_broadcast_message(message: Message):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏"""
    user = await get_user(message.from_user.id)
    if user.user_id != ADMIN_ID:
        return
    
    admin_broadcast_data[user.user_id] = message.text
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", callback_data="broadcast_confirm")],
        [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data="broadcast_cancel")]
    ])
    await message.answer(
        f"üì£ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ —Ä–∞—Å—Å—ã–ª–∫—É:\n{message.text[:500]}...",
        reply_markup=keyboard
    )

async def execute_broadcast(admin_id: int):
    """–í—ã–ø–æ–ª–Ω—è–µ—Ç —Ä–∞—Å—Å—ã–ª–∫—É —Å–æ–æ–±—â–µ–Ω–∏—è"""
    if admin_id not in admin_broadcast_data or admin_broadcast_data[admin_id] == "CANCEL":
        return
    
    text = admin_broadcast_data[admin_id]
    success = 0
    errors = 0
    
    await bot.send_message(admin_id, "‚è≥ –ù–∞—á–∏–Ω–∞—é —Ä–∞—Å—Å—ã–ª–∫—É...")
    
    for user_id, user in list(users_db.items()):
        try:
            await bot.send_message(user_id, text)
            success += 1
            if success % 10 == 0:
                await asyncio.sleep(1)
        except Exception as e:
            errors += 1
            logger.error(f"Broadcast to {user_id} failed: {e}")
    
    del admin_broadcast_data[admin_id]
    await bot.send_message(
        admin_id,
        f"üì£ –†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!\n"
        f"‚úÖ –£—Å–ø–µ—à–Ω–æ: {success}\n"
        f"‚ùå –û—à–∏–±–æ–∫: {errors}",
        reply_markup=admin_keyboard()
    )

async def process_admin_search_user(message: Message, text: str):
    """–ü–æ–∏—Å–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ ID"""
    user = await get_user(message.from_user.id)
    if user.user_id != ADMIN_ID:
        return
    
    try:
        user_id = int(text)
        if user_id not in users_db:
            await message.answer("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return
        
        target_user = users_db[user_id]
        await handle_admin_view_user(message, user, user_id)
    except ValueError:
        await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç ID")

async def process_admin_edit_user(message: Message, text: str):
    """–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    user = await get_user(message.from_user.id)
    if user.user_id != ADMIN_ID:
        return
    
    try:
        parts = text.split(":")
        if len(parts) < 2:
            raise ValueError("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç")
        
        field = parts[0].strip()
        value = parts[1].strip()
        
        # –ò–∑–≤–ª–µ–∫–∞–µ–º user_id –∏–∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ (–ø–æ—Å–ª–µ–¥–Ω–∏–π –ø—Ä–æ—Å–º–æ—Ç—Ä–µ–Ω–Ω—ã–π)
        if not user.last_text or not user.last_text.startswith("admin_edit_user_"):
            raise ValueError("–ù–µ –≤—ã–±—Ä–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å")
        
        user_id = int(user.last_text.split("_")[3])
        if user_id not in users_db:
            raise ValueError("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
        
        target_user = users_db[user_id]
        
        if field == "stars":
            target_user.stars = int(value)
        elif field == "premium":
            days = int(value)
            if days > 0:
                target_user.is_premium = True
                target_user.premium_expiry = time.time() + days * 24 * 3600
            else:
                target_user.is_premium = False
                target_user.premium_expiry = None
        else:
            raise ValueError("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –ø–æ–ª–µ")
        
        target_user.mark_modified()
        await save_db()
        await message.answer(f"‚úÖ –î–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} –æ–±–Ω–æ–≤–ª–µ–Ω—ã")
        await handle_admin_view_user(message, user, user_id)
    except Exception as e:
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞: {str(e)}")

async def process_admin_create_template(message: Message, text: str):
    """–°–æ–∑–¥–∞–Ω–∏–µ —à–∞–±–ª–æ–Ω–∞ –ø–æ –∫–æ–º–∞–Ω–¥–µ –∞–¥–º–∏–Ω–∞"""
    user = await get_user(message.from_user.id)
    if user.user_id != ADMIN_ID:
        return
    
    try:
        template_data = json.loads(text)
        required_fields = ["name", "description", "prompt", "example", "category"]
        
        if not all(field in template_data for field in required_fields):
            raise ValueError("–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è")
        
        # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è ID
        template_id = "T" + generate_random_id(5)
        while template_id in templates:
            template_id = "T" + generate_random_id(5)
        
        # –°–æ–∑–¥–∞–Ω–∏–µ —à–∞–±–ª–æ–Ω–∞
        template = Template(
            id=template_id,
            name=template_data["name"],
            description=template_data["description"],
            prompt=template_data["prompt"],
            example=template_data["example"],
            category=template_data["category"],
            created_by=user.user_id,
            created_at=datetime.datetime.now().isoformat()
        )
        
        templates[template_id] = template
        await save_db()
        
        await message.answer(f"‚úÖ –®–∞–±–ª–æ–Ω —Å–æ–∑–¥–∞–Ω: {template.name}")
        user.state = UserState.ADMIN_PANEL
        await show_menu(message, user)
    except json.JSONDecodeError:
        await message.answer("‚ùå –û—à–∏–±–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∞ JSON")
    except Exception as e:
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞: {str(e)}")
        
# ===================== –ö–õ–ê–í–ò–ê–¢–£–†–´ =====================
def create_keyboard(
    buttons: List[Union[Tuple[str, str], List[Tuple[str, str]]]],
    back_button: bool = False,
    home_button: bool = False,
    cancel_button: bool = False,
    columns: int = 2
) -> InlineKeyboardMarkup:
    builder = InlineKeyboardBuilder()
    
    for row in buttons:
        if isinstance(row, list):
            for btn in row:
                builder.button(text=btn[0], callback_data=btn[1])
            builder.adjust(len(row))
        else:
            builder.button(text=row[0], callback_data=row[1])
    
    if back_button:
        builder.button(text="üîô –ù–∞–∑–∞–¥", callback_data="back")
    if home_button:
        builder.button(text="üè† –ì–ª–∞–≤–Ω–æ–µ", callback_data="home")
    if cancel_button:
        builder.button(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel")
    
    if columns > 1:
        builder.adjust(columns)
    
    return builder.as_markup()

def main_keyboard(user: User) -> InlineKeyboardMarkup:
    buttons = [
        [("üõ†Ô∏è –ì–µ–Ω–µ—Ä–∞—Ü–∏—è", "generate_menu")],
        [("üë§ –ü—Ä–æ—Ñ–∏–ª—å", "profile_menu")],
        [("üíé –ü—Ä–µ–º–∏—É–º", "premium_info")],
        [("üéÅ –ï–∂–µ–¥–Ω–µ–≤–Ω—ã–π –±–æ–Ω—É—Å", "daily_bonus")]
    ]
    return create_keyboard(buttons, columns=2)

def generate_menu_keyboard() -> InlineKeyboardMarkup:
    buttons = [
        [("üìù –¢–µ–∫—Å—Ç", "gen_text")],
        [("üé® –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ", "gen_image")],
        [("üë§ –ê–≤–∞—Ç–∞—Ä", "gen_avatar")],
        [("üñºÔ∏è –õ–æ–≥–æ—Ç–∏–ø", "gen_logo")],
        [("üìã –®–∞–±–ª–æ–Ω—ã", "template_select")],
        [("ü§ñ –ú–æ–¥–µ–ª–∏ –ò–ò", "model_select")],
        [("üè† –ì–ª–∞–≤–Ω–æ–µ", "home")]
    ]
    return create_keyboard(buttons, columns=2)

def profile_menu_keyboard() -> InlineKeyboardMarkup:
    buttons = [
        [("üí∞ –ë–∞–ª–∞–Ω—Å", "balance_info")],
        [("üõí –ú–∞–≥–∞–∑–∏–Ω", "shop")],
        [("üë• –†–µ—Ñ–µ—Ä–∞–ª—ã", "referral_info")],
        [("üèÜ –î–æ—Å—Ç–∏–∂–µ–Ω–∏—è", "achievements_list")],
        [("‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏", "settings_menu")],
        [("üÜò –ü–æ–¥–¥–µ—Ä–∂–∫–∞", "support")],
        [("üè† –ì–ª–∞–≤–Ω–æ–µ", "home")]
    ]
    return create_keyboard(buttons, columns=2)

def shop_keyboard() -> InlineKeyboardMarkup:
    buttons = [
        [("‚≠ê 30 –ó–≤–µ–∑–¥", "buy_stars30")],
        [("‚≠ê 50 –ó–≤–µ–∑–¥", "buy_stars50")],
        [("‚≠ê 150 –ó–≤–µ–∑–¥", "buy_stars150")],
        [("‚≠ê 500 –ó–≤–µ–∑–¥", "buy_stars500")],
        [("üíé –ü—Ä–µ–º–∏—É–º 1 –º–µ—Å", "buy_premium_month")],
        [("üíé –ü—Ä–µ–º–∏—É–º –Ω–∞–≤—Å–µ–≥–¥–∞", "buy_premium_forever")],
        [("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", "home"), ("‚ùå –û—Ç–º–µ–Ω–∞", "cancel")]
    ]
    return create_keyboard(buttons, columns=2)

def image_options_keyboard(user: User) -> InlineKeyboardMarkup:
    buttons = []
    buttons.append([("‚ú® –£–ª—É—á—à–∏—Ç—å", "improve_image")])
    buttons.append([("üîÑ –°–≥–µ–Ω–µ—Ä–∏—Ç—å —Å–Ω–æ–≤–∞", "regenerate_image"), ("‚≠ê –û—Ü–µ–Ω–∏—Ç—å", "feedback_image")])
    buttons.append([("üè† –ì–ª–∞–≤–Ω–æ–µ", "home")])
    return create_keyboard(buttons, columns=1)

def avatar_options_keyboard() -> InlineKeyboardMarkup:
    buttons = [
        [("üîÑ –°–≥–µ–Ω–µ—Ä–∏—Ç—å —Å–Ω–æ–≤–∞", "regenerate_avatar"), ("‚≠ê –û—Ü–µ–Ω–∏—Ç—å", "feedback_avatar")],
        [("üè† –ì–ª–∞–≤–Ω–æ–µ", "home")]
    ]
    return create_keyboard(buttons, columns=2)

def logo_options_keyboard() -> InlineKeyboardMarkup:
    buttons = [
        [("üîÑ –°–≥–µ–Ω–µ—Ä–∏—Ç—å —Å–Ω–æ–≤–∞", "regenerate_logo"), ("‚≠ê –û—Ü–µ–Ω–∏—Ç—å", "feedback_logo")],
        [("üè† –ì–ª–∞–≤–Ω–æ–µ", "home")]
    ]
    return create_keyboard(buttons, columns=2)

def text_options_keyboard(user: User) -> InlineKeyboardMarkup:
    buttons = []
    buttons.append([("üîÑ –°–≥–µ–Ω–µ—Ä–∏—Ç—å —Å–Ω–æ–≤–∞", "regenerate_text"), ("üìÑ –£–≤–µ–ª–∏—á–∏—Ç—å", "extend_text")])
    buttons.append([("‚úçÔ∏è –ü–µ—Ä–µ—Ñ—Ä–∞–∑–∏—Ä–æ–≤–∞—Ç—å", "rephrase_text"), ("‚≠ê –û—Ü–µ–Ω–∏—Ç—å", "feedback_text")])
    
    if user.context_active:
        buttons.append([("üßπ –û—á–∏—Å—Ç–∏—Ç—å –∫–æ–Ω—Ç–µ–∫—Å—Ç", "clear_context")])
    
    buttons.append([("üè† –ì–ª–∞–≤–Ω–æ–µ", "home")])
    return create_keyboard(buttons, columns=2)

def premium_keyboard() -> InlineKeyboardMarkup:
    buttons = [
        [("üõí –ü–µ—Ä–µ–π—Ç–∏ –≤ –º–∞–≥–∞–∑–∏–Ω", "shop")],
        [("üéÅ –ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–æ–º–æ–∫–æ–¥", "activate_promo")],
        [("üë• –†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞", "referral_info")],
        [("üè† –ì–ª–∞–≤–Ω–æ–µ", "home")]
    ]
    return create_keyboard(buttons, columns=1)

def image_count_keyboard() -> InlineKeyboardMarkup:
    buttons = [[(str(i), f"img_count_{i}") for i in range(1, MAX_IMAGE_COUNT + 1)]]
    buttons.append([("üè† –ì–ª–∞–≤–Ω–æ–µ", "home")])
    return create_keyboard(buttons, columns=4)

def home_keyboard() -> InlineKeyboardMarkup:
    return InlineKeyboardMarkup(
        inline_keyboard=[[InlineKeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ", callback_data="home")]]
    )

def cancel_keyboard() -> InlineKeyboardMarkup:
    return InlineKeyboardMarkup(
        inline_keyboard=[[InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel")]]
    )

def subscribe_keyboard() -> InlineKeyboardMarkup:
    return InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="üì¢ –ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è", url=f"https://t.me/neurogptpro")],
            [InlineKeyboardButton(text="‚úÖ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É", callback_data="check_subscription")]
        ]
    )

def pay_keyboard(amount: int, currency: str = "‚≠ê") -> InlineKeyboardMarkup:
    builder = InlineKeyboardBuilder()
    builder.button(text=f"üí≥ –û–ø–ª–∞—Ç–∏—Ç—å {amount} {currency}", pay=True)
    builder.button(text="üÜò –ü–æ–¥–¥–µ—Ä–∂–∫–∞", url=f"tg://user?username={PAYMENT_ADMIN[1:]}")
    builder.button(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="home")
    builder.button(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel")
    builder.adjust(1, 2, 1)
    return builder.as_markup()

def balance_keyboard() -> InlineKeyboardMarkup:
    buttons = [
        [("üîÑ –û–±–Ω–æ–≤–∏—Ç—å", "refresh_balance"), ("üè† –ì–ª–∞–≤–Ω–æ–µ", "home")]
    ]
    return create_keyboard(buttons, columns=2)

def referral_keyboard() -> InlineKeyboardMarkup:
    buttons = [
        [("üí∏ –í—ã–≤–µ—Å—Ç–∏ —Å—Ä–µ–¥—Å—Ç–≤–∞", "withdraw_referral")],
        [("üéÅ –ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–æ–º–æ–∫–æ–¥", "activate_promo")],
        [("üè† –ì–ª–∞–≤–Ω–æ–µ", "home")]
    ]
    return create_keyboard(buttons, columns=1)

def model_select_keyboard() -> InlineKeyboardMarkup:
    buttons = [
        [("üñºÔ∏è –î–ª—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π", "image_model_select")],
        [("üìù –î–ª—è —Ç–µ–∫—Å—Ç–∞", "text_model_select")],
        [("üè† –ì–ª–∞–≤–Ω–æ–µ", "home")]
    ]
    return create_keyboard(buttons, columns=1)

def image_models_keyboard(user: User) -> InlineKeyboardMarkup:
    buttons = []
    for key, model in IMAGE_MODELS.items():
        if user.image_model == key:
            buttons.append([(f"‚úÖ {model.name}", f"image_model_{key}")])
        else:
            buttons.append([(model.name, f"image_model_{key}")])
    
    buttons.append([("üîô –ù–∞–∑–∞–¥", "model_select")])
    return create_keyboard(buttons, columns=1)

def text_models_keyboard(user: User) -> InlineKeyboardMarkup:
    buttons = []
    for key, model in TEXT_MODELS.items():
        if model.premium_only and not user.is_premium:
            buttons.append([(f"üîí {model.name} (–ø—Ä–µ–º–∏—É–º)", "premium_required")])
        else:
            if user.text_model == key:
                buttons.append([(f"‚úÖ {model.name}", f"text_model_{key}")])
            else:
                buttons.append([(model.name, f"text_model_{key}")])
    
    buttons.append([("üîô –ù–∞–∑–∞–¥", "model_select")])
    return create_keyboard(buttons, columns=1)

def admin_keyboard() -> InlineKeyboardMarkup:
    buttons = [
        [("üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏", "admin_user_management")],
        [("üé´ –ü—Ä–æ–º–æ–∫–æ–¥—ã", "admin_promo_list")],
        [("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", "admin_stats")],
        [("üì£ –†–∞—Å—Å—ã–ª–∫–∞", "admin_broadcast")],
        [("üìã –®–∞–±–ª–æ–Ω—ã", "admin_template_management")],
        [("üè† –ì–ª–∞–≤–Ω–æ–µ", "home")]
    ]
    return create_keyboard(buttons, columns=2)

def admin_cancel_keyboard() -> InlineKeyboardMarkup:
    return InlineKeyboardMarkup(
        inline_keyboard=[[InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="admin_cancel")]]
    )

def admin_promo_list_keyboard() -> InlineKeyboardMarkup:
    buttons = []
    promo_list = list(promo_codes.keys())
    
    for i in range(0, len(promo_list), 2):
        row = []
        if i < len(promo_list):
            row.append((promo_list[i], f"promo_detail_{promo_list[i]}"))
        if i+1 < len(promo_list):
            row.append((promo_list[i+1], f"promo_detail_{promo_list[i+1]}"))
        buttons.append(row)
    
    buttons.append([("‚ûï –°–æ–∑–¥–∞—Ç—å", "admin_create_promo")])
    buttons.append([("üîô –ù–∞–∑–∞–¥", "admin_panel")])
    return create_keyboard(buttons, columns=2)

def admin_user_management_keyboard() -> InlineKeyboardMarkup:
    buttons = [
        [("üîç –ü–æ–∏—Å–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è", "admin_search_user")],
        [("üìä –¢–æ–ø –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π", "admin_top_users")],
        [("üîô –ù–∞–∑–∞–¥", "admin_panel")]
    ]
    return create_keyboard(buttons, columns=1)

def admin_template_management_keyboard() -> InlineKeyboardMarkup:
    buttons = [
        [("üìã –°–ø–∏—Å–æ–∫ —à–∞–±–ª–æ–Ω–æ–≤", "template_list")],
        [("‚ûï –°–æ–∑–¥–∞—Ç—å —à–∞–±–ª–æ–Ω", "admin_create_template")],
        [("üîô –ù–∞–∑–∞–¥", "admin_panel")]
    ]
    return create_keyboard(buttons, columns=1)

def template_list_keyboard() -> InlineKeyboardMarkup:
    buttons = []
    for template_id, template in templates.items():
        buttons.append([(f"üìã {template.name}", f"template_select_{template_id}")])
    
    buttons.append([("üîô –ù–∞–∑–∞–¥", "admin_template_management")])
    return create_keyboard(buttons, columns=1)

def user_template_list_keyboard() -> InlineKeyboardMarkup:
    buttons = []
    for template_id, template in templates.items():
        buttons.append([(f"üìã {template.name}", f"user_template_select_{template_id}")])
    
    buttons.append([("üè† –ì–ª–∞–≤–Ω–æ–µ", "home")])
    return create_keyboard(buttons, columns=1)

def template_detail_keyboard(template_id: str) -> InlineKeyboardMarkup:
    buttons = [
        [("‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å", f"edit_template_{template_id}")],
        [("üóëÔ∏è –£–¥–∞–ª–∏—Ç—å", f"delete_template_{template_id}")],
        [("üîô –ù–∞–∑–∞–¥", "admin_template_management")]
    ]
    return create_keyboard(buttons, columns=1)

def user_template_options_keyboard(template_id: str) -> InlineKeyboardMarkup:
    buttons = [
        [("üöÄ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å", f"use_template_{template_id}")],
        [("üè† –ì–ª–∞–≤–Ω–æ–µ", "home")]
    ]
    return create_keyboard(buttons, columns=1)

def achievements_list_keyboard(user: User) -> InlineKeyboardMarkup:
    buttons = []
    for achievement_id, achievement in achievements.items():
        if achievement_id in user.achievements:
            unlocked_date = user.achievements[achievement_id]
            date_str = datetime.datetime.fromisoformat(unlocked_date).strftime("%d.%m.%Y")
            buttons.append([(f"‚úÖ {achievement.icon} {achievement.name} ({date_str})", f"achievement_detail_{achievement_id}")])
        else:
            buttons.append([(f"üîí {achievement.icon} {achievement.name}", "locked_achievement")])
    
    buttons.append([("üè† –ì–ª–∞–≤–Ω–æ–µ", "home")])
    return create_keyboard(buttons, columns=1)

def achievement_detail_keyboard() -> InlineKeyboardMarkup:
    buttons = [
        [("üîô –ù–∞–∑–∞–¥", "achievements_list")]
    ]
    return create_keyboard(buttons, columns=1)

def settings_menu_keyboard(user: User) -> InlineKeyboardMarkup:
    notifications = "üîî –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: –í–∫–ª" if user.settings["notifications"] else "üîï –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: –í—ã–∫–ª"
    language = "üåê –†—É—Å—Å–∫–∏–π" if user.settings["language"] == "ru" else "üåê English"
    auto_translate = "üîÑ –ê–≤—Ç–æ–ø–µ—Ä–µ–≤–æ–¥: –í–∫–ª" if user.settings["auto_translate"] else "üîÑ –ê–≤—Ç–æ–ø–µ—Ä–µ–≤–æ–¥: –í—ã–∫–ª"
    
    buttons = [
        [(notifications, "toggle_notifications")],
        [(language, "toggle_language")],
        [(auto_translate, "toggle_auto_translate")],
        [("üîô –ù–∞–∑–∞–¥", "profile_menu")]
    ]
    return create_keyboard(buttons, columns=1)

def feedback_keyboard(content_type: str) -> InlineKeyboardMarkup:
    buttons = [
        [("‚≠ê 1", f"feedback_1_{content_type}"), ("‚≠ê 2", f"feedback_2_{content_type}"), ("‚≠ê 3", f"feedback_3_{content_type}")],
        [("‚≠ê 4", f"feedback_4_{content_type}"), ("‚≠ê 5", f"feedback_5_{content_type}")],
        [("üè† –ì–ª–∞–≤–Ω–æ–µ", "home")]
    ]
    return create_keyboard(buttons, columns=3)

def admin_user_options_keyboard(user_id: int) -> InlineKeyboardMarkup:
    buttons = [
        [("‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å", f"admin_edit_user_{user_id}")],
        [("üîô –ù–∞–∑–∞–¥", "admin_user_management")]
    ]
    return create_keyboard(buttons, columns=1)

# ===================== –ê–ù–ò–ú–ê–¶–ò–ò –ò –£–í–ï–î–û–ú–õ–ï–ù–ò–Ø =====================
async def animate_loading(message: Message, text: str, duration: float = 1.5) -> Message:
    msg = await message.answer(f"‚è≥ {text}")
    await asyncio.sleep(duration)
    return msg

async def animate_error(message: Message, text: str) -> Message:
    msg = await message.answer(f"‚ùå {text}")
    await asyncio.sleep(1)
    return msg

async def animate_success(message: Message, text: str) -> Message:
    msg = await message.answer(f"‚úÖ {text}")
    await asyncio.sleep(1)
    return msg

async def animate_progress(message: Message, text: str, progress: float):
    bar_length = 10
    filled = int(progress * bar_length)
    bar = 'üü©' * filled + '‚¨úÔ∏è' * (bar_length - filled)
    try:
        await message.edit_text(f"‚è≥ {text}\n{bar} {int(progress*100)}%")
    except TelegramBadRequest:
        pass

async def safe_edit_message(
    callback: CallbackQuery, 
    text: str, 
    reply_markup: InlineKeyboardMarkup = None, 
    parse_mode: str = "HTML"
):
    try:
        if callback.message.text:
            await callback.message.edit_text(text, reply_markup=reply_markup, parse_mode=parse_mode)
        elif callback.message.caption:
            await callback.message.edit_caption(caption=text, reply_markup=reply_markup, parse_mode=parse_mode)
        else:
            await callback.message.answer(text, reply_markup=reply_markup, parse_mode=parse_mode)
    except TelegramBadRequest as e:
        logger.warning(f"Message edit failed: {e}, sending new message")
        await callback.message.answer(text, reply_markup=reply_markup, parse_mode=parse_mode)

async def send_notification(user_id: int, text: str):
    try:
        user = await get_user(user_id)
        if user.settings["notifications"]:
            await bot.send_message(user_id, text)
    except Exception as e:
        logger.error(f"Notification failed for {user_id}: {e}")

# ===================== –§–û–†–ú–ê–¢–ò–†–û–í–ê–ù–ò–ï =====================
def format_balance(user: User) -> str:
    user.check_premium_status()
    
    daily_status = "‚úÖ –î–æ—Å—Ç—É–ø–µ–Ω" if user.can_claim_daily() else "‚ùå –£–∂–µ –ø–æ–ª—É—á–µ–Ω"
    premium_status = "–ê–∫—Ç–∏–≤–µ–Ω" if user.is_premium else "–ù–µ–∞–∫—Ç–∏–≤–µ–Ω"
    next_level_xp = (user.level ** 2) * 100
    
    text = (
        f"üí∞ <b>–í–ê–® –ë–ê–õ–ê–ù–°</b>\n"
        f"‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê\n"
        f"‚≠ê –ó–≤–µ–∑–¥—ã: {hbold(user.stars)}\n"
        f"üéÅ –ï–∂–µ–¥–Ω–µ–≤–Ω—ã–π –±–æ–Ω—É—Å: {daily_status}\n"
        f"üíé –ü—Ä–µ–º–∏—É–º: {premium_status}\n"
        f"üèÜ –£—Ä–æ–≤–µ–Ω—å: {user.level} (XP: {user.xp}/{next_level_xp})\n"
        f"‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê\n"
    )
    
    if user.is_premium and user.premium_expiry:
        days_left = max(0, int((user.premium_expiry - time.time()) / (24 * 3600)))
        text += f"üíé –ü—Ä–µ–º–∏—É–º –∞–∫—Ç–∏–≤–µ–Ω! –û—Å—Ç–∞–ª–æ—Å—å: {days_left} –¥–Ω–µ–π\n"
    elif user.is_premium:
        text += f"üíé –ü—Ä–µ–º–∏—É–º –∞–∫—Ç–∏–≤–µ–Ω (–ù–∞–≤—Å–µ–≥–¥–∞)\n"
    else:
        text += (
            f"‚ÑπÔ∏è –ü—Ä–µ–º–∏—É–º –¥–∞–µ—Ç –±–µ–∑–ª–∏–º–∏—Ç–Ω—É—é –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –∫–æ–Ω—Ç–µ–Ω—Ç–∞\n"
            f"‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê"
        )
        
    return text

def format_premium_info(user: User) -> str:
    if user.is_premium:
        status = "–û—Å—Ç–∞–ª–æ—Å—å: "
        if user.premium_expiry:
            days_left = max(0, int((user.premium_expiry - time.time()) / (24 * 3600)))
            status += f"{days_left} –¥–Ω–µ–π"
        else:
            status = "–ù–ê–í–°–ï–ì–î–ê"
        
        text = (
            f"üíé <b>–ü–†–ï–ú–ò–£–ú –ü–û–î–ü–ò–°–ö–ê –ê–ö–¢–ò–í–ù–ê!</b>\n"
            f"‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê\n"
            f"‚è≥ {status}\n\n"
            f"‚ú® <b>–ü—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞:</b>\n"
            f"‚Ä¢ üé® –ë–µ–∑–ª–∏–º–∏—Ç–Ω–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π\n"
            f"‚Ä¢ üë§ –ë–µ–∑–ª–∏–º–∏—Ç–Ω–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –∞–≤–∞—Ç–∞—Ä–æ–≤\n"
            f"‚Ä¢ üñºÔ∏è –ë–µ–∑–ª–∏–º–∏—Ç–Ω–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –ª–æ–≥–æ—Ç–∏–ø–æ–≤\n"
            f"‚Ä¢ üìù –ë–µ–∑–ª–∏–º–∏—Ç–Ω–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è —Ç–µ–∫—Å—Ç–∞\n"
            f"‚Ä¢ üìã –ë–µ–∑–ª–∏–º–∏—Ç–Ω–æ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ —à–∞–±–ª–æ–Ω–æ–≤\n"
            f"‚Ä¢ üß† –†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç\n"
            f"‚Ä¢ üñºÔ∏è –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –¥–æ 8 –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤\n"
            f"‚Ä¢ ü§ñ –≠–∫—Å–∫–ª—é–∑–∏–≤–Ω—ã–µ –º–æ–¥–µ–ª–∏ –ò–ò\n"
            f"‚Ä¢ üèÜ –≠–∫—Å–∫–ª—é–∑–∏–≤–Ω—ã–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è\n"
            f"‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê"
        )
    else:
        text = (
            f"üíé <b>–ü–†–ï–ú–ò–£–ú –ü–û–î–ü–ò–°–ö–ê</b>\n"
            f"‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê\n"
            f"‚ú® <b>–ü—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞:</b>\n"
            f"‚Ä¢ üé® –ë–µ–∑–ª–∏–º–∏—Ç–Ω–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π\n"
            f"‚Ä¢ üë§ –ë–µ–∑–ª–∏–º–∏—Ç–Ω–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –∞–≤–∞—Ç–∞—Ä–æ–≤\n"
            f"‚Ä¢ üñºÔ∏è –ë–µ–∑–ª–∏–º–∏—Ç–Ω–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –ª–æ–≥–æ—Ç–∏–ø–æ–≤\n"
            f"‚Ä¢ üìù –ë–µ–∑–ª–∏–º–∏—Ç–Ω–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è —Ç–µ–∫—Å—Ç–∞\n"
            f"‚Ä¢ üìã –ë–µ–∑–ª–∏–º–∏—Ç–Ω–æ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ —à–∞–±–ª–æ–Ω–æ–≤\n"
            f"‚Ä¢ üß† –†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç\n"
            f"‚Ä¢ üñºÔ∏è –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –¥–æ 8 –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤\n"
            f"‚Ä¢ ü§ñ –≠–∫—Å–∫–ª—é–∑–∏–≤–Ω—ã–µ –º–æ–¥–µ–ª–∏ –ò–ò\n"
            f"‚Ä¢ üèÜ –≠–∫—Å–∫–ª—é–∑–∏–≤–Ω—ã–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è\n\n"
            f"üí° <b>–î–ª—è –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –ø—Ä–µ–º–∏—É–º–∞ –ø—Ä–∏–æ–±—Ä–µ—Ç–∏—Ç–µ –ø–æ–¥–ø–∏—Å–∫—É –≤ –º–∞–≥–∞–∑–∏–Ω–µ</b>\n"
            f"‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê"
        )
    return text

def format_generation_cost(model: GenerationModel, base_cost: int, is_premium: bool) -> str:
    cost = int(base_cost * model.cost_multiplier)
    if is_premium:
        return "üíé –ë–µ–∑–ª–∏–º–∏—Ç (–ø—Ä–µ–º–∏—É–º)"
    return f"üíé –°—Ç–æ–∏–º–æ—Å—Ç—å: {cost} ‚≠ê"

def format_model_info(model: GenerationModel) -> str:
    return f"{model.name}\n{model.description}\nüí∞ –ú–Ω–æ–∂–∏—Ç–µ–ª—å —Å—Ç–æ–∏–º–æ—Å—Ç–∏: {model.cost_multiplier}x"

def format_admin_stats() -> str:
    total_users = bot_stats["total_users"]
    active_today = bot_stats["active_today"]
    premium_users = sum(1 for u in users_db.values() if u.is_premium)
    total_stars = sum(u.stars for u in users_db.values())
    new_users_today = sum(1 for u in users_db.values() 
                          if datetime.datetime.fromisoformat(u.join_date).date() == datetime.datetime.now().date())
    
    images = bot_stats["images_generated"]
    texts = bot_stats["texts_generated"]
    avatars = bot_stats["avatars_generated"]
    logos = bot_stats["logos_generated"]
    templates_used = bot_stats["templates_used"]
    
    stars_purchased = bot_stats["stars_purchased"]
    premium_purchased = bot_stats["premium_purchased"]
    achievements_unlocked = bot_stats["achievements_unlocked"]
    
    return (
        f"üìä <b>–°–¢–ê–¢–ò–°–¢–ò–ö–ê –ë–û–¢–ê</b>\n"
        f"‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê\n"
        f"üë• –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {total_users}\n"
        f"üë§ –ê–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞ —Å—É—Ç–∫–∏: {active_today}\n"
        f"üíé –ü—Ä–µ–º–∏—É–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {premium_users}\n"
        f"‚≠ê –ó–≤—ë–∑–¥ –≤ —Å–∏—Å—Ç–µ–º–µ: {total_stars}\n"
        f"üÜï –ù–æ–≤—ã—Ö —Å–µ–≥–æ–¥–Ω—è: {new_users_today}\n"
        f"üèÜ –î–æ—Å—Ç–∏–∂–µ–Ω–∏–π: {achievements_unlocked}\n\n"
        f"üîÑ <b>–ì–µ–Ω–µ—Ä–∞—Ü–∏–∏:</b>\n"
        f"üé® –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π: {images}\n"
        f"üìù –¢–µ–∫—Å—Ç–æ–≤: {texts}\n"
        f"üë§ –ê–≤–∞—Ç–∞—Ä–æ–≤: {avatars}\n"
        f"üñºÔ∏è –õ–æ–≥–æ—Ç–∏–ø–æ–≤: {logos}\n"
        f"üìã –®–∞–±–ª–æ–Ω–æ–≤: {templates_used}\n\n"
        f"üõí <b>–ü–æ–∫—É–ø–∫–∏:</b>\n"
        f"‚≠ê –ó–≤—ë–∑–¥ –∫—É–ø–ª–µ–Ω–æ: {stars_purchased}\n"
        f"üíé –ü—Ä–µ–º–∏—É–º –ø–æ–¥–ø–∏—Å–æ–∫: {premium_purchased}\n"
        f"‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê"
    )

def format_promo_code(promo_code: str, promo_data: dict) -> str:
    promo_type = promo_data["type"]
    value = promo_data["value"]
    created_by = promo_data["created_by"]
    created_at = datetime.datetime.fromisoformat(promo_data["created_at"]).strftime("%d.%m.%Y %H:%M")
    used_count = promo_data.get("used_count", 0)
    limit = promo_data.get("limit", "‚àû")
    active = "‚úÖ –ê–∫—Ç–∏–≤–µ–Ω" if promo_data.get("active", True) else "‚ùå –ù–µ–∞–∫—Ç–∏–≤–µ–Ω"
    
    text = (
        f"üé´ <b>–ü–†–û–ú–û–ö–û–î: {promo_code}</b>\n"
        f"‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê\n"
        f"üî¢ –¢–∏–ø: {promo_type}\n"
        f"üíé –ó–Ω–∞—á–µ–Ω–∏–µ: {value}\n"
        f"üë§ –°–æ–∑–¥–∞–ª: {created_by}\n"
        f"üìÖ –°–æ–∑–¥–∞–Ω: {created_at}\n"
        f"üîÑ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω: {used_count} —Ä–∞–∑\n"
        f"üéØ –õ–∏–º–∏—Ç: {limit}\n"
        f"üîî –°—Ç–∞—Ç—É—Å: {active}\n"
        f"‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê"
    )
    
    if "used_by" in promo_data and promo_data["used_by"]:
        text += "\nüë• –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–ª–∏:\n"
        for i, user in enumerate(promo_data["used_by"][:5]):
            text += f"{i+1}. {user['user_id']} ({user['date'][:10]})\n"
        if len(promo_data["used_by"]) > 5:
            text += f"... –∏ –µ—â–µ {len(promo_data['used_by']) - 5}\n"
    
    return text

def format_template(template: Template) -> str:
    return (
        f"üìã <b>{template.name}</b>\n"
        f"‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê\n"
        f"üìù –û–ø–∏—Å–∞–Ω–∏–µ: {template.description}\n"
        f"üè∑Ô∏è –ö–∞—Ç–µ–≥–æ—Ä–∏—è: {template.category}\n"
        f"üîÑ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ: {template.usage_count} —Ä–∞–∑\n\n"
        f"üîç –ü—Ä–∏–º–µ—Ä:\n{template.example}\n\n"
        f"üìå –ü—Ä–æ–º–ø—Ç:\n<code>{template.prompt}</code>\n"
        f"‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê"
    )

def format_achievement(achievement: Achievement, unlocked: bool = False, date: str = None) -> str:
    status = f"‚úÖ –†–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–æ: {date}" if unlocked else "üîí –ù–µ —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–æ"
    return (
        f"{achievement.icon} <b>{achievement.name}</b>\n"
        f"‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê\n"
        f"üìù {achievement.description}\n\n"
        f"üéØ –£—Å–ª–æ–≤–∏–µ: {achievement.condition}\n"
        f"üéÅ –ù–∞–≥—Ä–∞–¥–∞: {achievement.reward} ‚≠ê\n\n"
        f"{status}\n"
        f"‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê"
    )

def format_user_info(user: User) -> str:
    premium_status = "üíé –ü—Ä–µ–º–∏—É–º (–Ω–∞–≤—Å–µ–≥–¥–∞)" if user.is_premium and not user.premium_expiry else (
        f"üíé –ü—Ä–µ–º–∏—É–º (–æ—Å—Ç–∞–ª–æ—Å—å {int((user.premium_expiry - time.time()) / 86400)} –¥–Ω–µ–π)" if user.is_premium else "‚ùå –ë–µ–∑ –ø—Ä–µ–º–∏—É–º–∞"
    )
    
    return (
        f"üë§ <b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ID: {user.user_id}</b>\n"
        f"‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê\n"
        f"‚≠ê –ó–≤—ë–∑–¥: {user.stars}\n"
        f"üíé –°—Ç–∞—Ç—É—Å: {premium_status}\n"
        f"üèÜ –£—Ä–æ–≤–µ–Ω—å: {user.level} (XP: {user.xp})\n"
        f"üé® –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π: {user.images_generated}\n"
        f"üìù –¢–µ–∫—Å—Ç–æ–≤: {user.texts_generated}\n"
        f"üìã –®–∞–±–ª–æ–Ω–æ–≤: {user.templates_used}\n"
        f"üìÖ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è: {datetime.datetime.fromisoformat(user.join_date).strftime('%d.%m.%Y')}\n"
        f"‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê"
    )

# ===================== –û–ë–†–ê–ë–û–¢–ö–ê –ú–ï–ù–Æ =====================
async def handle_text_gen(callback: CallbackQuery, user: User):
    model = TEXT_MODELS[user.text_model]
    base_cost = int(TEXT_COST_PER_100_WORDS * model.cost_multiplier)
    cost_text = format_generation_cost(model, TEXT_COST_PER_100_WORDS, user.is_premium)
    
    await safe_edit_message(
        callback, 
        "üìù <b>–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ç–µ–∫—Å—Ç–∞</b>\n"
        "‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê\n"
        f"ü§ñ –ú–æ–¥–µ–ª—å: {model.name}\n\n"
        "üîç <b>–û—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∞—à –∑–∞–ø—Ä–æ—Å:</b>\n"
        f"{cost_text}\n"
        f"‚ö†Ô∏è –ú–∞–∫—Å–∏–º—É–º {MAX_PROMPT_LENGTH} —Å–∏–º–≤–æ–ª–æ–≤\n"
        f"‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê",
        reply_markup=cancel_keyboard()
    )

async def show_menu(callback: CallbackQuery, user: User):
    user.update_interaction()
    logger.info(f"Showing menu for state: {user.state}")
    
    menu_handlers = {
        UserState.MAIN_MENU: handle_main_menu,
        UserState.GENERATE_MENU: handle_generate_menu,
        UserState.PROFILE_MENU: handle_profile_menu,
        UserState.IMAGE_GEN: handle_image_gen,
        UserState.TEXT_GEN: handle_text_gen,
        UserState.AVATAR_GEN: handle_avatar_gen,
        UserState.LOGO_GEN: handle_logo_gen,
        UserState.TEMPLATE_GEN: handle_template_gen,
        UserState.PREMIUM_INFO: handle_premium_info,
        UserState.SHOP: handle_shop,
        UserState.SUPPORT: handle_support,
        UserState.REFERRAL: handle_referral,
        UserState.ACTIVATE_PROMO: handle_activate_promo,
        UserState.BALANCE: handle_balance,
        UserState.IMAGE_COUNT_SELECT: handle_image_count_select,
        UserState.IMAGE_MODEL_SELECT: handle_image_model_select,
        UserState.MODEL_SELECT: handle_model_select,
        UserState.TEXT_MODEL_SELECT: handle_text_model_select,
        UserState.ADMIN_PANEL: handle_admin_panel,
        UserState.ADMIN_CREATE_PROMO: handle_admin_create_promo,
        UserState.ADMIN_STATS: handle_admin_stats,
        UserState.ADMIN_BROADCAST: handle_admin_broadcast,
        UserState.ADMIN_PROMO_LIST: handle_admin_promo_list,
        UserState.ADMIN_USER_MANAGEMENT: handle_admin_user_management,
        UserState.ADMIN_TEMPLATE_MANAGEMENT: handle_admin_template_management,
        UserState.ADMIN_VIEW_USER: handle_admin_view_user,
        UserState.TEMPLATE_SELECT: handle_template_select,
        UserState.FEEDBACK: handle_feedback,
        UserState.ACHIEVEMENTS_LIST: handle_achievements_list  # –î–æ–±–∞–≤–ª–µ–Ω –æ–±—Ä–∞–±–æ—Ç—á–∏–∫
    }
    
    handler = menu_handlers.get(user.state)
    if handler:
        logger.info(f"Calling handler for state {user.state}")
        await handler(callback, user)
    else:
        logger.warning(f"No handler for state {user.state}")
        await callback.message.answer("üè† <b>–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é</b>\n‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê", reply_markup=main_keyboard(user))

async def handle_main_menu(callback: CallbackQuery, user: User):
    await safe_edit_message(
        callback,
        "üåü <b>–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é</b>\n"
        "‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=main_keyboard(user)
    )

async def handle_generate_menu(callback: CallbackQuery, user: User):
    await safe_edit_message(
        callback,
        "üöÄ <b>–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–æ–Ω—Ç–µ–Ω—Ç–∞</b>\n"
        "‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø:",
        reply_markup=generate_menu_keyboard()
    )

async def handle_profile_menu(callback: CallbackQuery, user: User):
    await safe_edit_message(
        callback,
        "üë§ <b>–í–∞—à –ø—Ä–æ—Ñ–∏–ª—å</b>\n"
        "‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=profile_menu_keyboard()
    )

async def handle_image_gen(callback: CallbackQuery, user: User):
    model = IMAGE_MODELS[user.image_model]
    base_cost = int(IMAGE_COST * model.cost_multiplier)
    cost_text = format_generation_cost(model, IMAGE_COST, user.is_premium)
    
    await safe_edit_message(
        callback, 
        "üé® <b>–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è</b>\n"
        "‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê\n"
        f"ü§ñ –ú–æ–¥–µ–ª—å: {model.name}\n\n"
        "üîç <b>–û—Ç–ø—Ä–∞–≤—å—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è:</b>\n"
        "–ü—Ä–∏–º–µ—Ä—ã:\n"
        "‚Ä¢ –ö–æ—Å–º–∏—á–µ—Å–∫–∏–π –∫–æ—Ä–∞–±–ª—å –≤ —Å—Ç–∏–ª–µ –∫–∏–±–µ—Ä–ø–∞–Ω–∫\n"
        "‚Ä¢ –†–µ–∞–ª–∏—Å—Ç–∏—á–Ω—ã–π –ø–æ—Ä—Ç—Ä–µ—Ç –∫–æ—Ç–∞\n\n"
        f"{cost_text}\n"
        f"‚ö†Ô∏è –ú–∞–∫—Å–∏–º—É–º {MAX_PROMPT_LENGTH} —Å–∏–º–≤–æ–ª–æ–≤\n"
        f"‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê",
        reply_markup=cancel_keyboard()
    )

async def handle_image_count_select(callback: CallbackQuery, user: User):
    await safe_edit_message(
        callback,
        "üé® <b>–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è (–ø—Ä–µ–º–∏—É–º)</b>\n"
        "‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê\n"
        f"ü§ñ –ú–æ–¥–µ–ª—å: {IMAGE_MODELS[user.image_model].name}\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤:",
        reply_markup=image_count_keyboard()
    )

# –î–æ–±–∞–≤–ª–µ–Ω–Ω—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –∞–≤–∞—Ç–∞—Ä–æ–≤ –∏ –ª–æ–≥–æ—Ç–∏–ø–æ–≤
async def handle_avatar_gen(callback: CallbackQuery, user: User):
    model = IMAGE_MODELS[user.image_model]
    base_cost = int(AVATAR_COST * model.cost_multiplier)
    cost_text = format_generation_cost(model, AVATAR_COST, user.is_premium)
    
    await safe_edit_message(
        callback, 
        "üë§ <b>–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∞–≤–∞—Ç–∞—Ä–∞</b>\n"
        "‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê\n"
        f"ü§ñ –ú–æ–¥–µ–ª—å: {model.name}\n\n"
        "üîç <b>–û—Ç–ø—Ä–∞–≤—å—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∞–≤–∞—Ç–∞—Ä–∞:</b>\n"
        "–ü—Ä–∏–º–µ—Ä—ã:\n"
        "‚Ä¢ –î–µ–≤—É—à–∫–∞ —Å —Ä–æ–∑–æ–≤—ã–º–∏ –≤–æ–ª–æ—Å–∞–º–∏\n"
        "‚Ä¢ –ú—É–∂—á–∏–Ω–∞ –≤ —Å—Ç–∏–ª–µ —Å–∞–º—É—Ä–∞—è\n\n"
        f"{cost_text}\n"
        f"‚ö†Ô∏è –ú–∞–∫—Å–∏–º—É–º {MAX_PROMPT_LENGTH} —Å–∏–º–≤–æ–ª–æ–≤\n"
        f"‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê",
        reply_markup=cancel_keyboard()
    )

async def handle_logo_gen(callback: CallbackQuery, user: User):
    model = IMAGE_MODELS[user.image_model]
    base_cost = int(LOGO_COST * model.cost_multiplier)
    cost_text = format_generation_cost(model, LOGO_COST, user.is_premium)
    
    await safe_edit_message(
        callback, 
        "üñºÔ∏è <b>–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ª–æ–≥–æ—Ç–∏–ø–∞</b>\n"
        "‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê\n"
        f"ü§ñ –ú–æ–¥–µ–ª—å: {model.name}\n\n"
        "üîç <b>–û—Ç–ø—Ä–∞–≤—å—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –ª–æ–≥–æ—Ç–∏–ø–∞:</b>\n"
        "–ü—Ä–∏–º–µ—Ä—ã:\n"
        "‚Ä¢ –õ–æ–≥–æ –¥–ª—è IT –∫–æ–º–ø–∞–Ω–∏–∏\n"
        "‚Ä¢ –ó–Ω–∞—á–æ–∫ –¥–ª—è –∫–∞—Ñ–µ\n\n"
        f"{cost_text}\n"
        f"‚ö†Ô∏è –ú–∞–∫—Å–∏–º—É–º {MAX_PROMPT_LENGTH} —Å–∏–º–≤–æ–ª–æ–≤\n"
        f"‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê",
        reply_markup=cancel_keyboard()
    )

async def handle_template_gen(callback: CallbackQuery, user: User):
    # –†–µ–∞–ª–∏–∑–∞—Ü–∏—è –∞–Ω–∞–ª–æ–≥–∏—á–Ω–∞ handle_image_gen
    await safe_edit_message(
        callback,
        "üìã <b>–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø–æ —à–∞–±–ª–æ–Ω—É</b>\n"
        "‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ —à–∞–±–ª–æ–Ω:",
        reply_markup=user_template_list_keyboard()
    )

async def handle_premium_info(callback: CallbackQuery, user: User):
    text = format_premium_info(user)
    reply_markup = premium_keyboard() if not user.is_premium else home_keyboard()
    await safe_edit_message(callback, text, reply_markup=reply_markup)

async def handle_shop(callback: CallbackQuery, user: User):
    text = f"üõí <b>–ú–ê–ì–ê–ó–ò–ù</b>\n‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê\n{format_balance(user)}\n‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê\n–í—ã–±–µ—Ä–∏—Ç–µ —Ç–æ–≤–∞—Ä:"
    await safe_edit_message(callback, text, reply_markup=shop_keyboard())

async def handle_support(callback: CallbackQuery, user: User):
    await safe_edit_message(
        callback,
        "üÜò <b>–ü–û–î–î–ï–†–ñ–ö–ê</b>\n‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê\n"
        f"‚Ä¢ –ü–æ –≤–æ–ø—Ä–æ—Å–∞–º: {PAYMENT_ADMIN}\n"
        "‚Ä¢ –ü–æ –æ–ø–ª–∞—Ç–µ: @telichko_a\n"
        "‚Ä¢ –ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è: @telichko_a\n\n"
        "–ú—ã –æ—Ç–≤–µ—á–∞–µ–º –≤ —Ç–µ—á–µ–Ω–∏–µ 24 —á–∞—Å–æ–≤.\n"
        "‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê",
        reply_markup=home_keyboard()
    )

async def handle_referral(callback: CallbackQuery, user: User):
    referral_link = f"https://t.me/NeuroAlliance_bot?start={user.referral_code}"
    await safe_edit_message(
        callback,
        f"üë• <b>–†–ï–§–ï–†–ê–õ–¨–ù–ê–Ø –°–ò–°–¢–ï–ú–ê</b>\n‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê\n"
        f"üîó –í–∞—à–∞ —Å—Å—ã–ª–∫–∞:\n{hcode(referral_link)}\n"
        f"üíé –ó–∞ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–Ω–æ–≥–æ:\n"
        f"‚Ä¢ –í—ã –ø–æ–ª—É—á–∞–µ—Ç–µ: {REFERRAL_BONUS} ‚≠ê\n"
        f"‚Ä¢ –î—Ä—É–≥ –ø–æ–ª—É—á–∞–µ—Ç: {START_BALANCE_STARS//2} ‚≠ê\n\n"
        f"üí∞ –†–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–π –±–∞–ª–∞–Ω—Å: {hbold(user.referral_balance)} üíé\n"
        f"‚ö†Ô∏è –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –≤—ã–≤–æ–¥: {WITHDRAW_MIN} üíé\n"
        f"‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê",
        reply_markup=referral_keyboard()
    )

async def handle_activate_promo(callback: CallbackQuery, user: User):
    await safe_edit_message(
        callback,
        "üéÅ <b>–ê–ö–¢–ò–í–ê–¶–ò–Ø –ü–†–û–ú–û–ö–û–î–ê</b>\n‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê\n"
        "üîë –í–≤–µ–¥–∏—Ç–µ –ø—Ä–æ–º–æ–∫–æ–¥:",
        reply_markup=cancel_keyboard()
    )

async def handle_balance(callback: CallbackQuery, user: User):
    text = format_balance(user)
    await safe_edit_message(callback, text, reply_markup=balance_keyboard())

async def handle_image_model_select(callback: CallbackQuery, user: User):
    text = "ü§ñ <b>–í—ã–±–µ—Ä–∏—Ç–µ –º–æ–¥–µ–ª—å –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π</b>\n‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê\n"
    
    # –°–æ–∑–¥–∞–µ–º —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –º–æ–¥–µ–ª–µ–π
    model_list = []
    for key, model in IMAGE_MODELS.items():
        selected = " ‚úÖ" if user.image_model == key else ""
        model_list.append(f"{model.name}{selected}")
    
    text += "\n".join(model_list)
    await safe_edit_message(callback, text, reply_markup=image_models_keyboard(user))

async def handle_model_select(callback: CallbackQuery, user: User):
    current_image_model = IMAGE_MODELS[user.image_model].name
    current_text_model = TEXT_MODELS[user.text_model].name
    
    text = (
        "ü§ñ <b>–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –º–æ–¥–µ–ª–∏</b>\n"
        "‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê\n"
        f"üñºÔ∏è –¢–µ–∫—É—â–∞—è –º–æ–¥–µ–ª—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π: {current_image_model}\n"
        f"üìù –¢–µ–∫—É—â–∞—è —Ç–µ–∫—Å—Ç–æ–≤–∞—è –º–æ–¥–µ–ª—å: {current_text_model}\n"
        "‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê"
    )
    
    await safe_edit_message(callback, text, reply_markup=model_select_keyboard())

async def handle_text_model_select(callback: CallbackQuery, user: User):
    text = "ü§ñ <b>–í—ã–±–µ—Ä–∏—Ç–µ –º–æ–¥–µ–ª—å –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ç–µ–∫—Å—Ç–∞</b>\n‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê\n"
    
    # –°–æ–∑–¥–∞–µ–º —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –º–æ–¥–µ–ª–µ–π —Å —É—á–µ—Ç–æ–º –ø—Ä–µ–º–∏—É–º —Å—Ç–∞—Ç—É—Å–∞
    model_list = []
    for key, model in TEXT_MODELS.items():
        if model.premium_only and not user.is_premium:
            continue
            
        selected = " ‚úÖ" if user.text_model == key else ""
        model_list.append(f"{model.name}{selected}")
    
    text += "\n".join(model_list)
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–µ–º–∏—É–º –º–æ–¥–µ–ª—è—Ö
    if any(model.premium_only for model in TEXT_MODELS.values()):
        text += "\n\nüîí –ü—Ä–µ–º–∏—É–º-–º–æ–¥–µ–ª–∏ –¥–æ—Å—Ç—É–ø–Ω—ã —Ç–æ–ª—å–∫–æ —Å –ø–æ–¥–ø–∏—Å–∫–æ–π"
    
    await safe_edit_message(callback, text, reply_markup=text_models_keyboard(user))

async def handle_admin_panel(callback: CallbackQuery, user: User):
    await safe_edit_message(
        callback,
        "üëë <b>–ê–î–ú–ò–ù-–ü–ê–ù–ï–õ–¨</b>\n"
        "‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=admin_keyboard()
    )

async def handle_admin_create_promo(callback: CallbackQuery, user: User):
    await safe_edit_message(
        callback,
        "üé´ <b>–°–û–ó–î–ê–ù–ò–ï –ü–†–û–ú–û–ö–û–î–ê</b>\n"
        "‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê\n"
        "–í–≤–µ–¥–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ –ø—Ä–æ–º–æ–∫–æ–¥–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n"
        "<code>—Ç–∏–ø:–∑–Ω–∞—á–µ–Ω–∏–µ:–ª–∏–º–∏—Ç</code>\n\n"
        "–î–æ—Å—Ç—É–ø–Ω—ã–µ —Ç–∏–ø—ã:\n"
        "‚Ä¢ <code>stars</code> - –∑–≤—ë–∑–¥—ã (–Ω–∞–ø—Ä–∏–º–µ—Ä: stars:100:10)\n"
        "‚Ä¢ <code>premium</code> - –ø—Ä–µ–º–∏—É–º (–Ω–∞–ø—Ä–∏–º–µ—Ä: premium:30:5)\n\n"
        "–î–ª—è –≤–µ—á–Ω–æ–≥–æ –ø—Ä–µ–º–∏—É–º–∞: <code>premium:forever:0</code>\n"
        "–õ–∏–º–∏—Ç: 0 = –±–µ–∑–ª–∏–º–∏—Ç–Ω–æ",
        reply_markup=admin_cancel_keyboard()
    )

async def handle_admin_stats(callback: CallbackQuery, user: User):
    # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    bot_stats["active_today"] = sum(
        1 for u in users_db.values() 
        if time.time() - u.last_interaction < 86400
    )
    
    stats = format_admin_stats()
    await safe_edit_message(callback, stats, reply_markup=admin_keyboard())

async def handle_admin_broadcast(callback: CallbackQuery, user: User):
    await safe_edit_message(
        callback,
        "üì£ <b>–†–ê–°–°–´–õ–ö–ê –°–û–û–ë–©–ï–ù–ò–ô</b>\n"
        "‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê\n"
        "–í–≤–µ–¥–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏:",
        reply_markup=admin_cancel_keyboard()
    )

async def handle_admin_promo_list(callback: CallbackQuery, user: User):
    if not promo_codes:
        await safe_edit_message(
            callback,
            "üé´ <b>–°–ü–ò–°–û–ö –ü–†–û–ú–û–ö–û–î–û–í</b>\n"
            "‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê\n"
            "‚ùå –ü—Ä–æ–º–æ–∫–æ–¥—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã",
            reply_markup=admin_keyboard()
        )
        return
        
    await safe_edit_message(
        callback,
        "üé´ <b>–°–ü–ò–°–û–ö –ü–†–û–ú–û–ö–û–î–û–í</b>\n"
        "‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê\n"
        f"–ù–∞–π–¥–µ–Ω–æ –ø—Ä–æ–º–æ–∫–æ–¥–æ–≤: {len(promo_codes)}\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–æ–º–æ–∫–æ–¥ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞:",
        reply_markup=admin_promo_list_keyboard()
    )

async def handle_admin_promo_detail(callback: CallbackQuery, user: User, promo_code: str):
    promo_data = promo_codes.get(promo_code)
    if not promo_data:
        await callback.answer("‚ùå –ü—Ä–æ–º–æ–∫–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
        return
        
    text = format_promo_code(promo_code, promo_data)
    
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(
            text="‚úÖ –ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å" if promo_data.get("active", True) else "‚ùå –î–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å", 
            callback_data=f"promo_toggle_{promo_code}"
        )],
        [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="admin_promo_list")]
    ])
    
    await safe_edit_message(callback, text, reply_markup=keyboard)

async def handle_admin_user_management(callback: CallbackQuery, user: User):
    await safe_edit_message(
        callback,
        "üë§ <b>–£–ü–†–ê–í–õ–ï–ù–ò–ï –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø–ú–ò</b>\n"
        "‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=admin_user_management_keyboard()
    )

async def handle_admin_template_management(callback: CallbackQuery, user: User):
    await safe_edit_message(
        callback,
        "üìã <b>–£–ü–†–ê–í–õ–ï–ù–ò–ï –®–ê–ë–õ–û–ù–ê–ú–ò</b>\n"
        "‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=admin_template_management_keyboard()
    )

async def handle_admin_view_user(callback: CallbackQuery, user: User, user_id: int):
    if user_id not in users_db:
        await callback.answer("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
        return
        
    target_user = users_db[user_id]
    text = format_user_info(target_user)
    await safe_edit_message(
        callback,
        text,
        reply_markup=admin_user_options_keyboard(user_id)
    )

async def handle_template_select(callback: CallbackQuery, user: User):
    if not templates:
        await callback.answer("‚ùå –®–∞–±–ª–æ–Ω—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã", show_alert=True)
        return
        
    await safe_edit_message(
        callback,
        "üìã <b>–í–´–ë–û–† –®–ê–ë–õ–û–ù–ê</b>\n"
        "‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ —à–∞–±–ª–æ–Ω –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫–æ–Ω—Ç–µ–Ω—Ç–∞:",
        reply_markup=user_template_list_keyboard()
    )

async def handle_feedback(callback: CallbackQuery, user: User):
    # –†–µ–∞–ª–∏–∑–∞—Ü–∏—è –±—É–¥–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–∞ –ø–æ–∑–∂–µ
    pass

async def handle_achievements_list(callback: CallbackQuery, user: User):
    text = "üèÜ <b>–í–ê–®–ò –î–û–°–¢–ò–ñ–ï–ù–ò–Ø</b>\n‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê\n"
    unlocked_count = len(user.achievements)
    total_count = len(achievements)
    text += f"üîì –†–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–æ: {unlocked_count}/{total_count}\n\n"
    
    await safe_edit_message(
        callback,
        text,
        reply_markup=achievements_list_keyboard(user)
    )

# ===================== –û–ë–†–ê–ë–û–¢–ö–ê –ö–û–ú–ê–ù–î =====================
@dp.callback_query(F.data == "back")
async def back_handler(callback: CallbackQuery):
    user = await get_user(callback.from_user.id)
    if not await ensure_subscription(callback, user):
        return
    
    prev_menu = user.pop_menu()
    
    if prev_menu:
        user.state = prev_menu["state"]
        await show_menu(callback, user)
    else:
        user.state = UserState.MAIN_MENU
        await show_menu(callback, user)
    
    await callback.answer()

@dp.callback_query(F.data == "home")
async def home_handler(callback: CallbackQuery):
    user = await get_user(callback.from_user.id)
    if not await ensure_subscription(callback, user):
        return
    
    user.state = UserState.MAIN_MENU
    user.menu_stack = []
    await show_menu(callback, user)
    await callback.answer()

@dp.callback_query(F.data == "cancel")
async def cancel_handler(callback: CallbackQuery):
    user = await get_user(callback.from_user.id)
    if not await ensure_subscription(callback, user):
        return
    
    user.state = UserState.MAIN_MENU
    user.menu_stack = []
    await callback.message.answer("‚ùå –î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ", reply_markup=main_keyboard(user))
    await callback.answer()

@dp.callback_query(F.data == "admin_cancel")
async def admin_cancel_handler(callback: CallbackQuery):
    user = await get_user(callback.from_user.id)
    if not await ensure_subscription(callback, user):
        return
    
    user.state = UserState.ADMIN_PANEL
    await show_menu(callback, user)
    await callback.answer()

@dp.callback_query(F.data == "check_subscription")
async def check_subscription_handler(callback: CallbackQuery):
    user = await get_user(callback.from_user.id)
    
    if await check_subscription(user.user_id):
        user.has_subscribed = True
        user.mark_modified()
        
        if user.pending_referral and not user.referral_used:
            await process_referral(user, user.pending_referral)
            user.pending_referral = None
            user.referral_used = True
        
        await callback.message.delete()
        await bot.send_message(
            user.user_id,
            "‚úÖ –ü–æ–¥–ø–∏—Å–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞!",
            reply_markup=main_keyboard(user)
        )
    else:
        await callback.answer("‚ùå –í—ã –≤—Å–µ –µ—â–µ –Ω–µ –ø–æ–¥–ø–∏—Å–∞–Ω—ã! –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–ø–∏—à–∏—Ç–µ—Å—å.", show_alert=True)
    
    await callback.answer()

@dp.callback_query(F.data == "daily_bonus")
async def daily_bonus_handler(callback: CallbackQuery):
    user = await get_user(callback.from_user.id)
    if not await ensure_subscription(callback, user):
        return
    
    if user.can_claim_daily():
        bonus = user.claim_daily_bonus()
        await callback.answer(f"üéÅ –ü–æ–ª—É—á–µ–Ω–æ {bonus} –∑–≤—ë–∑–¥!", show_alert=True)
        text = format_balance(user)
        await safe_edit_message(callback, text, reply_markup=balance_keyboard())
        await save_db()
    else:
        last_date = datetime.datetime.fromtimestamp(user.last_daily_bonus).strftime("%d.%m.%Y")
        await callback.answer(f"‚ùå –í—ã —É–∂–µ –ø–æ–ª—É—á–∞–ª–∏ –±–æ–Ω—É—Å —Å–µ–≥–æ–¥–Ω—è ({last_date})", show_alert=True)

@dp.callback_query(F.data == "generate_menu")
async def process_generate_menu(callback: CallbackQuery):
    user = await get_user(callback.from_user.id)
    if not await ensure_subscription(callback, user):
        return
    
    user.push_menu(user.state, {})
    user.state = UserState.GENERATE_MENU
    user.mark_modified()
    await show_menu(callback, user)
    await callback.answer()

@dp.callback_query(F.data == "profile_menu")
async def process_profile_menu(callback: CallbackQuery):
    user = await get_user(callback.from_user.id)
    if not await ensure_subscription(callback, user):
        return
    
    user.push_menu(user.state, {})
    user.state = UserState.PROFILE_MENU
    user.mark_modified()
    await show_menu(callback, user)
    await callback.answer()

@dp.callback_query(F.data == "premium_info")
async def premium_info(callback: CallbackQuery):
    user = await get_user(callback.from_user.id)
    if not await ensure_subscription(callback, user):
        return
    
    user.push_menu(user.state, {})
    user.state = UserState.PREMIUM_INFO
    user.mark_modified()
    await show_menu(callback, user)
    await callback.answer()

@dp.callback_query(F.data == "gen_image")
async def process_gen_image(callback: CallbackQuery):
    user = await get_user(callback.from_user.id)
    if not await ensure_subscription(callback, user):
        return
    
    user.push_menu(user.state, {})
    if user.is_premium:
        user.state = UserState.IMAGE_COUNT_SELECT
    else:
        user.state = UserState.IMAGE_GEN
    user.mark_modified()
    await show_menu(callback, user)
    await callback.answer()

@dp.callback_query(F.data == "gen_avatar")
async def process_gen_avatar(callback: CallbackQuery):
    user = await get_user(callback.from_user.id)
    if not await ensure_subscription(callback, user):
        return
    
    user.push_menu(user.state, {})
    user.state = UserState.AVATAR_GEN
    user.mark_modified()
    await show_menu(callback, user)
    await callback.answer()

@dp.callback_query(F.data == "gen_logo")
async def process_gen_logo(callback: CallbackQuery):
    user = await get_user(callback.from_user.id)
    if not await ensure_subscription(callback, user):
        return
    
    user.push_menu(user.state, {})
    user.state = UserState.LOGO_GEN
    user.mark_modified()
    await show_menu(callback, user)
    await callback.answer()

@dp.callback_query(F.data == "gen_text")
async def process_gen_text(callback: CallbackQuery):
    user = await get_user(callback.from_user.id)
    if not await ensure_subscription(callback, user):
        return
    
    user.push_menu(user.state, {})
    user.state = UserState.TEXT_GEN
    user.mark_modified()
    
    model = TEXT_MODELS[user.text_model]
    base_cost = int(TEXT_COST_PER_100_WORDS * model.cost_multiplier)
    cost_text = format_generation_cost(model, TEXT_COST_PER_100_WORDS, user.is_premium)
    
    await safe_edit_message(
        callback, 
        "üìù <b>–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ç–µ–∫—Å—Ç–∞</b>\n"
        "‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê\n"
        f"ü§ñ –ú–æ–¥–µ–ª—å: {model.name}\n\n"
        "üîç <b>–û—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∞—à –∑–∞–ø—Ä–æ—Å:</b>\n"
        f"{cost_text}\n"
        f"‚ö†Ô∏è –ú–∞–∫—Å–∏–º—É–º {MAX_PROMPT_LENGTH} —Å–∏–º–≤–æ–ª–æ–≤\n"
        f"‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê",
        reply_markup=cancel_keyboard()
    )
    await callback.answer()

@dp.callback_query(F.data == "model_select")
async def process_model_select(callback: CallbackQuery):
    user = await get_user(callback.from_user.id)
    if not await ensure_subscription(callback, user):
        return
    
    logger.info(f"User {user.user_id} requested model selection")
    
    user.push_menu(user.state, {})
    user.state = UserState.MODEL_SELECT
    user.mark_modified()
    await show_menu(callback, user)
    await callback.answer()

@dp.callback_query(F.data == "image_model_select")
async def process_image_model_select(callback: CallbackQuery):
    user = await get_user(callback.from_user.id)
    if not await ensure_subscription(callback, user):
        return
    
    logger.info(f"User {user.user_id} selecting image model")
    
    user.push_menu(user.state, {})
    user.state = UserState.IMAGE_MODEL_SELECT
    user.mark_modified()
    await show_menu(callback, user)
    await callback.answer()

@dp.callback_query(F.data == "text_model_select")
async def process_text_model_select(callback: CallbackQuery):
    user = await get_user(callback.from_user.id)
    if not await ensure_subscription(callback, user):
        return
    
    logger.info(f"User {user.user_id} selecting text model")
    
    user.push_menu(user.state, {})
    user.state = UserState.TEXT_MODEL_SELECT
    user.mark_modified()
    await show_menu(callback, user)
    await callback.answer()

@dp.callback_query(F.data.startswith("image_model_"))
async def set_image_model(callback: CallbackQuery):
    user = await get_user(callback.from_user.id)
    if not await ensure_subscription(callback, user):
        return
    
    model_key = callback.data.split('_')[2]
    if model_key in IMAGE_MODELS:
        user.image_model = model_key
        user.mark_modified()
        model_name = IMAGE_MODELS[model_key].name
        await callback.answer(f"‚úÖ –í—ã–±—Ä–∞–Ω–∞ –º–æ–¥–µ–ª—å: {model_name}")
        
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –º–µ–Ω—é –≤—ã–±–æ—Ä–∞ –º–æ–¥–µ–ª–µ–π
        user.state = UserState.MODEL_SELECT
        user.mark_modified()
        await show_menu(callback, user)
    else:
        await callback.answer("‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –º–æ–¥–µ–ª—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π")
        logger.error(f"Unknown image model: {model_key}")

@dp.callback_query(F.data.startswith("text_model_"))
async def set_text_model(callback: CallbackQuery):
    user = await get_user(callback.from_user.id)
    if not await ensure_subscription(callback, user):
        return
    
    model_key = callback.data.split('_')[2]
    model = TEXT_MODELS.get(model_key)
    
    if not model:
        await callback.answer("‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è —Ç–µ–∫—Å—Ç–æ–≤–∞—è –º–æ–¥–µ–ª—å")
        logger.error(f"Unknown text model: {model_key}")
        return
    
    if model.premium_only and not user.is_premium:
        await callback.answer("‚ùå –¢–æ–ª—å–∫–æ –¥–ª—è –ø—Ä–µ–º–∏—É–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π!", show_alert=True)
        return
    
    user.text_model = model_key
    user.mark_modified()
    await callback.answer(f"‚úÖ –í—ã–±—Ä–∞–Ω–∞ –º–æ–¥–µ–ª—å: {model.name}")
    
    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –º–µ–Ω—é –≤—ã–±–æ—Ä–∞ –º–æ–¥–µ–ª–µ–π
    user.state = UserState.MODEL_SELECT
    user.mark_modified()
    await show_menu(callback, user)

@dp.callback_query(F.data == "premium_required")
async def premium_required_handler(callback: CallbackQuery):
    user = await get_user(callback.from_user.id)
    text = (
        "üîí <b>–ü—Ä–µ–º–∏—É–º-–º–æ–¥–µ–ª—å</b>\n"
        "‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê\n"
        "–≠—Ç–∞ –º–æ–¥–µ–ª—å –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –ø—Ä–µ–º–∏—É–º-–ø–æ–¥–ø–∏—Å–∫–æ–π.\n\n"
        "üíé –ü—Ä–µ–º–∏—É–º-–ø–æ–¥–ø–∏—Å–∫–∞ –¥–∞–µ—Ç –¥–æ—Å—Ç—É–ø:\n"
        "- –ö —ç–∫—Å–∫–ª—é–∑–∏–≤–Ω—ã–º –º–æ—â–Ω—ã–º –º–æ–¥–µ–ª—è–º\n"
        "- –ë–µ–∑–ª–∏–º–∏—Ç–Ω–æ–π –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫–æ–Ω—Ç–µ–Ω—Ç–∞\n"
        "- –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–æ–≤\n\n"
        "–û—Ñ–æ—Ä–º–∏—Ç—å –ø—Ä–µ–º–∏—É–º –º–æ–∂–Ω–æ –≤ –º–∞–≥–∞–∑–∏–Ω–µ."
    )
    
    await callback.answer("‚ùå –¢—Ä–µ–±—É–µ—Ç—Å—è –ø—Ä–µ–º–∏—É–º-–ø–æ–¥–ø–∏—Å–∫–∞", show_alert=True)
    await safe_edit_message(callback, text, reply_markup=premium_keyboard())

@dp.callback_query(F.data.startswith("img_count_"))
async def process_image_count(callback: CallbackQuery):
    user = await get_user(callback.from_user.id)
    if not await ensure_subscription(callback, user):
        return
    
    count = int(callback.data.split('_')[2])
    user.image_count = count
    user.mark_modified()
    user.push_menu(user.state, {})
    user.state = UserState.IMAGE_GEN
    user.mark_modified()
    await show_menu(callback, user)
    await callback.answer()

@dp.callback_query(F.data == "balance_info")
async def show_balance(callback: CallbackQuery):
    user = await get_user(callback.from_user.id)
    if not await ensure_subscription(callback, user):
        return
    
    user.push_menu(user.state, {})
    user.state = UserState.BALANCE
    user.mark_modified()
    await show_menu(callback, user)
    await callback.answer()

@dp.callback_query(F.data == "refresh_balance")
async def refresh_balance(callback: CallbackQuery):
    await show_balance(callback)

@dp.callback_query(F.data == "shop")
async def shop(callback: CallbackQuery):
    user = await get_user(callback.from_user.id)
    user.push_menu(user.state, {})
    user.state = UserState.SHOP
    user.mark_modified()
    await show_menu(callback, user)
    await callback.answer()

@dp.callback_query(F.data == "referral_info")
async def referral_info(callback: CallbackQuery):
    user = await get_user(callback.from_user.id)
    if not await ensure_subscription(callback, user):
        return
    
    user.push_menu(user.state, {})
    user.state = UserState.REFERRAL
    user.mark_modified()
    await show_menu(callback, user)
    await callback.answer()

@dp.callback_query(F.data == "withdraw_referral")
async def withdraw_referral(callback: CallbackQuery):
    user = await get_user(callback.from_user.id)
    if not await ensure_subscription(callback, user):
        return
    
    amount = user.referral_balance
    if amount < WITHDRAW_MIN:
        await callback.answer(
            f"‚ùå –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞: {WITHDRAW_MIN} üíé\n"
            f"–í–∞—à –±–∞–ª–∞–Ω—Å: {amount} üíé",
            show_alert=True
        )
        return
    
    user.stars += amount
    user.referral_balance = 0
    user.mark_modified()
    
    await callback.answer(f"‚úÖ {amount} üíé –ø–µ—Ä–µ–≤–µ–¥–µ–Ω—ã –Ω–∞ –±–∞–ª–∞–Ω—Å!")
    await show_menu(callback, user)
    await save_db()

@dp.callback_query(F.data.startswith("buy_"))
async def process_buy(callback: CallbackQuery):
    user = await get_user(callback.from_user.id)
    if not await ensure_subscription(callback, user):
        return
    
    # –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ: –æ–±—ä–µ–¥–∏–Ω—è–µ–º –≤—Å–µ —á–∞—Å—Ç–∏ –ø–æ—Å–ª–µ –ø–µ—Ä–≤–æ–≥–æ –ø–æ–¥—á–µ—Ä–∫–∏–≤–∞–Ω–∏—è
    item = '_'.join(callback.data.split('_')[1:])
    
    items = {
        "stars30": {
            "title": "30 –ó–≤–µ–∑–¥",
            "description": "–ü–∞–∫–µ—Ç –∑–≤–µ–∑–¥ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫–æ–Ω—Ç–µ–Ω—Ç–∞",
            "currency": "XTR",
            "price": 30,
            "stars": 30
        },
        "stars50": {
            "title": "50 –ó–≤–µ–∑–¥",
            "description": "–ü–∞–∫–µ—Ç –∑–≤–µ–∑–¥",
            "currency": "XTR",
            "price": 50,
            "stars": 50
        },
        "stars150": {
            "title": "150 –ó–≤–µ–∑–¥",
            "description": "–ë–æ–ª—å—à–æ–π –ø–∞–∫–µ—Ç –∑–≤–µ–∑–¥",
            "currency": "XTR",
            "price": 150,
            "stars": 150
        },
        "stars500": {
            "title": "500 –ó–≤–µ–∑–¥",
            "description": "–û–≥—Ä–æ–º–Ω—ã–π –ø–∞–∫–µ—Ç –∑–≤–µ–∑–¥",
            "currency": "XTR",
            "price": 500,
            "stars": 500
        },
        "premium_month": {
            "title": "–ü—Ä–µ–º–∏—É–º 1 –º–µ—Å—è—Ü",
            "description": "–ü—Ä–µ–º–∏—É–º –¥–æ—Å—Ç—É–ø –Ω–∞ 30 –¥–Ω–µ–π",
            "currency": "XTR",
            "price": 600,
            "premium": True,
            "expiry": time.time() + 30 * 24 * 3600
        },
        "premium_forever": {
            "title": "–ü—Ä–µ–º–∏—É–º –Ω–∞–≤—Å–µ–≥–¥–∞",
            "description": "–ü–æ—Å—Ç–æ—è–Ω–Ω—ã–π –ø—Ä–µ–º–∏—É–º –¥–æ—Å—Ç—É–ø",
            "currency": "XTR",
            "price": 1999,
            "premium": True,
            "expiry": None
        },
    }
    
    if item not in items:
        await callback.answer(f"‚ùå –¢–æ–≤–∞—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: {item}", show_alert=True)
        return
    
    product = items[item]
    
    await callback.message.answer_invoice(
        title=product["title"],
        description=product["description"],
        provider_token=PAYMENT_PROVIDER_TOKEN,
        currency=product["currency"],
        prices=[LabeledPrice(label=product["title"], amount=product["price"])],
        payload=item,
        need_name=False,
        need_phone_number=False,
        need_email=False,
        need_shipping_address=False,
        is_flexible=False,
        reply_markup=InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üí≥ –û–ø–ª–∞—Ç–∏—Ç—å", pay=True)],
            [InlineKeyboardButton(text="üÜò –ü–æ–¥–¥–µ—Ä–∂–∫–∞", url=f"tg://user?username={PAYMENT_ADMIN[1:]}")],
            [InlineKeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="home")],
            [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel")]
        ])
    )
    await callback.answer()

@dp.callback_query(F.data == "support")
async def support_handler(callback: CallbackQuery):
    user = await get_user(callback.from_user.id)
    if not await ensure_subscription(callback, user):
        return
    
    user.push_menu(user.state, {})
    user.state = UserState.SUPPORT
    user.mark_modified()
    await show_menu(callback, user)
    await callback.answer()

@dp.callback_query(F.data == "activate_promo")
async def activate_promo(callback: CallbackQuery):
    user = await get_user(callback.from_user.id)
    if not await ensure_subscription(callback, user):
        return
    
    user.push_menu(user.state, {})
    user.state = UserState.ACTIVATE_PROMO
    user.mark_modified()
    await show_menu(callback, user)
    await callback.answer()

@dp.callback_query(F.data == "improve_image")
async def improve_image(callback: CallbackQuery):
    user = await get_user(callback.from_user.id)
    if not await ensure_subscription(callback, user):
        return
    
    user.push_menu(user.state, {})
    user.state = UserState.IMAGE_IMPROVE
    user.mark_modified()
    
    if not user.last_image_prompt:
        await callback.answer("‚ùå –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö", show_alert=True)
        return
    
    cost = 0 if user.is_premium else IMPROVE_COST
    
    if not user.is_premium and user.stars < cost:
        await callback.answer(
            f"‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∑–≤—ë–∑–¥!\n–ù—É–∂–Ω–æ: {cost} ‚≠ê\n–í–∞—à –±–∞–ª–∞–Ω—Å: {user.stars}",
            show_alert=True
        )
        return
    
    try:
        await callback.message.edit_reply_markup(reply_markup=None)
    except:
        pass
    
    processing_msg = await callback.message.answer("ü™Ñ –£–ª—É—á—à–∞—é –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ...")
    
    try:
        improved_prompt = await improve_prompt(user.last_image_prompt)
        logger.info(f"Improved prompt: {user.last_image_prompt} -> {improved_prompt}")
        user.last_image_prompt = improved_prompt
        user.mark_modified()
        
        if not user.is_premium:
            user.stars -= cost
            user.mark_modified()
        
        if detect_language(improved_prompt) != 'en':
            translated_prompt = await translate_to_english(improved_prompt)
        else:
            translated_prompt = improved_prompt

        encoded_prompt = urllib.parse.quote(translated_prompt)
        image_url = f"{IMAGE_URL}{encoded_prompt}?nologo=true"
        
        await processing_msg.delete()
        
        caption = trim_caption(
            f"‚ú® <b>–£–ª—É—á—à–µ–Ω–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç</b>\n‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê\n"
            f"ü§ñ –ú–æ–¥–µ–ª—å: {IMAGE_MODELS[user.image_model].name}\n"
            f"{'üíé –ë–µ–∑–ª–∏–º–∏—Ç (–ø—Ä–µ–º–∏—É–º)' if user.is_premium else f'üíé –°—Ç–æ–∏–º–æ—Å—Ç—å: {cost} ‚≠ê'}\n"
            f"‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê"
        )
        
        result = await safe_send_photo(
            callback.message,
            image_url,
            caption,
            image_options_keyboard(user)
        )
        user.last_image_url = result.photo[-1].file_id
        user.mark_modified()
    except Exception as e:
        logger.error(f"Improve image error: {e}")
        await processing_msg.edit_text("‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–ª—É—á—à–µ–Ω–∏–∏")
    finally:
        await save_db()

@dp.callback_query(F.data == "regenerate_image")
async def regenerate_image(callback: CallbackQuery):
    user = await get_user(callback.from_user.id)
    if not await ensure_subscription(callback, user):
        return
    
    user.push_menu(user.state, {})
    if user.is_premium:
        user.state = UserState.IMAGE_COUNT_SELECT
    else:
        user.state = UserState.IMAGE_GEN
    user.mark_modified()
    await callback.answer("üîÑ –í—ã–±–µ—Ä–∏—Ç–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∑–∞–Ω–æ–≤–æ")

@dp.callback_query(F.data == "regenerate_avatar")
async def regenerate_avatar(callback: CallbackQuery):
    user = await get_user(callback.from_user.id)
    if not await ensure_subscription(callback, user):
        return
    
    user.push_menu(user.state, {})
    user.state = UserState.AVATAR_GEN
    user.mark_modified()
    await callback.answer("üîÑ –í—ã–±–µ—Ä–∏—Ç–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∑–∞–Ω–æ–≤–æ")

@dp.callback_query(F.data == "regenerate_logo")
async def regenerate_logo(callback: CallbackQuery):
    user = await get_user(callback.from_user.id)
    if not await ensure_subscription(callback, user):
        return
    
    user.push_menu(user.state, {})
    user.state = UserState.LOGO_GEN
    user.mark_modified()
    await callback.answer("üîÑ –í—ã–±–µ—Ä–∏—Ç–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∑–∞–Ω–æ–≤–æ")

@dp.callback_query(F.data == "regenerate_text")
async def regenerate_text(callback: CallbackQuery):
    user = await get_user(callback.from_user.id)
    if not await ensure_subscription(callback, user):
        return
    
    user.push_menu(user.state, {})
    user.state = UserState.TEXT_GEN
    user.mark_modified()
    await callback.answer("üîÑ –û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å")

@dp.callback_query(F.data == "extend_text")
async def extend_text(callback: CallbackQuery):
    user = await get_user(callback.from_user.id)
    if not await ensure_subscription(callback, user):
        return
    
    if user.last_text:
        user.push_menu(user.state, {})
        user.state = UserState.TEXT_GEN
        user.mark_modified()
        await callback.message.answer("üìù –í–≤–µ–¥–∏—Ç–µ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –¥–µ—Ç–∞–ª–∏:")
    else:
        await callback.answer("‚ùå –ù–µ—Ç —Ç–µ–∫—Å—Ç–∞", show_alert=True)

@dp.callback_query(F.data == "rephrase_text")
async def rephrase_text(callback: CallbackQuery):
    user = await get_user(callback.from_user.id)
    if not await ensure_subscription(callback, user):
        return
    
    if user.last_text:
        user.push_menu(user.state, {})
        user.state = UserState.TEXT_GEN
        user.mark_modified()
        await callback.message.answer("‚úçÔ∏è –ö–∞–∫ –ø–µ—Ä–µ—Ñ—Ä–∞–∑–∏—Ä–æ–≤–∞—Ç—å?")
    else:
        await callback.answer("‚ùå –ù–µ—Ç —Ç–µ–∫—Å—Ç–∞", show_alert=True)

@dp.callback_query(F.data == "clear_context")
async def clear_context(callback: CallbackQuery):
    user = await get_user(callback.from_user.id)
    if not await ensure_subscription(callback, user):
        return
    
    user.clear_context()
    await callback.answer("üßπ –ö–æ–Ω—Ç–µ–∫—Å—Ç –æ—á–∏—â–µ–Ω!", show_alert=True)
    
    # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
    text = (
        "üìù <b>–ö–æ–Ω—Ç–µ–∫—Å—Ç –æ—á–∏—â–µ–Ω</b>\n"
        "‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê\n"
        "–ò—Å—Ç–æ—Ä–∏—è –¥–∏–∞–ª–æ–≥–∞ –±—ã–ª–∞ —Å–±—Ä–æ—à–µ–Ω–∞.\n"
        "–°–ª–µ–¥—É—é—â–∏–π –∑–∞–ø—Ä–æ—Å –±—É–¥–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∞–Ω –±–µ–∑ —É—á–µ—Ç–∞ –ø—Ä–µ–¥—ã–¥—É—â–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π."
    )
    await safe_edit_message(callback, text, reply_markup=text_options_keyboard(user))

@dp.callback_query(F.data == "admin_create_promo")
async def admin_create_promo(callback: CallbackQuery):
    user = await get_user(callback.from_user.id)
    if user.user_id != ADMIN_ID:
        return
    
    user.push_menu(user.state, {})
    user.state = UserState.ADMIN_CREATE_PROMO
    user.mark_modified()
    await show_menu(callback, user)
    await callback.answer()

@dp.callback_query(F.data == "admin_stats")
async def admin_stats(callback: CallbackQuery):
    user = await get_user(callback.from_user.id)
    if user.user_id != ADMIN_ID:
        return
    
    user.push_menu(user.state, {})
    user.state = UserState.ADMIN_STATS
    user.mark_modified()
    await show_menu(callback, user)
    await callback.answer()

@dp.callback_query(F.data == "admin_broadcast")
async def admin_broadcast(callback: CallbackQuery):
    user = await get_user(callback.from_user.id)
    if user.user_id != ADMIN_ID:
        return
    
    user.push_menu(user.state, {})
    user.state = UserState.ADMIN_BROADCAST
    user.mark_modified()
    await show_menu(callback, user)
    await callback.answer()

@dp.callback_query(F.data == "admin_promo_list")
async def admin_promo_list(callback: CallbackQuery):
    user = await get_user(callback.from_user.id)
    if user.user_id != ADMIN_ID:
        return
    
    user.push_menu(user.state, {})
    user.state = UserState.ADMIN_PROMO_LIST
    user.mark_modified()
    await show_menu(callback, user)
    await callback.answer()

@dp.callback_query(F.data.startswith("promo_detail_"))
async def admin_promo_detail(callback: CallbackQuery):
    user = await get_user(callback.from_user.id)
    if user.user_id != ADMIN_ID:
        return
    
    promo_code = callback.data.split('_', 2)[2]
    await handle_admin_promo_detail(callback, user, promo_code)

@dp.callback_query(F.data.startswith("promo_toggle_"))
async def promo_toggle_handler(callback: CallbackQuery):
    user = await get_user(callback.from_user.id)
    if user.user_id != ADMIN_ID:
        return
    
    promo_code = callback.data.split('_', 2)[2]
    promo_data = promo_codes.get(promo_code)
    if not promo_data:
        await callback.answer("‚ùå –ü—Ä–æ–º–æ–∫–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
        return
    
    # –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º —Å—Ç–∞—Ç—É—Å
    promo_data["active"] = not promo_data.get("active", True)
    promo_codes[promo_code] = promo_data
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º
    with open(PROMO_FILE, 'w', encoding='utf-8') as f:
        json.dump(promo_codes, f, ensure_ascii=False, indent=2)
    
    await callback.answer(f"‚úÖ –°—Ç–∞—Ç—É—Å –∏–∑–º–µ–Ω–µ–Ω –Ω–∞ {'–∞–∫—Ç–∏–≤–µ–Ω' if promo_data['active'] else '–Ω–µ–∞–∫—Ç–∏–≤–µ–Ω'}")
    await handle_admin_promo_detail(callback, user, promo_code)

@dp.callback_query(F.data == "broadcast_confirm")
async def broadcast_confirm(callback: CallbackQuery):
    user = await get_user(callback.from_user.id)
    if user.user_id != ADMIN_ID:
        return
    
    await callback.message.delete()
    await execute_broadcast(user.user_id)

@dp.callback_query(F.data == "broadcast_cancel")
async def broadcast_cancel(callback: CallbackQuery):
    user = await get_user(callback.from_user.id)
    if user.user_id != ADMIN_ID:
        return
    
    admin_broadcast_data[user.user_id] = "CANCEL"
    await callback.answer("‚èπÔ∏è –†–∞—Å—Å—ã–ª–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞")
    await callback.message.delete()
    await bot.send_message(user.user_id, "‚ùå –†–∞—Å—Å—ã–ª–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞", reply_markup=admin_keyboard())

@dp.callback_query(F.data == "admin_user_management")
async def admin_user_management(callback: CallbackQuery):
    user = await get_user(callback.from_user.id)
    if user.user_id != ADMIN_ID:
        return
    
    user.push_menu(user.state, {})
    user.state = UserState.ADMIN_USER_MANAGEMENT
    user.mark_modified()
    await show_menu(callback, user)
    await callback.answer()

@dp.callback_query(F.data == "admin_search_user")
async def admin_search_user(callback: CallbackQuery):
    user = await get_user(callback.from_user.id)
    if user.user_id != ADMIN_ID:
        return
    
    await safe_edit_message(
        callback,
        "üîç <b>–ü–û–ò–°–ö –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø</b>\n"
        "‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê\n"
        "–í–≤–µ–¥–∏—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:",
        reply_markup=admin_cancel_keyboard()
    )

@dp.callback_query(F.data.startswith("admin_view_user_"))
async def admin_view_user(callback: CallbackQuery):
    user = await get_user(callback.from_user.id)
    if user.user_id != ADMIN_ID:
        return
    
    user_id = int(callback.data.split('_')[3])
    user.push_menu(user.state, {})
    user.state = UserState.ADMIN_VIEW_USER
    user.mark_modified()
    await handle_admin_view_user(callback, user, user_id)

@dp.callback_query(F.data.startswith("admin_edit_user_"))
async def admin_edit_user(callback: CallbackQuery):
    user = await get_user(callback.from_user.id)
    if user.user_id != ADMIN_ID:
        return
    
    user_id = int(callback.data.split('_')[3])
    if user_id not in users_db:
        await callback.answer("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
        return
    
    target_user = users_db[user_id]
    await safe_edit_message(
        callback,
        f"‚úèÔ∏è <b>–†–ï–î–ê–ö–¢–ò–†–û–í–ê–ù–ò–ï –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø {user_id}</b>\n"
        "‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê\n"
        "–í–≤–µ–¥–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n"
        "<code>–ø–æ–ª–µ:–∑–Ω–∞—á–µ–Ω–∏–µ</code>\n\n"
        "–î–æ—Å—Ç—É–ø–Ω—ã–µ –ø–æ–ª—è:\n"
        "‚Ä¢ stars - –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–≤–µ–∑–¥\n"
        "‚Ä¢ premium - —Å—Ä–æ–∫ –ø—Ä–µ–º–∏—É–º–∞ –≤ –¥–Ω—è—Ö (0 –¥–ª—è —Å–Ω—è—Ç–∏—è)\n"
        "–ü—Ä–∏–º–µ—Ä: <code>stars:500</code> –∏–ª–∏ <code>premium:30</code>",
        reply_markup=admin_cancel_keyboard()
    )

@dp.callback_query(F.data == "admin_template_management")
async def admin_template_management(callback: CallbackQuery):
    user = await get_user(callback.from_user.id)
    if user.user_id != ADMIN_ID:
        return
    
    user.push_menu(user.state, {})
    user.state = UserState.ADMIN_TEMPLATE_MANAGEMENT
    user.mark_modified()
    await show_menu(callback, user)
    await callback.answer()

@dp.callback_query(F.data == "admin_create_template")
async def admin_create_template(callback: CallbackQuery):
    user = await get_user(callback.from_user.id)
    if user.user_id != ADMIN_ID:
        return
    
    await safe_edit_message(
        callback,
        "üìã <b>–°–û–ó–î–ê–ù–ò–ï –®–ê–ë–õ–û–ù–ê</b>\n"
        "‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê\n"
        "–í–≤–µ–¥–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ —à–∞–±–ª–æ–Ω–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ JSON:\n"
        "<code>{'name': '–ù–∞–∑–≤–∞–Ω–∏–µ', 'description': '–û–ø–∏—Å–∞–Ω–∏–µ', 'prompt': '–ü—Ä–æ–º–ø—Ç', 'example': '–ü—Ä–∏–º–µ—Ä', 'category': '–ö–∞—Ç–µ–≥–æ—Ä–∏—è'}</code>\n\n"
        "–ö–∞—Ç–µ–≥–æ—Ä–∏–∏: –¢–µ–∫—Å—Ç, –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ",
        reply_markup=admin_cancel_keyboard()
    )

@dp.callback_query(F.data == "template_list")
async def template_list(callback: CallbackQuery):
    user = await get_user(callback.from_user.id)
    if user.user_id != ADMIN_ID:
        return
    
    if not templates:
        await callback.answer("‚ùå –®–∞–±–ª–æ–Ω—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã", show_alert=True)
        return
        
    await safe_edit_message(
        callback,
        "üìã <b>–°–ü–ò–°–û–ö –®–ê–ë–õ–û–ù–û–í</b>\n"
        "‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê\n"
        f"–ù–∞–π–¥–µ–Ω–æ —à–∞–±–ª–æ–Ω–æ–≤: {len(templates)}\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ —à–∞–±–ª–æ–Ω –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è:",
        reply_markup=template_list_keyboard()
    )

@dp.callback_query(F.data.startswith("template_select_"))
async def template_select(callback: CallbackQuery):
    user = await get_user(callback.from_user.id)
    if user.user_id != ADMIN_ID:
        return
    
    template_id = callback.data.split('_', 2)[2]
    template = templates.get(template_id)
    if not template:
        await callback.answer("‚ùå –®–∞–±–ª–æ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
        return
        
    text = format_template(template)
    await safe_edit_message(
        callback,
        text,
        reply_markup=template_detail_keyboard(template_id)
    )

@dp.callback_query(F.data.startswith("edit_template_"))
async def edit_template(callback: CallbackQuery):
    user = await get_user(callback.from_user.id)
    if user.user_id != ADMIN_ID:
        return
    
    template_id = callback.data.split('_', 2)[2]
    template = templates.get(template_id)
    if not template:
        await callback.answer("‚ùå –®–∞–±–ª–æ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
        return
        
    await safe_edit_message(
        callback,
        f"‚úèÔ∏è <b>–†–ï–î–ê–ö–¢–ò–†–û–í–ê–ù–ò–ï –®–ê–ë–õ–û–ù–ê {template.name}</b>\n"
        "‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê\n"
        "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ JSON:",
        reply_markup=admin_cancel_keyboard()
    )

@dp.callback_query(F.data.startswith("delete_template_"))
async def delete_template(callback: CallbackQuery):
    user = await get_user(callback.from_user.id)
    if user.user_id != ADMIN_ID:
        return
    
    template_id = callback.data.split('_', 2)[2]
    if template_id in templates:
        del templates[template_id]
        await save_db()
        await callback.answer("‚úÖ –®–∞–±–ª–æ–Ω —É–¥–∞–ª–µ–Ω", show_alert=True)
        await template_list(callback)
    else:
        await callback.answer("‚ùå –®–∞–±–ª–æ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)

@dp.callback_query(F.data == "template_select")
async def user_template_select(callback: CallbackQuery):
    user = await get_user(callback.from_user.id)
    if not await ensure_subscription(callback, user):
        return
    
    if not templates:
        await callback.answer("‚ùå –®–∞–±–ª–æ–Ω—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã", show_alert=True)
        return
        
    user.push_menu(user.state, {})
    user.state = UserState.TEMPLATE_SELECT
    user.mark_modified()
    await show_menu(callback, user)
    await callback.answer()

@dp.callback_query(F.data.startswith("user_template_select_"))
async def user_template_select_detail(callback: CallbackQuery):
    user = await get_user(callback.from_user.id)
    if not await ensure_subscription(callback, user):
        return
    
    template_id = callback.data.split('_', 3)[3]
    template = templates.get(template_id)
    if not template:
        await callback.answer("‚ùå –®–∞–±–ª–æ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
        return
        
    user.push_menu(user.state, {})
    user.state = UserState.TEMPLATE_GEN
    user.mark_modified()
    # –ó–¥–µ—Å—å –±—É–¥–µ—Ç –≤—ã–∑–æ–≤ —Ñ—É–Ω–∫—Ü–∏–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø–æ —à–∞–±–ª–æ–Ω—É

@dp.callback_query(F.data.startswith("use_template_"))
async def use_template(callback: CallbackQuery):
    user = await get_user(callback.from_user.id)
    if not await ensure_subscription(callback, user):
        return
    
    template_id = callback.data.split('_', 2)[2]
    template = templates.get(template_id)
    if not template:
        await callback.answer("‚ùå –®–∞–±–ª–æ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
        return
        
    user.push_menu(user.state, {})
    user.state = UserState.TEMPLATE_GEN
    user.mark_modified()
    # –ó–¥–µ—Å—å –±—É–¥–µ—Ç –≤—ã–∑–æ–≤ —Ñ—É–Ω–∫—Ü–∏–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø–æ —à–∞–±–ª–æ–Ω—É

@dp.callback_query(F.data == "achievements_list")
async def achievements_list(callback: CallbackQuery):
    user = await get_user(callback.from_user.id)
    if not await ensure_subscription(callback, user):
        return
    
    user.push_menu(user.state, {})
    user.state = UserState.ACHIEVEMENTS_LIST
    user.mark_modified()
    await handle_achievements_list(callback, user)
    await callback.answer()

@dp.callback_query(F.data.startswith("achievement_detail_"))
async def achievement_detail(callback: CallbackQuery):
    user = await get_user(callback.from_user.id)
    if not await ensure_subscription(callback, user):
        return
    
    achievement_id = callback.data.split('_', 2)[2]
    achievement = achievements.get(achievement_id)
    if not achievement:
        await callback.answer("‚ùå –î–æ—Å—Ç–∏–∂–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ", show_alert=True)
        return
        
    unlocked = achievement_id in user.achievements
    date = user.achievements.get(achievement_id)
    text = format_achievement(achievement, unlocked, date)
    
    await safe_edit_message(
        callback,
        text,
        reply_markup=achievement_detail_keyboard()
    )
    await callback.answer()

@dp.callback_query(F.data == "settings_menu")
async def settings_menu(callback: CallbackQuery):
    user = await get_user(callback.from_user.id)
    if not await ensure_subscription(callback, user):
        return
    
    user.push_menu(user.state, {})
    user.state = UserState.SETTINGS_MENU
    user.mark_modified()
    await safe_edit_message(
        callback,
        "‚öôÔ∏è <b>–ù–ê–°–¢–†–û–ô–ö–ò</b>\n"
        "‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –ø–∞—Ä–∞–º–µ—Ç—Ä –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è:",
        reply_markup=settings_menu_keyboard(user)
    )
    await callback.answer()

@dp.callback_query(F.data == "toggle_notifications")
async def toggle_notifications(callback: CallbackQuery):
    user = await get_user(callback.from_user.id)
    if not await ensure_subscription(callback, user):
        return
    
    user.settings["notifications"] = not user.settings["notifications"]
    user.mark_modified()
    status = "–≤–∫–ª—é—á–µ–Ω—ã" if user.settings["notifications"] else "–≤—ã–∫–ª—é—á–µ–Ω—ã"
    await callback.answer(f"üîî –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è {status}", show_alert=True)
    await settings_menu(callback)

@dp.callback_query(F.data == "toggle_language")
async def toggle_language(callback: CallbackQuery):
    user = await get_user(callback.from_user.id)
    if not await ensure_subscription(callback, user):
        return
    
    user.settings["language"] = "en" if user.settings["language"] == "ru" else "ru"
    user.mark_modified()
    lang = "–†—É—Å—Å–∫–∏–π" if user.settings["language"] == "ru" else "English"
    await callback.answer(f"üåê –Ø–∑—ã–∫ –∏–∑–º–µ–Ω–µ–Ω –Ω–∞ {lang}", show_alert=True)
    await settings_menu(callback)

@dp.callback_query(F.data == "toggle_auto_translate")
async def toggle_auto_translate(callback: CallbackQuery):
    user = await get_user(callback.from_user.id)
    if not await ensure_subscription(callback, user):
        return
    
    user.settings["auto_translate"] = not user.settings["auto_translate"]
    user.mark_modified()
    status = "–≤–∫–ª—é—á–µ–Ω" if user.settings["auto_translate"] else "–≤—ã–∫–ª—é—á–µ–Ω"
    await callback.answer(f"üîÑ –ê–≤—Ç–æ–ø–µ—Ä–µ–≤–æ–¥ {status}", show_alert=True)
    await settings_menu(callback)

@dp.callback_query(F.data.startswith("feedback_"))
async def process_feedback(callback: CallbackQuery):
    user = await get_user(callback.from_user.id)
    if not await ensure_subscription(callback, user):
        return
    
    parts = callback.data.split('_')
    if len(parts) < 3:
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏", show_alert=True)
        return
        
    rating = int(parts[1])
    content_type = parts[2]
    
    user.feedback_count += 1
    user.last_feedback = datetime.datetime.now().isoformat()
    
    # –ù–∞–≥—Ä–∞–¥–∞ –∑–∞ —Ñ–∏–¥–±–µ–∫
    reward = min(5, rating)
    user.stars += reward
    user.add_xp(reward)
    
    await callback.answer(f"‚≠ê –°–ø–∞—Å–∏–±–æ –∑–∞ –æ—Ü–µ–Ω–∫—É! +{reward} ‚≠ê", show_alert=True)
    
    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
    user.state = UserState.MAIN_MENU
    user.menu_stack = []
    await show_menu(callback, user)
    await save_db()

# ===================== –û–ë–†–ê–ë–û–¢–ö–ê –°–û–û–ë–©–ï–ù–ò–ô =====================
@dp.message(Command("start", "help"))
async def send_welcome(message: Message):
    args = message.text.split()
    user = await get_user(message.from_user.id)
    user.menu_stack = []
    user.update_interaction()
    
    ref_code = args[1] if len(args) > 1 else None
    
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–≥–æ –∫–æ–¥–∞
    if ref_code and ref_code.startswith("REF"):
        if user.has_subscribed:
            await process_referral(user, ref_code)
        else:
            user.pending_referral = ref_code
            user.mark_modified()
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏
    if not user.has_subscribed:
        if await check_subscription(user.user_id):
            user.has_subscribed = True
            user.mark_modified()
        else:
            user.state = UserState.CHECK_SUBSCRIPTION
            await message.answer(
                "üì¢ –î–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –±–æ—Ç–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –Ω–∞—à –∫–∞–Ω–∞–ª!\n"
                "üëâ https://t.me/neurogptpro üëà\n\n"
                "–ü–æ—Å–ª–µ –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ",
                reply_markup=subscribe_keyboard()
            )
            return
    
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–≥–æ –∫–æ–¥–∞ –ø–æ—Å–ª–µ –ø–æ–¥–ø–∏—Å–∫–∏
    if ref_code and ref_code.startswith("REF") and not user.referral_used:
        await process_referral(user, ref_code)
    
    welcome_text = (
        f"‚ú® <b>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, {html.quote(message.from_user.first_name)}!</b> ‚ú®\n"
        f"‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê\n"
        "üöÄ –í–∞—à AI-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫–æ–Ω—Ç–µ–Ω—Ç–∞:\n\n"
        "üé® <b>–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π</b> - –≤–∏–∑—É–∞–ª–∏–∑–∏—Ä—É—é –ª—é–±—ã–µ –∏–¥–µ–∏\n"
        "üìù <b>–¢–µ–∫—Å—Ç–æ–≤—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç</b> - –ø–∏—à—É —Ç–µ–∫—Å—Ç—ã, —Å—Ç–∞—Ç—å–∏, —Å–∫—Ä–∏–ø—Ç—ã –∏ –ø—Ä–æ–≥—Ä–∞–º–º—ã\n"
        "üìã <b>–®–∞–±–ª–æ–Ω—ã</b> - –≥–æ—Ç–æ–≤—ã–µ —Ä–µ—à–µ–Ω–∏—è –¥–ª—è –ø–æ–ø—É–ª—è—Ä–Ω—ã—Ö –∑–∞–¥–∞—á\n"
        "üíé <b>–ü—Ä–µ–º–∏—É–º</b> - –±–µ–∑–ª–∏–º–∏—Ç–Ω—ã–µ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ ‚ôæÔ∏è \n\n"
        f"üéÅ <b>–°—Ç–∞—Ä—Ç–æ–≤—ã–π –±–æ–Ω—É—Å:</b> {START_BALANCE_STARS} ‚≠ê\n"
        "<i>–ò—Å–ø–æ–ª—å–∑—É–π –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π!</i>\n\n"
        f"‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê"
    )
    user.state = UserState.MAIN_MENU
    await message.answer(welcome_text, reply_markup=main_keyboard(user))
    await save_db()

@dp.message(Command("admin"))
async def admin_command(message: Message):
    await process_admin_command(message)

@dp.message(Command("balance"))
async def balance_command(message: Message):
    user = await get_user(message.from_user.id)
    if not await ensure_subscription(message, user):
        return
    
    user.state = UserState.BALANCE
    text = format_balance(user)
    await message.answer(text, reply_markup=balance_keyboard())

@dp.message(Command("stats"))
async def stats_command(message: Message):
    user = await get_user(message.from_user.id)
    if user.user_id != ADMIN_ID:
        return
    
    stats = format_admin_stats()
    await message.answer(stats)

@dp.message(F.text)
async def handle_message(message: Message):
    user = await get_user(message.from_user.id)
    text = message.text.strip()
    user.update_interaction()
    
    if not await ensure_subscription(message, user):
        return
        
    try:
        if user.state == UserState.IMAGE_GEN:
            await generate_content(
                user, text, message,
                "image", IMAGE_COST, IMAGE_MODELS[user.image_model],
                image_options_keyboard(user),
                "last_image_prompt", "last_image_url"
            )
            
        elif user.state == UserState.TEXT_GEN:
            await generate_text(user, text, message)
            
        elif user.state == UserState.AVATAR_GEN:
            await generate_content(
                user, text, message,
                "avatar", AVATAR_COST, IMAGE_MODELS[user.image_model],
                avatar_options_keyboard(),
                "last_avatar_prompt", "last_avatar_url"
            )
            
        elif user.state == UserState.LOGO_GEN:
            await generate_content(
                user, text, message,
                "logo", LOGO_COST, IMAGE_MODELS[user.image_model],
                logo_options_keyboard(),
                "last_logo_prompt", "last_logo_url"
            )
            
        elif user.state == UserState.ACTIVATE_PROMO:
            await process_promo_code(user, text, message)
            
        elif user.state == UserState.ADMIN_CREATE_PROMO:
            await process_promo_creation(message)
            
        elif user.state == UserState.ADMIN_BROADCAST:
            await process_broadcast_message(message)
            
        elif user.state == UserState.ADMIN_SEARCH_USER:
            await process_admin_search_user(message, text)
            
        elif user.state == UserState.ADMIN_EDIT_USER:
            await process_admin_edit_user(message, text)
            
        elif user.state == UserState.ADMIN_CREATE_TEMPLATE:
            await process_admin_create_template(message, text)
            
        elif user.state == UserState.TEMPLATE_GEN:
            await process_template_generation(user, text, message)
            
    except Exception as e:
        logger.error(f"Error in handle_message: {e}")
        await animate_error(message, f"‚ö†Ô∏è <b>–û—à–∏–±–∫–∞:</b> {str(e)}")
        ERROR_COUNT.inc()
    finally:
        await save_db()

# ===================== –ì–ï–ù–ï–†–ê–¶–ò–Ø –ö–û–ù–¢–ï–ù–¢–ê =====================
async def generate_content(
    user: User,
    text: str,
    message: Message,
    content_type: str,
    base_cost: int,
    model: GenerationModel,
    options_keyboard: InlineKeyboardMarkup,
    prompt_field: str,
    url_field: str
):
    start_time = time.time()
    
    try:
        if not await ensure_subscription(message, user):
            return
            
        if len(text) > MAX_PROMPT_LENGTH:
            await animate_error(message, f"‚ö†Ô∏è –ü—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç {MAX_PROMPT_LENGTH} —Å–∏–º–≤–æ–ª–æ–≤")
            return
            
        setattr(user, prompt_field, text)
        user.last_text = ""
        user.mark_modified()
        user.update_interaction()
        
        processing_msg = await animate_loading(message, f"ü™Ñ –ì–µ–Ω–µ—Ä–∏—Ä—É—é {content_type}...")
        
        # –ê–≤—Ç–æ–ø–µ—Ä–µ–≤–æ–¥ –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏
        if user.settings["auto_translate"] and detect_language(text) != 'en':
            translated_prompt = await translate_to_english(text)
            logger.info(f"Translated: {text} -> {translated_prompt}")
        else:
            translated_prompt = text
        
        enhanced_prompt = f"{translated_prompt}, {model.prompt}"
        
        cost = 0 if user.is_premium else int(base_cost * model.cost_multiplier)
        
        if not user.is_premium and user.stars < cost:
            await processing_msg.delete()
            await animate_error(
                message, 
                f"‚ùå <b>–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∑–≤—ë–∑–¥!</b>\n‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê\n"
                f"‚≠ê –ù—É–∂–Ω–æ: {cost} ‚≠ê\n"
                f"‚≠ê –í–∞—à –±–∞–ª–∞–Ω—Å: {user.stars}\n\n"
                f"‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê"
            )
            return
        
        # –î–ª—è –ø—Ä–µ–º–∏—É–º-–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –Ω–µ—Å–∫–æ–ª—å–∫–∏–º–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º–∏
        if content_type == "image" and user.is_premium and user.image_count > 1:
            count = min(user.image_count, MAX_IMAGE_COUNT)
            images = []
            
            for i in range(count):
                variant_prompt = f"{enhanced_prompt} --variant {i+1}"
                encoded_prompt = urllib.parse.quote(variant_prompt)
                image_url = f"{IMAGE_URL}{encoded_prompt}?nologo=true"
                images.append(image_url)
            
            # –°–æ–∑–¥–∞–µ–º –º–µ–¥–∏–∞–≥—Ä—É–ø–ø—É
            media_group = []
            for i, img_url in enumerate(images):
                if i == 0:
                    caption = f"üé® <b>{count} –≤–∞—Ä–∏–∞–Ω—Ç–∞</b>\n‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê\n"
                    caption += f"ü§ñ –ú–æ–¥–µ–ª—å: {model.name}\n"
                    caption += f"üíé –ë–µ–∑–ª–∏–º–∏—Ç (–ø—Ä–µ–º–∏—É–º)\n"
                    caption += f"‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê"
                else:
                    caption = ""
                
                media_group.append(InputMediaPhoto(
                    media=img_url,
                    caption=trim_caption(caption) if caption else ""
                ))
                
                await animate_progress(processing_msg, f"–ì–µ–Ω–µ—Ä–∞—Ü–∏—è {i+1}/{count}", (i+1)/count)
            
            await processing_msg.delete()
            sent_messages = await message.answer_media_group(media=media_group)
            setattr(user, url_field, sent_messages[0].photo[-1].file_id)
            user.images_generated += count
            bot_stats["images_generated"] += count
            IMAGES_GENERATED.inc(count)
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –æ—Ç–¥–µ–ª—å–Ω—ã–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º
            await sent_messages[-1].answer(
                f"‚úÖ {content_type.capitalize()} –≥–æ—Ç–æ–≤—ã!",
                reply_markup=options_keyboard
            )
        
        else:  # –û–¥–Ω–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
            encoded_prompt = urllib.parse.quote(enhanced_prompt)
            image_url = f"{IMAGE_URL}{encoded_prompt}?nologo=true"
            
            if not user.is_premium:
                user.stars -= cost
                user.mark_modified()
            
            caption_text = trim_caption(
                f"{content_type.capitalize()} <b>–ì–æ—Ç–æ–≤–æ!</b>\n‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê\n"
                f"ü§ñ –ú–æ–¥–µ–ª—å: {model.name}\n"
                f"{'üíé –ë–µ–∑–ª–∏–º–∏—Ç (–ø—Ä–µ–º–∏—É–º)' if user.is_premium else f'üíé –°—Ç–æ–∏–º–æ—Å—Ç—å: {cost} ‚≠ê'}\n"
                f"‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê"
            )
            
            await processing_msg.delete()
            result = await safe_send_photo(
                message,
                image_url,
                caption_text,
                options_keyboard
            )
            setattr(user, url_field, result.photo[-1].file_id)
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—á–µ—Ç—á–∏–∫–∏
            if content_type == "image":
                user.images_generated += 1
                bot_stats["images_generated"] += 1
                IMAGES_GENERATED.inc()
            elif content_type == "avatar":
                user.avatars_generated += 1
                bot_stats["avatars_generated"] += 1
                AVATARS_GENERATED.inc()
            elif content_type == "logo":
                user.logos_generated += 1
                bot_stats["logos_generated"] += 1
                LOGOS_GENERATED.inc()
                
            user.mark_modified()
            
            await animate_success(message, f"‚úÖ {content_type.capitalize()} –≥–æ—Ç–æ–≤!")
        
        # –ù–∞—á–∏—Å–ª–µ–Ω–∏–µ –æ–ø—ã—Ç–∞
        user.add_xp(3)
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π
        unlocked = user.check_achievements()
        if unlocked:
            for achievement_id in unlocked:
                achievement = achievements[achievement_id]
                await send_notification(
                    user.user_id,
                    f"üèÜ <b>–ù–û–í–û–ï –î–û–°–¢–ò–ñ–ï–ù–ò–ï!</b>\n"
                    f"‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê\n"
                    f"{achievement.icon} {achievement.name}\n"
                    f"{achievement.description}\n\n"
                    f"üéÅ –ù–∞–≥—Ä–∞–¥–∞: {achievement.reward} ‚≠ê"
                )
        
    except aiohttp.ClientError as e:
        logger.error(f"Network error: {e}")
        await animate_error(message, "‚ö†Ô∏è –û—à–∏–±–∫–∞ —Å–µ—Ç–∏, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ")
        ERROR_COUNT.inc()
    except asyncio.TimeoutError:
        logger.error("Timeout during generation")
        await animate_error(message, "‚åõ –¢–∞–π–º–∞—É—Ç –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏")
        ERROR_COUNT.inc()
    except Exception as e:
        logger.exception("Unhandled error in generation")
        await animate_error(message, f"‚õî –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {str(e)}")
        ERROR_COUNT.inc()
    finally:
        duration = time.time() - start_time
        REQUEST_TIME.observe(duration)
        await save_db()

async def generate_text(user: User, text: str, message: Message):
    start_time = time.time()
    
    try:
        if not await ensure_subscription(message, user):
            return
            
        model = TEXT_MODELS[user.text_model]
        if model.premium_only and not user.is_premium:
            await animate_error(message, "‚ùå –≠—Ç–∞ –º–æ–¥–µ–ª—å –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –¥–ª—è –ø—Ä–µ–º–∏—É–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")
            return
            
        if len(text) > MAX_PROMPT_LENGTH:
            await animate_error(message, f"‚ö†Ô∏è –ü—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç {MAX_PROMPT_LENGTH} —Å–∏–º–≤–æ–ª–æ–≤")
            return
            
        user.last_text = text
        user.last_image_prompt = ""
        user.mark_modified()
        user.update_interaction()
        
        processing_msg = await animate_loading(message, "üß† –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –∑–∞–ø—Ä–æ—Å...")
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –¥–ª—è –ø—Ä–µ–º–∏—É–º-–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        if user.is_premium and not user.context:
            user.context = [
                {"role": "system", "content": SYSTEM_PROMPT}
            ]
        
        if user.is_premium:
            user.add_context("user", text)
            full_prompt = "\n".join([f"{msg['role']}: {msg['content']}" for msg in user.context])
        else:
            full_prompt = f"{SYSTEM_PROMPT}\n\n–ó–∞–ø—Ä–æ—Å: {text}"
        
        full_prompt = f"{model.prompt}\n\n{full_prompt}"
        full_prompt = truncate_prompt(full_prompt)
        
        await send_typing_effect(message.chat.id, duration=3)
        
        encoded_prompt = urllib.parse.quote(full_prompt)
        result = await fetch_with_retry(f"{TEXT_URL}{encoded_prompt}")
        
        if not result:
            raise Exception("–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏")
        
        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Å –æ—á–∏—Å—Ç–∫–æ–π HTML
        formatted_result = format_code_blocks(result)
        
        input_words = count_words(text)
        output_words = count_words(formatted_result)
        total_words = input_words + output_words
        cost = (total_words // 100) + (1 if total_words % 100 > 0 else 0)
        cost = int(cost * model.cost_multiplier)
        
        if not user.is_premium and user.stars < cost:
            await processing_msg.delete()
            await animate_error(
                message, 
                f"‚ùå <b>–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∑–≤—ë–∑–¥!</b>\n‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê\n"
                f"‚≠ê –ù—É–∂–Ω–æ: {cost} ‚≠ê\n"
                f"‚≠ê –í–∞—à –±–∞–ª–∞–Ω—Å: {user.stars}\n\n"
                f"‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê"
            )
            return
        
        if not user.is_premium:
            user.stars -= cost
            user.mark_modified()
        elif user.is_premium:
            # –î–æ–±–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞ –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç
            user.add_context("assistant", result)
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—á–µ—Ç—á–∏–∫–∏
        user.texts_generated += 1
        bot_stats["texts_generated"] += 1
        TEXTS_GENERATED.inc()
        
        await processing_msg.delete()
        
        # –†–∞–∑–¥–µ–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–∞ —á–∞—Å—Ç–∏
        messages = split_message(f"üìù <b>–†–µ–∑—É–ª—å—Ç–∞—Ç:</b>\n‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê\n\n{formatted_result}")
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤—Å–µ —á–∞—Å—Ç–∏, –∫—Ä–æ–º–µ –ø–æ—Å–ª–µ–¥–Ω–µ–π
        for msg_text in messages[:-1]:
            await message.answer(msg_text, parse_mode="HTML")
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ—Å–ª–µ–¥–Ω—é—é —á–∞—Å—Ç—å
        last_msg = await message.answer(messages[-1], parse_mode="HTML")
        
        stats_text = f"‚úÖ <b>–ì–æ—Ç–æ–≤–æ!</b>\n‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê\n"
        stats_text += f"ü§ñ –ú–æ–¥–µ–ª—å: {model.name}\n"
        
        if user.is_premium:
            stats_text += f"üíé –ë–µ–∑–ª–∏–º–∏—Ç (–ø—Ä–µ–º–∏—É–º)\n"
        else:
            stats_text += f"‚≠ê –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ –∑–≤—ë–∑–¥: {cost}\n"
            stats_text += f"‚≠ê –û—Å—Ç–∞—Ç–æ–∫: {user.stars}\n"
        
        stats_text += "‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê"
        
        await last_msg.answer(
            stats_text,
            reply_markup=text_options_keyboard(user)
        )
        
        await animate_success(message, "‚úÖ –¢–µ–∫—Å—Ç –≥–æ—Ç–æ–≤!")
        
        # –ù–∞—á–∏—Å–ª–µ–Ω–∏–µ –æ–ø—ã—Ç–∞
        user.add_xp(5)
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π
        unlocked = user.check_achievements()
        if unlocked:
            for achievement_id in unlocked:
                achievement = achievements[achievement_id]
                await send_notification(
                    user.user_id,
                    f"üèÜ <b>–ù–û–í–û–ï –î–û–°–¢–ò–ñ–ï–ù–ò–ï!</b>\n"
                    f"‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê\n"
                    f"{achievement.icon} {achievement.name}\n"
                    f"{achievement.description}\n\n"
                    f"üéÅ –ù–∞–≥—Ä–∞–¥–∞: {achievement.reward} ‚≠ê"
                )
        
    except TelegramBadRequest as e:
        logger.error(f"HTML formatting error: {e}")
        # –ü—ã—Ç–∞–µ–º—Å—è –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –±–µ–∑ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        await processing_msg.delete()
        await message.answer("‚ö†Ô∏è –û—à–∏–±–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è, –æ—Ç–ø—Ä–∞–≤–ª—è—é —Ç–µ–∫—Å—Ç –±–µ–∑ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è:")
        await message.answer(result[:4000])
        ERROR_COUNT.inc()
    except aiohttp.ClientError as e:
        logger.error(f"Network error: {e}")
        await animate_error(message, "‚ö†Ô∏è –û—à–∏–±–∫–∞ —Å–µ—Ç–∏, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ")
        ERROR_COUNT.inc()
    except asyncio.TimeoutError:
        logger.error("Timeout during text generation")
        await animate_error(message, "‚åõ –¢–∞–π–º–∞—É—Ç –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏")
        ERROR_COUNT.inc()
    except Exception as e:
        logger.exception("Unhandled error in text generation")
        await animate_error(message, f"‚õî –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {str(e)}")
        ERROR_COUNT.inc()
    finally:
        duration = time.time() - start_time
        REQUEST_TIME.observe(duration)
        await save_db()

async def process_template_generation(user: User, text: str, message: Message):
    start_time = time.time()
    
    try:
        if not await ensure_subscription(message, user):
            return
            
        if len(text) > MAX_TEMPLATE_LENGTH:
            await animate_error(message, f"‚ö†Ô∏è –ü—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç {MAX_TEMPLATE_LENGTH} —Å–∏–º–≤–æ–ª–æ–≤")
            return
            
        # –ü–æ–ª—É—á–∞–µ–º —à–∞–±–ª–æ–Ω –∏–∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
        template_id = user.last_text
        template = templates.get(template_id)
        if not template:
            await animate_error(message, "‚ùå –®–∞–±–ª–æ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return
            
        # –§–æ—Ä–º–∏—Ä—É–µ–º –ø—Ä–æ–º–ø—Ç
        full_prompt = template.prompt.format(data=text)
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
        if template.category == "–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ":
            user.last_image_prompt = full_prompt
            await generate_content(
                user, full_prompt, message,
                "image", IMAGE_COST, IMAGE_MODELS[user.image_model],
                image_options_keyboard(user),
                "last_image_prompt", "last_image_url"
            )
        else:
            user.last_text = full_prompt
            await generate_text(user, full_prompt, message)
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —à–∞–±–ª–æ–Ω–∞
        template.usage_count += 1
        user.templates_used += 1
        bot_stats["templates_used"] += 1
        TEMPLATES_USED.inc()
        
    except KeyError as e:
        logger.error(f"Template format error: {e}")
        await animate_error(message, "‚ö†Ô∏è –û—à–∏–±–∫–∞ –≤ –¥–∞–Ω–Ω—ã—Ö —à–∞–±–ª–æ–Ω–∞")
        ERROR_COUNT.inc()
    except Exception as e:
        logger.exception("Unhandled error in template generation")
        await animate_error(message, f"‚õî –û—à–∏–±–∫–∞: {str(e)}")
        ERROR_COUNT.inc()
    finally:
        duration = time.time() - start_time
        REQUEST_TIME.observe(duration)
        await save_db()

# ===================== –ó–ê–ü–£–°–ö –ü–†–ò–õ–û–ñ–ï–ù–ò–Ø =====================
from contextlib import asynccontextmanager

@asynccontextmanager
async def lifespan(app: FastAPI):
    """–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∂–∏–∑–Ω–µ–Ω–Ω—ã–º —Ü–∏–∫–ª–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
    # –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ
    await load_db()
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
    bot_info = await bot.get_me()
    global BOT_USERNAME
    BOT_USERNAME = bot_info.username
    logger.info(f"Bot @{BOT_USERNAME} started")
    
    # –§–æ–Ω–æ–≤—ã–µ –∑–∞–¥–∞—á–∏
    asyncio.create_task(auto_save_db())
    asyncio.create_task(self_pinger())
    
    # –û—á–∏—Å—Ç–∫–∞ –ø—Ä–µ–¥—ã–¥—É—â–∏—Ö –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π
    await bot.delete_webhook(drop_pending_updates=True)
    
    # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ –≤ —Ñ–æ–Ω–µ
    asyncio.create_task(dp.start_polling(bot, skip_updates=True))
    
    yield
    
    # –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏
    await save_db()
    await bot.session.close()

app = FastAPI(lifespan=lifespan)

# ===================== ENDPOINT –î–õ–Ø –ü–†–û–í–ï–†–ö–ò =====================
@app.api_route("/", methods=["GET", "HEAD", "POST"])
async def health_check(request: Request):
    # –î–ª—è HEAD-–∑–∞–ø—Ä–æ—Å–æ–≤ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —Ç–æ–ª—å–∫–æ —Å—Ç–∞—Ç—É—Å
    if request.method == "HEAD":
        return Response(status_code=200)
    
    # –î–ª—è GET/POST –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –ø–æ–ª–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
    return JSONResponse(content={
        "status": "active",
        "service": "AI Content Generator Bot",
        "version": "3.0",
        "bot_username": BOT_USERNAME,
        "total_users": len(users_db),
        "last_update": bot_stats.get("last_update", "unknown"),
        "endpoints": {
            "health": "/",
            "metrics": "/metrics",
            "webhook": "/webhook"
        }
    })

@app.get("/metrics")
async def metrics():
    # –û–±–Ω–æ–≤–ª—è–µ–º –∑–Ω–∞—á–µ–Ω–∏—è –º–µ—Ç—Ä–∏–∫
    USERS_TOTAL.set(len(users_db))
    ACTIVE_USERS.set(bot_stats["active_today"])
    
    return Response(
        content=generate_latest(),
        media_type=CONTENT_TYPE_LATEST
    )

if __name__ == "__main__":
    port = int(os.environ.get("PORT", 8000))
    uvicorn.run(
        app,
        host="0.0.0.0",
        port=port,
        workers=1,
        loop="asyncio",
        timeout_keep_alive=60
    )
