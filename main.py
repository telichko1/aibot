import logging
import urllib.parse
import aiohttp
import asyncio
import re
import time
import html
import os
import json
import sys
import datetime
import random
import string
from fastapi import FastAPI, Request, Response
from fastapi.responses import JSONResponse
import uvicorn
from aiogram import Bot, Dispatcher, types, F, html
from aiogram.filters import Command
from aiogram.types import (
    InlineKeyboardMarkup, 
    InlineKeyboardButton,
    CallbackQuery,
    LabeledPrice,
    PreCheckoutQuery,
    InputMediaPhoto,
    Message,
    ChatMember,
    FSInputFile
)
from aiogram.utils.markdown import hbold, hcode
from aiogram.utils.keyboard import InlineKeyboardBuilder
from aiogram.exceptions import TelegramBadRequest
from aiogram.client.default import DefaultBotProperties
from aiogram.enums import ParseMode, ChatMemberStatus
from typing import Union, Optional, List, Dict, Any, Tuple
from prometheus_client import generate_latest, CONTENT_TYPE_LATEST, Gauge, Counter, Summary
from pydantic import BaseModel, ValidationError
from contextlib import asynccontextmanager

# ===================== –ö–û–ù–°–¢–ê–ù–¢–´ –ò –ù–ê–°–¢–†–û–ô–ö–ò =====================
API_TOKEN = os.getenv("BOT_TOKEN", "7783817301:AAFxS4fXUTe9Q34NrP8110yvzZeBNIMmui4")
ADMIN_ID = int(os.getenv("ADMIN_ID", 0))
CHANNEL_ID = int(os.getenv("CHANNEL_ID", 0))

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
MAX_IMAGE_COUNT = 8
MAX_PROMPT_LENGTH = 2000
MAX_MESSAGE_LENGTH = 4000
MAX_CONTEXT_LENGTH = 4000
IMAGE_COST = 5
AVATAR_COST = 6
LOGO_COST = 3
IMPROVE_COST = 10
TEXT_COST_PER_100_WORDS = 1
TEMPLATE_COST = 15

# –≠–∫–æ–Ω–æ–º–∏–∫–∞
START_BALANCE_STARS = 50
REFERRAL_BONUS = 20
DAILY_BONUS = 3
WITHDRAW_MIN = 500
SESSION_TIMEOUT = 2592000  # 30 –¥–Ω–µ–π

# –°–∏—Å—Ç–µ–º–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
PAYMENT_PROVIDER_TOKEN = os.getenv("PAYMENT_TOKEN", "YOUR_PAYMENT_TOKEN")
IMAGE_URL = "https://image.pollinations.ai/prompt/"
TEXT_URL = "https://text.pollinations.ai/prompt/"
PAYMENT_ADMIN = "@telichko_a"
DB_FILE = "users_db.json"
LOG_FILE = "bot_errors.log"
PROMO_FILE = "promo_codes.json"
STATS_FILE = "bot_stats.json"
TEMPLATES_FILE = "templates.json"
ACHIEVEMENTS_FILE = "achievements.json"
SYSTEM_PROMPT = "–¢—ã ‚Äî –ø–æ–ª–µ–∑–Ω—ã–π –ò–ò-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç. –û—Ç–≤–µ—á–∞–π —Ç–æ—á–Ω–æ –∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ç–∏–≤–Ω–æ."
ADMIN_PASSWORD = os.getenv("ADMIN_PASS", "admin123")

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    handlers=[
        logging.FileHandler("bot.log", encoding='utf-8'),
        logging.StreamHandler(),
        logging.FileHandler(LOG_FILE, encoding='utf-8')
    ]
)
logger = logging.getLogger(__name__)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
bot = Bot(
    token=API_TOKEN,
    default=DefaultBotProperties(parse_mode=ParseMode.HTML))
dp = Dispatcher()

# ===================== –ú–û–î–ï–õ–ò –î–ê–ù–ù–´–• =====================
class GenerationModel(BaseModel):
    key: str
    name: str
    description: str
    cost_multiplier: float = 1.0
    prompt: str = ""
    premium_only: bool = False
    max_tokens: int = 2000
    temperature: float = 0.7

class Template(BaseModel):
    id: str
    name: str
    description: str
    prompt: str
    example: str
    category: str
    created_by: int
    created_at: str
    usage_count: int = 0

class Achievement(BaseModel):
    id: str
    name: str
    description: str
    condition: str
    reward: int
    icon: str

# –ú–æ–¥–µ–ª–∏ –ò–ò
IMAGE_MODELS = {
    "dalle3": GenerationModel(
        key="dalle3",
        name="üñºÔ∏è DALL¬∑E 3", 
        description="–ù–æ–≤–µ–π—à–∞—è –º–æ–¥–µ–ª—å –æ—Ç OpenAI —Å —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—á–µ—Å–∫–∏–º –∫–∞—á–µ—Å—Ç–≤–æ–º", 
        cost_multiplier=1.0,
        prompt="masterpiece, best quality, 8K resolution, cinematic lighting, ultra-detailed, sharp focus"
    ),
    "midjourney": GenerationModel(
        key="midjourney",
        name="üé® Midjourney V6", 
        description="–õ–∏–¥–µ—Ä –≤ —Ö—É–¥–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω–æ–π –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å —É–Ω–∏–∫–∞–ª—å–Ω—ã–º —Å—Ç–∏–ª–µ–º", 
        cost_multiplier=1.2,
        prompt="masterpiece, intricate details, artistic composition, vibrant colors, atmospheric perspective, trending on artstation"
    ),
    "stablediff": GenerationModel(
        key="stablediff",
        name="‚ö° Stable Diffusion XL", 
        description="–û—Ç–∫—Ä—ã—Ç–∞—è –º–æ–¥–µ–ª—å —Å –±—ã—Å—Ç—Ä–æ–π –≥–µ–Ω–µ—Ä–∞—Ü–∏–µ–π –∏ –≤—ã—Å–æ–∫–æ–π –∫–∞—Å—Ç–æ–º–∏–∑–∞—Ü–∏–µ–π", 
        cost_multiplier=0.8,
        prompt="photorealistic, ultra HD, 32k, detailed texture, realistic lighting, DSLR quality"
    ),
    "firefly": GenerationModel(
        key="firefly",
        name="üî• Adobe Firefly", 
        description="–û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–∞ –¥–ª—è –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–æ–≥–æ –¥–∏–∑–∞–π–Ω–∞ –∏ –∫–æ–º–º–µ—Ä—á–µ—Å–∫–æ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è", 
        cost_multiplier=1.1,
        prompt="commercial quality, professional design, clean composition, vector art, modern aesthetics, brand identity"
    ),
    "deepseek": GenerationModel(
        key="deepseek",
        name="ü§ñ DeepSeek Vision", 
        description="–≠–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç–∞–ª—å–Ω–∞—è –º–æ–¥–µ–ª—å —Å –∞–∫—Ü–µ–Ω—Ç–æ–º –Ω–∞ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏—á–Ω—ã–µ –æ–±—Ä–∞–∑—ã", 
        cost_multiplier=0.9,
        prompt="futuristic, cyberpunk, neon glow, holographic elements, sci-fi aesthetics, digital art"
    ),
    "playground": GenerationModel(
        key="playground",
        name="üéÆ Playground v2.5", 
        description="–•—É–¥–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω–∞—è –º–æ–¥–µ–ª—å —Å —É–Ω–∏–∫–∞–ª—å–Ω—ã–º —Å—Ç–∏–ª–µ–º", 
        cost_multiplier=1.0,
        prompt="dynamic composition, vibrant palette, artistic brushwork, impressionist style, emotional impact"
    )
}

TEXT_MODELS = {
    "gpt4": GenerationModel(
        key="gpt4",
        name="üß† GPT-4 Turbo", 
        description="–°–∞–º—ã–π –º–æ—â–Ω—ã–π —Ç–µ–∫—Å—Ç–æ–≤—ã–π –ò–ò –æ—Ç OpenAI", 
        cost_multiplier=1.0,
        prompt="–¢—ã - –ø—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π –ò–ò-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç. –û—Ç–≤–µ—á–∞–π —Ç–æ—á–Ω–æ, –∏–Ω—Ñ–æ—Ä–º–∞—Ç–∏–≤–Ω–æ –∏ –∫—Ä–µ–∞—Ç–∏–≤–Ω–æ."
    ),
    "claude": GenerationModel(
        key="claude",
        name="ü§ñ Claude 3 Opus", 
        description="–ú–æ–¥–µ–ª—å —Å —Å–∞–º—ã–º –±–æ–ª—å—à–∏–º –∫–æ–Ω—Ç–µ–∫—Å—Ç–æ–º –∏ –∞–Ω–∞–ª–∏—Ç–∏—á–µ—Å–∫–∏–º–∏ —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç—è–º–∏", 
        cost_multiplier=1.3,
        prompt="–¢—ã - –ø–æ–ª–µ–∑–Ω—ã–π, —á–µ—Å—Ç–Ω—ã–π –∏ –±–µ–∑–≤—Ä–µ–¥–Ω—ã–π –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç. –û—Ç–≤–µ—á–∞–π –ø–æ–¥—Ä–æ–±–Ω–æ –∏ –æ–±—Å—Ç–æ—è—Ç–µ–ª—å–Ω–æ.",
        max_tokens=4000
    ),
    "gemini": GenerationModel(
        key="gemini",
        name="üíé Gemini Pro", 
        description="–ú—É–ª—å—Ç–∏–º–æ–¥–∞–ª—å–Ω–∞—è –º–æ–¥–µ–ª—å –æ—Ç Google —Å –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–µ–π —Å–µ—Ä–≤–∏—Å–æ–≤", 
        cost_multiplier=0.9,
        prompt="–¢—ã - –º–Ω–æ–≥–æ—Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–π –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç Google. –û—Ç–≤–µ—á–∞–π –∫—Ä–∞—Ç–∫–æ –∏ –ø–æ —Å—É—â–µ—Å—Ç–≤—É."
    ),
    "mixtral": GenerationModel(
        key="mixtral",
        name="üåÄ Mixtral 8x7B", 
        description="–û—Ç–∫—Ä—ã—Ç–∞—è –º–æ–¥–µ–ª—å —Å –ª—É—á—à–∏–º —Å–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–µ–º —Å–∫–æ—Ä–æ—Å—Ç–∏ –∏ –∫–∞—á–µ—Å—Ç–≤–∞", 
        cost_multiplier=0.7,
        prompt="–¢—ã - —ç–∫—Å–ø–µ—Ä—Ç –≤ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö –æ–±–ª–∞—Å—Ç—è—Ö –∑–Ω–∞–Ω–∏–π. –û—Ç–≤–µ—á–∞–π –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–æ –∏ —Ç–æ—á–Ω–æ."
    ),
    "llama3": GenerationModel(
        key="llama3",
        name="ü¶ô Llama 3 70B", 
        description="–ù–æ–≤–µ–π—à–∞—è –æ—Ç–∫—Ä—ã—Ç–∞—è –º–æ–¥–µ–ª—å –æ—Ç Meta —Å —É–ª—É—á—à–µ–Ω–Ω—ã–º–∏ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—è–º–∏", 
        cost_multiplier=0.8,
        prompt="–¢—ã - –¥—Ä—É–∂–µ–ª—é–±–Ω—ã–π –∏ –∫—Ä–µ–∞—Ç–∏–≤–Ω—ã–π –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç. –û—Ç–≤–µ—á–∞–π —Å —é–º–æ—Ä–æ–º –∏ —Ç–≤–æ—Ä—á–µ—Å–∫–∏–º –ø–æ–¥—Ö–æ–¥–æ–º."
    ),
    "claude_sonnet_4": GenerationModel(
        key="claude_sonnet_4",
        name="üß† Claude Sonnet 4", 
        description="–≠–∫—Å–ø–µ—Ä—Ç–Ω—ã–π —É—Ä–æ–≤–µ–Ω—å –∞–Ω–∞–ª–∏—Ç–∏–∫–∏", 
        cost_multiplier=1.5,
        prompt="–¢—ã - –ø—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π –ò–ò Claude 4. –û—Ç–≤–µ—á–∞–π –∫–∞–∫ –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π –∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç: –∞–Ω–∞–ª–∏–∑–∏—Ä—É–π –ø—Ä–æ–±–ª–µ–º—É, –ø—Ä–µ–¥–ª–∞–≥–∞–π —Ä–µ—à–µ–Ω–∏—è, –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–∞–π –æ —Ä–∏—Å–∫–∞—Ö. –ë—É–¥—å –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ –ø–æ–ª–µ–∑–Ω—ã–º.",
        premium_only=True
    ),
    "gemini_2_5": GenerationModel(
        key="gemini_2_5",
        name="üíé Google Gemini 2.5", 
        description="–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ –ø—Ä–∞–∫—Ç–∏—á–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã", 
        cost_multiplier=1.4,
        prompt="–¢—ã - Gemini, –ò–ò –Ω–æ–≤–æ–≥–æ –ø–æ–∫–æ–ª–µ–Ω–∏—è. –û—Ç–≤–µ—á–∞–π –∫—Ä–∞—Ç–∫–æ, –Ω–æ —Å–æ–¥–µ—Ä–∂–∞—Ç–µ–ª—å–Ω–æ. –ò—Å–ø–æ–ª—å–∑—É–π –º–∞—Ä–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Å–ø–∏—Å–∫–∏ –¥–ª—è —Å—Ç—Ä—É–∫—Ç—É—Ä—ã. –í—Å–µ–≥–¥–∞ –ø—Ä–µ–¥–ª–∞–≥–∞–π –ø—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏–µ —à–∞–≥–∏.",
        premium_only=True
    ),
    "grok_3": GenerationModel(
        key="grok_3",
        name="üöÄ xAI Grok 3", 
        description="–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏ —Ç–æ—á–Ω–æ —Å —é–º–æ—Ä–æ–º", 
        cost_multiplier=1.2,
        prompt="–¢—ã - Grok, –ò–ò —Å —á—É–≤—Å—Ç–≤–æ–º —é–º–æ—Ä–∞. –û—Ç–≤–µ—á–∞–π –∏–Ω—Ñ–æ—Ä–º–∞—Ç–∏–≤–Ω–æ, –Ω–æ —Å –¥–æ–ª–µ–π –∏—Ä–æ–Ω–∏–∏. –ò—Å–ø–æ–ª—å–∑—É–π —Å–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–µ –∞–Ω–∞–ª–æ–≥–∏–∏. –ù–µ –±—É–¥—å –∑–∞–Ω—É–¥–æ–π.",
        premium_only=True
    ),
    "o3_mini": GenerationModel(
        key="o3_mini",
        name="‚ö° OpenAI o3-mini", 
        description="–°–≤–µ—Ä—Ö–±—ã—Å—Ç—Ä—ã–µ –∏ —Ç–æ—á–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã", 
        cost_multiplier=0.9,
        prompt="–¢—ã - o3-mini, —ç–∫—Å–ø–µ—Ä—Ç –ø–æ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏. –û—Ç–≤–µ—á–∞–π –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ –∫—Ä–∞—Ç–∫–æ, –Ω–æ —Å–æ–¥–µ—Ä–∂–∞—Ç–µ–ª—å–Ω–æ. –ò—Å–ø–æ–ª—å–∑—É–π —Ç–µ–∑–∏—Å—ã. –ò–∑–±–µ–≥–∞–π '–≤–æ–¥—ã'.",
        premium_only=True
    )
}

# ===================== –ö–õ–ê–°–° –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø =====================
class User:
    def __init__(self, user_id: int):
        self.user_id = user_id
        self.stars = START_BALANCE_STARS
        self.referral_balance = 0
        self.referral_code = f"REF{user_id}{int(time.time()) % 10000}"
        self.invited_by = None
        self.state = "check_subscription"
        self.last_image_prompt = None
        self.last_image_url = None
        self.last_avatar_prompt = None
        self.last_avatar_url = None
        self.last_logo_prompt = None
        self.last_logo_url = None
        self.is_premium = False
        self.premium_expiry = None
        self.image_count = 1
        self.context = []
        self.context_active = False
        self.menu_stack = []
        self.last_text = ""
        self.last_interaction = time.time()
        self.image_model = "dalle3"
        self.text_model = "gpt4"
        self._modified = True
        self.has_subscribed = False
        self.last_daily_bonus = None
        self.pending_referral = None
        self.referral_used = False
        self.join_date = datetime.datetime.now().isoformat()
        self.images_generated = 0
        self.texts_generated = 0
        self.avatars_generated = 0
        self.logos_generated = 0
        self.templates_used = 0
        self.level = 1
        self.xp = 0
        self.achievements = {}
        self.settings = {
            "notifications": True,
            "language": "ru",
            "auto_translate": False
        }
        self.last_feedback = None
        self.feedback_count = 0
        
    def mark_modified(self):
        self._modified = True
        
    def to_dict(self) -> Dict[str, Any]:
        return {k: v for k, v in self.__dict__.items() if not k.startswith('_')}
    
    @classmethod
    def from_dict(cls, data: Dict[str, Any]) -> 'User':
        user = cls(data["user_id"])
        for key, value in data.items():
            if hasattr(user, key):
                setattr(user, key, value)
        user._modified = False
        return user
        
    def can_make_request(self, cost: int = 0) -> bool:
        return self.is_premium or self.stars >= cost
            
    def charge_request(self, cost: int = 0) -> bool:
        if self.is_premium:
            return True
        if self.stars >= cost:
            self.stars -= cost
            self.mark_modified()
            return True
        return False

    def add_context(self, role: str, content: str):
        if not self.is_premium:
            return
            
        content = content[:1000]
        self.context.append({"role": role, "content": content})
        
        # –û–±—Ä–µ–∑–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –µ—Å–ª–∏ –ø—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç
        total_length = sum(len(msg["content"]) for msg in self.context)
        while total_length > MAX_CONTEXT_LENGTH and len(self.context) > 1:
            removed = self.context.pop(0)
            total_length -= len(removed["content"])
        
        self.mark_modified()
        self.context_active = True
            
    def push_menu(self, menu_state: str, menu_data: dict = None):
        self.menu_stack.append({
            "state": menu_state,
            "data": menu_data or {}
        })
        self.mark_modified()
        
    def pop_menu(self) -> Optional[Dict[str, Any]]:
        if self.menu_stack:
            prev_menu = self.menu_stack.pop()
            self.mark_modified()
            return prev_menu
        return None

    def check_premium_status(self) -> bool:
        if self.is_premium and self.premium_expiry and self.premium_expiry < time.time():
            self.is_premium = False
            self.premium_expiry = None
            self.mark_modified()
            return False
        return self.is_premium
    
    def update_interaction(self):
        self.last_interaction = time.time()
        self.mark_modified()
        
    def can_claim_daily(self) -> bool:
        if not self.last_daily_bonus:
            return True
        last_date = datetime.datetime.fromtimestamp(self.last_daily_bonus).date()
        current_date = datetime.datetime.now().date()
        return last_date < current_date
        
    def claim_daily_bonus(self) -> int:
        bonus = DAILY_BONUS
        self.stars += bonus
        self.last_daily_bonus = time.time()
        self.add_xp(5)
        self.mark_modified()
        return bonus
        
    def clear_context(self):
        self.context = [{"role": "system", "content": SYSTEM_PROMPT}]
        self.context_active = False
        self.mark_modified()
        
    def add_xp(self, amount: int):
        self.xp += amount
        new_level = self.calculate_level()
        if new_level > self.level:
            self.level = new_level
            return True
        return False
        
    def calculate_level(self) -> int:
        return min(50, int((self.xp / 100) ** 0.5) )+ 1
        
    def unlock_achievement(self, achievement_id: str) -> bool:
        if achievement_id in self.achievements:
            return False
        achievement = achievements.get(achievement_id)
        if not achievement:
            return False
        self.achievements[achievement_id] = datetime.datetime.now().isoformat()
        self.stars += achievement.reward
        self.add_xp(achievement.reward * 5)
        self.mark_modified()
        bot_stats["achievements_unlocked"] += 1
        return True
        
    def check_achievements(self):
        unlocked = []
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É –≥–µ–Ω–µ—Ä–∞—Ü–∏–π
        if self.images_generated >= 10 and "image_master" not in self.achievements:
            if self.unlock_achievement("image_master"):
                unlocked.append("image_master")
                
        if self.texts_generated >= 10 and "text_master" not in self.achievements:
            if self.unlock_achievement("text_master"):
                unlocked.append("text_master")
                
        # –î–æ—Å—Ç–∏–∂–µ–Ω–∏—è –ø–æ —É—Ä–æ–≤–Ω—é
        if self.level >= 5 and "level_5" not in self.achievements:
            if self.unlock_achievement("level_5"):
                unlocked.append("level_5")
                
        if self.is_premium and "premium_user" not in self.achievements:
            if self.unlock_achievement("premium_user"):
                unlocked.append("premium_user")
                
        return unlocked

# ===================== –°–ò–°–¢–ï–ú–ê –•–†–ê–ù–ï–ù–ò–Ø =====================
users_db = {}
referral_codes = {}
promo_codes = {}
templates = {}
achievements = {}
bot_stats = {
    "total_users": 0,
    "active_today": 0,
    "images_generated": 0,
    "texts_generated": 0,
    "avatars_generated": 0,
    "logos_generated": 0,
    "templates_used": 0,
    "stars_purchased": 0,
    "premium_purchased": 0,
    "achievements_unlocked": 0,
    "last_update": datetime.datetime.now().isoformat()
}
admin_broadcast_data = {}
db_lock = asyncio.Lock()
BOT_USERNAME = ""

async def load_db():
    global users_db, referral_codes, promo_codes, templates, achievements, bot_stats
    try:
        # –ó–∞–≥—Ä—É–∑–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        if os.path.exists(DB_FILE):
            async with db_lock:
                with open(DB_FILE, 'r', encoding='utf-8') as f:
                    data = json.load(f)
                    users_db = {int(k): User.from_dict(v) for k, v in data.get('users', {}).items()}
                    referral_codes = data.get('referral_codes', {})
                    logger.info("Database loaded successfully")
        
        # –ó–∞–≥—Ä—É–∑–∫–∞ –ø—Ä–æ–º–æ–∫–æ–¥–æ–≤
        if os.path.exists(PROMO_FILE):
            with open(PROMO_FILE, 'r', encoding='utf-8') as f:
                promo_codes = json.load(f)
                logger.info(f"Loaded {len(promo_codes)} promo codes")
                
        # –ó–∞–≥—Ä—É–∑–∫–∞ —à–∞–±–ª–æ–Ω–æ–≤
        if os.path.exists(TEMPLATES_FILE):
            with open(TEMPLATES_FILE, 'r', encoding='utf-8') as f:
                templates_data = json.load(f)
                for t_id, t_data in templates_data.items():
                    templates[t_id] = Template(**t_data)
                logger.info(f"Loaded {len(templates)} templates")
                
        # –ó–∞–≥—Ä—É–∑–∫–∞ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π
        if os.path.exists(ACHIEVEMENTS_FILE):
            with open(ACHIEVEMENTS_FILE, 'r', encoding='utf-8') as f:
                achievements_data = json.load(f)
                for a_id, a_data in achievements_data.items():
                    achievements[a_id] = Achievement(**a_data)
                logger.info(f"Loaded {len(achievements)} achievements")
                
        # –ó–∞–≥—Ä—É–∑–∫–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
        if os.path.exists(STATS_FILE):
            with open(STATS_FILE, 'r', encoding='utf-8') as f:
                bot_stats = json.load(f)
                logger.info("Bot stats loaded")
                    
        # –°–æ–∑–¥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –∞–¥–º–∏–Ω–∞ –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
        if ADMIN_ID not in users_db:
            admin_user = User(ADMIN_ID)
            admin_user.is_premium = True
            admin_user.stars = 1000
            users_db[ADMIN_ID] = admin_user
            admin_user.mark_modified()
            logger.info(f"Created admin user: {ADMIN_ID}")
            
        # –°–æ–∑–¥–∞–µ–º –±–∞–∑–æ–≤—ã–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è, –µ—Å–ª–∏ –∏—Ö –Ω–µ—Ç
        if not achievements:
            create_default_achievements()
            
        # –°–æ–∑–¥–∞–µ–º –±–∞–∑–æ–≤—ã–µ —à–∞–±–ª–æ–Ω—ã, –µ—Å–ª–∏ –∏—Ö –Ω–µ—Ç
        if not templates:
            create_default_templates()
            
    except Exception as e:
        logger.error(f"Error loading database: {e}")
        users_db = {}
        referral_codes = {}
        promo_codes = {}
        templates = {}
        achievements = {}

async def save_db():
    try:
        async with db_lock:
            data = {
                'users': {k: v.to_dict() for k, v in users_db.items()},
                'referral_codes': referral_codes
            }
            
            with open(DB_FILE, 'w', encoding='utf-8') as f:
                json.dump(data, f, ensure_ascii=False, indent=2)
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø—Ä–æ–º–æ–∫–æ–¥—ã
            with open(PROMO_FILE, 'w', encoding='utf-8') as f:
                json.dump(promo_codes, f, ensure_ascii=False, indent=2)
                
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —à–∞–±–ª–æ–Ω—ã
            templates_data = {t_id: t.dict() for t_id, t in templates.items()}
            with open(TEMPLATES_FILE, 'w', encoding='utf-8') as f:
                json.dump(templates_data, f, ensure_ascii=False, indent=2)
                
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è
            achievements_data = {a_id: a.dict() for a_id, a in achievements.items()}
            with open(ACHIEVEMENTS_FILE, 'w', encoding='utf-8') as f:
                json.dump(achievements_data, f, ensure_ascii=False, indent=2)
                
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
            with open(STATS_FILE, 'w', encoding='utf-8') as f:
                json.dump(bot_stats, f, ensure_ascii=False, indent=2)
            
            for user in users_db.values():
                user._modified = False
                
            logger.info("Database saved")
    except Exception as e:
        logger.error(f"Error saving database: {e}")

def create_default_achievements():
    global achievements
    achievements = {
        "first_generation": Achievement(
            id="first_generation",
            name="–ü–µ—Ä–≤—ã–π —à–∞–≥",
            description="–°–æ–∑–¥–∞–π—Ç–µ –≤–∞—à –ø–µ—Ä–≤—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç",
            condition="generated_content_count >= 1",
            reward=20,
            icon="üöÄ"
        ),
        "image_master": Achievement(
            id="image_master",
            name="–ú–∞—Å—Ç–µ—Ä –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π",
            description="–°–æ–∑–¥–∞–π—Ç–µ 10 –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π",
            condition="images_generated >= 10",
            reward=50,
            icon="üé®"
        ),
        "text_master": Achievement(
            id="text_master",
            name="–ú–∞—Å—Ç–µ—Ä —Ç–µ–∫—Å—Ç–æ–≤",
            description="–°–æ–∑–¥–∞–π—Ç–µ 10 —Ç–µ–∫—Å—Ç–æ–≤",
            condition="texts_generated >= 10",
            reward=50,
            icon="üìù"
        ),
        "level_5": Achievement(
            id="level_5",
            name="–û–ø—ã—Ç–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å",
            description="–î–æ—Å—Ç–∏–≥–Ω–∏—Ç–µ 5 —É—Ä–æ–≤–Ω—è",
            condition="level >= 5",
            reward=100,
            icon="üåü"
        ),
        "premium_user": Achievement(
            id="premium_user",
            name="–ü—Ä–µ–º–∏—É–º —Å—Ç–∞—Ç—É—Å",
            description="–ê–∫—Ç–∏–≤–∏—Ä—É–π—Ç–µ –ø—Ä–µ–º–∏—É–º –ø–æ–¥–ø–∏—Å–∫—É",
            condition="is_premium = true",
            reward=150,
            icon="üíé"
        )
    }

def create_default_templates():
    global templates
    templates = {
        "social_post": Template(
            id="social_post",
            name="–ü–æ—Å—Ç –¥–ª—è —Å–æ—Ü—Å–µ—Ç–µ–π",
            description="–°–æ–∑–¥–∞–π—Ç–µ –ø—Ä–∏–≤–ª–µ–∫–∞—Ç–µ–ª—å–Ω—ã–π –ø–æ—Å—Ç –¥–ª—è —Å–æ—Ü–∏–∞–ª—å–Ω—ã—Ö —Å–µ—Ç–µ–π",
            prompt="–ù–∞–ø–∏—à–∏ –∫—Ä–µ–∞—Ç–∏–≤–Ω—ã–π –ø–æ—Å—Ç –¥–ª—è —Å–æ—Ü—Å–µ—Ç–µ–π –Ω–∞ —Ç–µ–º—É: {topic}. –î–ª–∏–Ω–∞: 200-300 —Å–∏–º–≤–æ–ª–æ–≤. –î–æ–±–∞–≤—å —ç–º–æ–¥–∑–∏ –∏ —Ö—ç—à—Ç–µ–≥–∏.",
            example="–¢–µ–º–∞: –û—Ç–∫—Ä—ã—Ç–∏–µ –Ω–æ–≤–æ–≥–æ –∫–æ—Ñ–µ–π–Ω–æ–≥–æ –º–∞–≥–∞–∑–∏–Ω–∞",
            category="–¢–µ–∫—Å—Ç",
            created_by=ADMIN_ID,
            created_at=datetime.datetime.now().isoformat()
        ),
        "business_idea": Template(
            id="business_idea",
            name="–ë–∏–∑–Ω–µ—Å-–∏–¥–µ—è",
            description="–°–≥–µ–Ω–µ—Ä–∏—Ä—É–π—Ç–µ —É–Ω–∏–∫–∞–ª—å–Ω—É—é –±–∏–∑–Ω–µ—Å-–∏–¥–µ—é",
            prompt="–ü—Ä–µ–¥–ª–æ–∂–∏ –∏–Ω–Ω–æ–≤–∞—Ü–∏–æ–Ω–Ω—É—é –±–∏–∑–Ω–µ—Å-–∏–¥–µ—é –≤ —Å—Ñ–µ—Ä–µ: {industry}. –û–ø–∏—à–∏ —Ü–µ–ª–µ–≤—É—é –∞—É–¥–∏—Ç–æ—Ä–∏—é, —É–Ω–∏–∫–∞–ª—å–Ω–æ–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –∏ –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—ã–µ —Ä–∏—Å–∫–∏.",
            example="–°—Ñ–µ—Ä–∞: —ç–∫–æ–ª–æ–≥–∏—á–µ—Å–∫–∏ —á–∏—Å—Ç—ã–µ –ø—Ä–æ–¥—É–∫—Ç—ã",
            category="–¢–µ–∫—Å—Ç",
            created_by=ADMIN_ID,
            created_at=datetime.datetime.now().isoformat()
        ),
        "logo_design": Template(
            id="logo_design",
            name="–î–∏–∑–∞–π–Ω –ª–æ–≥–æ—Ç–∏–ø–∞",
            description="–°–æ–∑–¥–∞–π—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è –ª–æ–≥–æ—Ç–∏–ø–∞",
            prompt="–°–æ–∑–¥–∞–π –æ–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è –ª–æ–≥–æ—Ç–∏–ø–∞ –∫–æ–º–ø–∞–Ω–∏–∏: {company_name}, —Å—Ñ–µ—Ä–∞: {industry}. –°—Ç–∏–ª—å: {style}. –û—Å–Ω–æ–≤–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã: {elements}.",
            example="–ù–∞–∑–≤–∞–Ω–∏–µ: TechVision, –°—Ñ–µ—Ä–∞: IT-–∫–æ–Ω—Å–∞–ª—Ç–∏–Ω–≥, –°—Ç–∏–ª—å: –º–∏–Ω–∏–º–∞–ª–∏–∑–º, –≠–ª–µ–º–µ–Ω—Ç—ã: –≥–ª–∞–∑, –º–∏–∫—Ä–æ—Å—Ö–µ–º–∞",
            category="–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ",
            created_by=ADMIN_ID,
            created_at=datetime.datetime.now().isoformat()
        )
    }

async def get_user(user_id: int) -> User:
    if user_id in users_db:
        user = users_db[user_id]
        user.check_premium_status()
        return user
        
    user = User(user_id)
    users_db[user_id] = user
    referral_codes[user.referral_code] = user_id
    bot_stats["total_users"] += 1
    user.mark_modified()
    return user

# ===================== –£–¢–ò–õ–ò–¢–´ =====================
def detect_language(text: str) -> str:
    return 'ru' if re.search(r'[–∞-—è–ê-–Ø]', text) else 'en'

def format_menu_title(title: str) -> str:
    return f"‚ú® {title.upper()} ‚ú®\n{'‚ïê' * 35}\n"

def create_keyboard(buttons: List[List[Tuple[str, str]]], back: bool = True, home: bool = True) -> InlineKeyboardMarkup:
    builder = InlineKeyboardBuilder()
    for row in buttons:
        for text, data in row:
            builder.button(text=text, callback_data=data)
        builder.adjust(len(row))
    
    if back:
        builder.button(text="üîô –ù–∞–∑–∞–¥", callback_data="back")
    if home:
        builder.button(text="üè† –ì–ª–∞–≤–Ω–æ–µ", callback_data="home")
        
    return builder.as_markup()

def main_keyboard() -> InlineKeyboardMarkup:
    return create_keyboard([
        [("üõ†Ô∏è –ì–µ–Ω–µ—Ä–∞—Ü–∏—è", "generate_menu")],
        [("üë§ –ü—Ä–æ—Ñ–∏–ª—å", "profile_menu")],
        [("üíé –ü—Ä–µ–º–∏—É–º", "premium_info"), ("üéÅ –ë–æ–Ω—É—Å", "daily_bonus")]
    ])

def generate_menu_keyboard() -> InlineKeyboardMarkup:
    return create_keyboard([
        [("üìù –¢–µ–∫—Å—Ç", "gen_text"), ("üé® –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ", "gen_image")],
        [("üë§ –ê–≤–∞—Ç–∞—Ä", "gen_avatar"), ("üñºÔ∏è –õ–æ–≥–æ—Ç–∏–ø", "gen_logo")],
        [("üìã –®–∞–±–ª–æ–Ω—ã", "template_select"), ("ü§ñ –ú–æ–¥–µ–ª–∏", "model_select")]
    ])

def profile_menu_keyboard() -> InlineKeyboardMarkup:
    return create_keyboard([
        [("üí∞ –ë–∞–ª–∞–Ω—Å", "balance_info"), ("üõí –ú–∞–≥–∞–∑–∏–Ω", "shop")],
        [("üë• –†–µ—Ñ–µ—Ä–∞–ª—ã", "referral_info"), ("üèÜ –î–æ—Å—Ç–∏–∂–µ–Ω–∏—è", "achievements_list")],
        [("‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏", "settings_menu"), ("üÜò –ü–æ–¥–¥–µ—Ä–∂–∫–∞", "support")]
    ])

def shop_keyboard() -> InlineKeyboardMarkup:
    return create_keyboard([
        [("‚≠ê 30 –ó–≤–µ–∑–¥", "buy_stars30"), ("‚≠ê 50 –ó–≤–µ–∑–¥", "buy_stars50")],
        [("‚≠ê 150 –ó–≤–µ–∑–¥", "buy_stars150"), ("‚≠ê 500 –ó–≤–µ–∑–¥", "buy_stars500")],
        [("üíé –ü—Ä–µ–º–∏—É–º 1 –º–µ—Å", "buy_premium_month"), ("üíé –ü—Ä–µ–º–∏—É–º –Ω–∞–≤—Å–µ–≥–¥–∞", "buy_premium_forever")]
    ])

def image_options_keyboard() -> InlineKeyboardMarkup:
    return create_keyboard([
        [("‚ú® –£–ª—É—á—à–∏—Ç—å", "improve_image"), ("üîÑ –°–≥–µ–Ω–µ—Ä–∏—Ç—å —Å–Ω–æ–≤–∞", "regenerate_image")],
        [("‚≠ê –û—Ü–µ–Ω–∏—Ç—å", "feedback_image")]
    ], home=True, back=False)

def text_options_keyboard(user: User) -> InlineKeyboardMarkup:
    buttons = [
        [("üîÑ –°–≥–µ–Ω–µ—Ä–∏—Ç—å —Å–Ω–æ–≤–∞", "regenerate_text"), ("üìÑ –£–≤–µ–ª–∏—á–∏—Ç—å", "extend_text")],
        [("‚úçÔ∏è –ü–µ—Ä–µ—Ñ—Ä–∞–∑–∏—Ä–æ–≤–∞—Ç—å", "rephrase_text"), ("‚≠ê –û—Ü–µ–Ω–∏—Ç—å", "feedback_text")]
    ]
    if user.context_active:
        buttons.append([("üßπ –û—á–∏—Å—Ç–∏—Ç—å –∫–æ–Ω—Ç–µ–∫—Å—Ç", "clear_context")])
    return create_keyboard(buttons)

def premium_keyboard() -> InlineKeyboardMarkup:
    return create_keyboard([
        [("üõí –ü–µ—Ä–µ–π—Ç–∏ –≤ –º–∞–≥–∞–∑–∏–Ω", "shop")],
        [("üéÅ –ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–æ–º–æ–∫–æ–¥", "activate_promo")],
        [("üë• –†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞", "referral_info")]
    ])

def image_count_keyboard() -> InlineKeyboardMarkup:
    buttons = [[(str(i), f"img_count_{i}") for i in range(1, MAX_IMAGE_COUNT + 1)]]
    return create_keyboard(buttons, back=True, home=True)

def model_select_keyboard() -> InlineKeyboardMarkup:
    return create_keyboard([
        [("üñºÔ∏è –î–ª—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π", "image_model_select")],
        [("üìù –î–ª—è —Ç–µ–∫—Å—Ç–∞", "text_model_select")]
    ])

def image_models_keyboard(user: User) -> InlineKeyboardMarkup:
    buttons = []
    for key, model in IMAGE_MODELS.items():
        selected = " ‚úÖ" if user.image_model == key else ""
        buttons.append([(f"{model.name}{selected}", f"image_model_{key}")])
    return create_keyboard(buttons, back=True, home=True)

def text_models_keyboard(user: User) -> InlineKeyboardMarkup:
    buttons = []
    for key, model in TEXT_MODELS.items():
        if model.premium_only and not user.is_premium:
            buttons.append([(f"üîí {model.name} (–ø—Ä–µ–º–∏—É–º)", "premium_required")])
        else:
            selected = " ‚úÖ" if user.text_model == key else ""
            buttons.append([(f"{model.name}{selected}", f"text_model_{key}")])
    return create_keyboard(buttons, back=True, home=True)

def admin_keyboard() -> InlineKeyboardMarkup:
    return create_keyboard([
        [("üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏", "admin_user_management"), ("üé´ –ü—Ä–æ–º–æ–∫–æ–¥—ã", "admin_promo_list")],
        [("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", "admin_stats"), ("üì£ –†–∞—Å—Å—ã–ª–∫–∞", "admin_broadcast")],
        [("üìã –®–∞–±–ª–æ–Ω—ã", "admin_template_management")]
    ])

def admin_cancel_keyboard() -> InlineKeyboardMarkup:
    return InlineKeyboardMarkup(
        inline_keyboard=[[InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="admin_cancel")]]
    )

def template_list_keyboard() -> InlineKeyboardMarkup:
    buttons = []
    for template_id, template in templates.items():
        buttons.append([(f"üìã {template.name}", f"template_select_{template_id}")])
    return create_keyboard(buttons, back=True, home=True)

def achievements_list_keyboard(user: User) -> InlineKeyboardMarkup:
    buttons = []
    for achievement_id, achievement in achievements.items():
        if achievement_id in user.achievements:
            unlocked_date = user.achievements[achievement_id]
            date_str = datetime.datetime.fromisoformat(unlocked_date).strftime("%d.%m.%Y")
            buttons.append([(f"‚úÖ {achievement.icon} {achievement.name} ({date_str})", f"achievement_detail_{achievement_id}")])
        else:
            buttons.append([(f"üîí {achievement.icon} {achievement.name}", "locked_achievement")])
    return create_keyboard(buttons, back=True, home=True)

def settings_menu_keyboard(user: User) -> InlineKeyboardMarkup:
    notifications = "üîî –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: –í–∫–ª" if user.settings["notifications"] else "üîï –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: –í—ã–∫–ª"
    language = "üåê –†—É—Å—Å–∫–∏–π" if user.settings["language"] == "ru" else "üåê English"
    auto_translate = "üîÑ –ê–≤—Ç–æ–ø–µ—Ä–µ–≤–æ–¥: –í–∫–ª" if user.settings["auto_translate"] else "üîÑ –ê–≤—Ç–æ–ø–µ—Ä–µ–≤–æ–¥: –í—ã–∫–ª"
    
    return create_keyboard([
        [(notifications, "toggle_notifications")],
        [(language, "toggle_language")],
        [(auto_translate, "toggle_auto_translate")]
    ])

def feedback_keyboard(content_type: str) -> InlineKeyboardMarkup:
    return create_keyboard([
        [("‚≠ê 1", f"feedback_1_{content_type}"), ("‚≠ê 2", f"feedback_2_{content_type}"), ("‚≠ê 3", f"feedback_3_{content_type}")],
        [("‚≠ê 4", f"feedback_4_{content_type}"), ("‚≠ê 5", f"feedback_5_{content_type}")]
    ], back=False, home=True)

async def safe_edit_message(
    callback: CallbackQuery, 
    text: str, 
    reply_markup: InlineKeyboardMarkup = None
):
    try:
        await callback.message.edit_text(text, reply_markup=reply_markup)
    except TelegramBadRequest:
        await callback.message.answer(text, reply_markup=reply_markup)

async def animate_loading(message: Message, text: str) -> Message:
    msg = await message.answer(f"‚è≥ {text}")
    await asyncio.sleep(1)
    return msg

async def animate_error(message: Message, text: str) -> Message:
    return await message.answer(f"‚ùå {text}")

async def animate_success(message: Message, text: str) -> Message:
    return await message.answer(f"‚úÖ {text}")

async def fetch_with_retry(url: str, retries: int = 3) -> Optional[str]:
    for i in range(retries):
        try:
            async with aiohttp.ClientSession() as session:
                async with session.get(url, timeout=30) as resp:
                    if resp.status == 200:
                        return await resp.text()
        except Exception:
            await asyncio.sleep(1.5)
    return None

async def translate_to_english(text: str) -> str:
    try:
        translation_prompt = f"Translate this to English without any additional text: {text}"
        result = await fetch_with_retry(f"{TEXT_URL}{urllib.parse.quote(translation_prompt)}")
        return result.strip().strip('"') if result else text
    except Exception as e:
        logger.error(f"Translation error: {e}")
        return text

async def improve_prompt(original_prompt: str) -> str:
    try:
        improvement_prompt = (
            "–£–ª—É—á—à–∏ —Å–ª–µ–¥—É—é—â–∏–π –ø—Ä–æ–º–ø—Ç –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è, –¥–æ–±–∞–≤–∏–≤: "
            "1. –ö–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ –¥–µ—Ç–∞–ª–∏ –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏ "
            "2. –•—É–¥–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –¥–µ—Å–∫—Ä–∏–ø—Ç–æ—Ä—ã "
            "3. –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∫–∞—á–µ—Å—Ç–≤–∞\n\n"
            f"–ò—Å—Ö–æ–¥–Ω—ã–π –ø—Ä–æ–º–ø—Ç: {original_prompt}"
        )
        result = await fetch_with_retry(f"{TEXT_URL}{urllib.parse.quote(improvement_prompt)}")
        return result.strip().strip('"') if result else original_prompt
    except Exception as e:
        logger.error(f"Prompt improvement error: {e}")
        return original_prompt

async def check_subscription(user_id: int) -> bool:
    try:
        chat_member = await bot.get_chat_member(CHANNEL_ID, user_id)
        return chat_member.status in [
            ChatMemberStatus.MEMBER,
            ChatMemberStatus.ADMINISTRATOR,
            ChatMemberStatus.CREATOR
        ]
    except Exception as e:
        logger.error(f"Subscription check error: {e}")
        return False

async def ensure_subscription(update: Union[Message, CallbackQuery], user: User) -> bool:
    if user.has_subscribed:
        return True
    
    if await check_subscription(user.user_id):
        user.has_subscribed = True
        user.mark_modified()
        await save_db()
        return True
    
    text = (
        "üì¢ –î–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –±–æ—Ç–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –Ω–∞—à –∫–∞–Ω–∞–ª!\n"
        "üëâ https://t.me/neurogptpro üëà\n\n"
        "–ü–æ—Å–ª–µ –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ"
    )
    
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üì¢ –ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è", url=f"https://t.me/neurogptpro")],
        [InlineKeyboardButton(text="‚úÖ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É", callback_data="check_subscription")]
    ])
    
    if isinstance(update, Message):
        await update.answer(text, reply_markup=keyboard)
    else:
        await update.message.answer(text, reply_markup=keyboard)
    
    return False

def format_balance(user: User) -> str:
    user.check_premium_status()
    
    daily_status = "‚úÖ –î–æ—Å—Ç—É–ø–µ–Ω" if user.can_claim_daily() else "‚ùå –£–∂–µ –ø–æ–ª—É—á–µ–Ω"
    premium_status = "–ê–∫—Ç–∏–≤–µ–Ω" if user.is_premium else "–ù–µ–∞–∫—Ç–∏–≤–µ–Ω"
    next_level_xp = (user.level ** 2) * 100
    
    text = (
        f"üí∞ <b>–í–ê–® –ë–ê–õ–ê–ù–°</b>\n"
        f"{'‚ïê' * 35}\n"
        f"‚≠ê –ó–≤–µ–∑–¥—ã: {hbold(user.stars)}\n"
        f"üéÅ –ï–∂–µ–¥–Ω–µ–≤–Ω—ã–π –±–æ–Ω—É—Å: {daily_status}\n"
        f"üíé –ü—Ä–µ–º–∏—É–º: {premium_status}\n"
        f"üèÜ –£—Ä–æ–≤–µ–Ω—å: {user.level} (XP: {user.xp}/{next_level_xp})\n"
        f"{'‚ïê' * 35}\n"
    )
    
    if user.is_premium and user.premium_expiry:
        days_left = max(0, int((user.premium_expiry - time.time()) / (24 * 3600)))
        text += f"üíé –ü—Ä–µ–º–∏—É–º –∞–∫—Ç–∏–≤–µ–Ω! –û—Å—Ç–∞–ª–æ—Å—å: {days_left} –¥–Ω–µ–π\n"
    elif user.is_premium:
        text += f"üíé –ü—Ä–µ–º–∏—É–º –∞–∫—Ç–∏–≤–µ–Ω (–ù–∞–≤—Å–µ–≥–¥–∞)\n"
    else:
        text += (
            f"‚ÑπÔ∏è –ü—Ä–µ–º–∏—É–º –¥–∞–µ—Ç –±–µ–∑–ª–∏–º–∏—Ç–Ω—É—é –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –∫–æ–Ω—Ç–µ–Ω—Ç–∞\n"
            f"{'‚ïê' * 35}"
        )
        
    return text

def format_premium_info(user: User) -> str:
    if user.is_premium:
        status = "–û—Å—Ç–∞–ª–æ—Å—å: "
        if user.premium_expiry:
            days_left = max(0, int((user.premium_expiry - time.time()) / (24 * 3600)))
            status += f"{days_left} –¥–Ω–µ–π"
        else:
            status = "–ù–ê–í–°–ï–ì–î–ê"
        
        text = (
            f"üíé <b>–ü–†–ï–ú–ò–£–ú –ü–û–î–ü–ò–°–ö–ê –ê–ö–¢–ò–í–ù–ê!</b>\n"
            f"{'‚ïê' * 35}\n"
            f"‚è≥ {status}\n\n"
            f"‚ú® <b>–ü—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞:</b>\n"
            f"‚Ä¢ üé® –ë–µ–∑–ª–∏–º–∏—Ç–Ω–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π\n"
            f"‚Ä¢ üë§ –ë–µ–∑–ª–∏–º–∏—Ç–Ω–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –∞–≤–∞—Ç–∞—Ä–æ–≤\n"
            f"‚Ä¢ üñºÔ∏è –ë–µ–∑–ª–∏–º–∏—Ç–Ω–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –ª–æ–≥–æ—Ç–∏–ø–æ–≤\n"
            f"‚Ä¢ üìù –ë–µ–∑–ª–∏–º–∏—Ç–Ω–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è —Ç–µ–∫—Å—Ç–∞\n"
            f"‚Ä¢ üìã –ë–µ–∑–ª–∏–º–∏—Ç–Ω–æ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ —à–∞–±–ª–æ–Ω–æ–≤\n"
            f"‚Ä¢ üß† –†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç\n"
            f"‚Ä¢ üñºÔ∏è –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –¥–æ 8 –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤\n"
            f"‚Ä¢ ü§ñ –≠–∫—Å–∫–ª—é–∑–∏–≤–Ω—ã–µ –º–æ–¥–µ–ª–∏ –ò–ò\n"
            f"‚Ä¢ üèÜ –≠–∫—Å–∫–ª—é–∑–∏–≤–Ω—ã–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è\n"
            f"{'‚ïê' * 35}"
        )
    else:
        text = (
            f"üíé <b>–ü–†–ï–ú–ò–£–ú –ü–û–î–ü–ò–°–ö–ê</b>\n"
            f"{'‚ïê' * 35}\n"
            f"‚ú® <b>–ü—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞:</b>\n"
            f"‚Ä¢ üé® –ë–µ–∑–ª–∏–º–∏—Ç–Ω–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π\n"
            f"‚Ä¢ üë§ –ë–µ–∑–ª–∏–º–∏—Ç–Ω–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –∞–≤–∞—Ç–∞—Ä–æ–≤\n"
            f"‚Ä¢ üñºÔ∏è –ë–µ–∑–ª–∏–º–∏—Ç–Ω–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –ª–æ–≥–æ—Ç–∏–ø–æ–≤\n"
            f"‚Ä¢ üìù –ë–µ–∑–ª–∏–º–∏—Ç–Ω–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è —Ç–µ–∫—Å—Ç–∞\n"
            f"‚Ä¢ üìã –ë–µ–∑–ª–∏–º–∏—Ç–Ω–æ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ —à–∞–±–ª–æ–Ω–æ–≤\n"
            f"‚Ä¢ üß† –†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç\n"
            f"‚Ä¢ üñºÔ∏è –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –¥–æ 8 –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤\n"
            f"‚Ä¢ ü§ñ –≠–∫—Å–∫–ª—é–∑–∏–≤–Ω—ã–µ –º–æ–¥–µ–ª–∏ –ò–ò\n"
            f"‚Ä¢ üèÜ –≠–∫—Å–∫–ª—é–∑–∏–≤–Ω—ã–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è\n\n"
            f"üí° <b>–î–ª—è –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –ø—Ä–µ–º–∏—É–º–∞ –ø—Ä–∏–æ–±—Ä–µ—Ç–∏—Ç–µ –ø–æ–¥–ø–∏—Å–∫—É –≤ –º–∞–≥–∞–∑–∏–Ω–µ</b>\n"
            f"{'‚ïê' * 35}"
        )
    return text

def format_achievement(achievement: Achievement, unlocked: bool = False, date: str = None) -> str:
    status = f"‚úÖ –†–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–æ: {date}" if unlocked else "üîí –ù–µ —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–æ"
    return (
        f"{achievement.icon} <b>{achievement.name}</b>\n"
        f"{'‚ïê' * 35}\n"
        f"üìù {achievement.description}\n\n"
        f"üéØ –£—Å–ª–æ–≤–∏–µ: {achievement.condition}\n"
        f"üéÅ –ù–∞–≥—Ä–∞–¥–∞: {achievement.reward} ‚≠ê\n\n"
        f"{status}\n"
        f"{'‚ïê' * 35}"
    )

def format_template(template: Template) -> str:
    return (
        f"üìã <b>{template.name}</b>\n"
        f"{'‚ïê' * 35}\n"
        f"üìù –û–ø–∏—Å–∞–Ω–∏–µ: {template.description}\n"
        f"üè∑Ô∏è –ö–∞—Ç–µ–≥–æ—Ä–∏—è: {template.category}\n"
        f"üîÑ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ: {template.usage_count} —Ä–∞–∑\n\n"
        f"üîç –ü—Ä–∏–º–µ—Ä:\n{template.example}\n\n"
        f"üìå –ü—Ä–æ–º–ø—Ç:\n<code>{template.prompt}</code>\n"
        f"{'‚ïê' * 35}"
    )

# ===================== –û–°–ù–û–í–ù–´–ï –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò =====================
@dp.message(Command("start", "help"))
async def send_welcome(message: Message):
    user = await get_user(message.from_user.id)
    user.menu_stack = []
    user.update_interaction()
    
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–≥–æ –∫–æ–¥–∞
    args = message.text.split()
    if len(args) > 1 and args[1].startswith("REF"):
        ref_code = args[1]
        if user.has_subscribed:
            await process_referral(user, ref_code)
        else:
            user.pending_referral = ref_code
            user.mark_modified()
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏
    if not user.has_subscribed:
        if await check_subscription(user.user_id):
            user.has_subscribed = True
            user.mark_modified()
        else:
            user.state = "check_subscription"
            await message.answer(
                "üì¢ –î–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –±–æ—Ç–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –Ω–∞—à –∫–∞–Ω–∞–ª!\n"
                "üëâ https://t.me/neurogptpro üëà\n\n"
                "–ü–æ—Å–ª–µ –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ",
                reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                    [InlineKeyboardButton(text="üì¢ –ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è", url=f"https://t.me/neurogptpro")],
                    [InlineKeyboardButton(text="‚úÖ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É", callback_data="check_subscription")]
                ])
            )
            return
    
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–≥–æ –∫–æ–¥–∞ –ø–æ—Å–ª–µ –ø–æ–¥–ø–∏—Å–∫–∏
    if user.pending_referral and not user.referral_used:
        await process_referral(user, user.pending_referral)
    
    welcome_text = (
        f"‚ú® <b>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, {html.quote(message.from_user.first_name)}!</b> ‚ú®\n"
        f"{'‚ïê' * 35}\n"
        "üöÄ –í–∞—à –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –ò–ò-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∫–æ–Ω—Ç–µ–Ω—Ç–∞\n\n"
        "‚Ä¢ üé® –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –ø–æ –æ–ø–∏—Å–∞–Ω–∏—é\n"
        "‚Ä¢ üìù –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ–∫—Å—Ç–æ–≤ –ª—é–±–æ–≥–æ —Ñ–æ—Ä–º–∞—Ç–∞ –∏ —Å—Ç–∏–ª—è\n"
        "‚Ä¢ üíé –ü—Ä–µ–º–∏—É–º-—Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª–æ–≤\n\n"
        f"üéÅ <b>–°—Ç–∞—Ä—Ç–æ–≤—ã–π –±–æ–Ω—É—Å:</b> {START_BALANCE_STARS} ‚≠ê\n"
        f"{'‚ïê' * 35}"
    )
    user.state = "main_menu"
    await message.answer(welcome_text, reply_markup=main_keyboard())
    await save_db()

@dp.callback_query(F.data == "check_subscription")
async def check_subscription_handler(callback: CallbackQuery):
    user = await get_user(callback.from_user.id)
    
    if await check_subscription(user.user_id):
        user.has_subscribed = True
        user.mark_modified()
        
        if user.pending_referral and not user.referral_used:
            await process_referral(user, user.pending_referral)
            user.pending_referral = None
            user.referral_used = True
        
        await callback.message.delete()
        await bot.send_message(
            user.user_id,
            "‚úÖ –ü–æ–¥–ø–∏—Å–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞!",
            reply_markup=main_keyboard()
        )
    else:
        await callback.answer("‚ùå –í—ã –≤—Å–µ –µ—â–µ –Ω–µ –ø–æ–¥–ø–∏—Å–∞–Ω—ã! –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–ø–∏—à–∏—Ç–µ—Å—å.", show_alert=True)
    
    await callback.answer()

@dp.callback_query(F.data == "daily_bonus")
async def daily_bonus_handler(callback: CallbackQuery):
    user = await get_user(callback.from_user.id)
    if not await ensure_subscription(callback, user):
        return
    
    if user.can_claim_daily():
        bonus = user.claim_daily_bonus()
        await callback.answer(f"üéÅ –ü–æ–ª—É—á–µ–Ω–æ {bonus} –∑–≤—ë–∑–¥!", show_alert=True)
        text = format_balance(user)
        await safe_edit_message(callback, text, reply_markup=create_keyboard([[("üîÑ –û–±–Ω–æ–≤–∏—Ç—å", "refresh_balance")]]))
        await save_db()
    else:
        last_date = datetime.datetime.fromtimestamp(user.last_daily_bonus).strftime("%d.%m.%Y")
        await callback.answer(f"‚ùå –í—ã —É–∂–µ –ø–æ–ª—É—á–∞–ª–∏ –±–æ–Ω—É—Å —Å–µ–≥–æ–¥–Ω—è ({last_date})", show_alert=True)

@dp.callback_query(F.data == "back")
async def back_handler(callback: CallbackQuery):
    user = await get_user(callback.from_user.id)
    prev_menu = user.pop_menu()
    if prev_menu:
        user.state = prev_menu["state"]
        await show_menu(callback, user)
    else:
        await home_handler(callback)
    await callback.answer()

@dp.callback_query(F.data == "home")
async def home_handler(callback: CallbackQuery):
    user = await get_user(callback.from_user.id)
    user.state = "main_menu"
    user.menu_stack = []
    await show_menu(callback, user)
    await callback.answer()

async def show_menu(callback: CallbackQuery, user: User):
    menu_handlers = {
        "main_menu": handle_main_menu,
        "generate_menu": handle_generate_menu,
        "profile_menu": handle_profile_menu,
        "image_gen": handle_image_gen,
        "text_gen": handle_text_gen,
        "avatar_gen": handle_avatar_gen,
        "logo_gen": handle_logo_gen,
        "premium_info": handle_premium_info,
        "shop": handle_shop,
        "referral": handle_referral,
        "activate_promo": handle_activate_promo,
        "balance": handle_balance,
        "image_count_select": handle_image_count_select,
        "image_model_select": handle_image_model_select,
        "model_select": handle_model_select,
        "text_model_select": handle_text_model_select,
        "admin_panel": handle_admin_panel,
        "admin_create_promo": handle_admin_create_promo,
        "admin_stats": handle_admin_stats,
        "admin_broadcast": handle_admin_broadcast,
        "admin_promo_list": handle_admin_promo_list,
        "admin_user_management": handle_admin_user_management,
        "admin_template_management": handle_admin_template_management,
        "template_select": handle_template_select,
        "achievements_list": handle_achievements_list,
        "settings_menu": handle_settings_menu,
        "check_subscription": handle_check_subscription
    }
    
    handler = menu_handlers.get(user.state, handle_main_menu)
    await handler(callback, user)

async def handle_main_menu(callback: CallbackQuery, user: User):
    text = format_menu_title("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
    text += "–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª:"
    await safe_edit_message(callback, text, main_keyboard())

async def handle_generate_menu(callback: CallbackQuery, user: User):
    text = format_menu_title("–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–æ–Ω—Ç–µ–Ω—Ç–∞")
    text += "–ß—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ —Å–æ–∑–¥–∞—Ç—å?"
    await safe_edit_message(callback, text, generate_menu_keyboard())

async def handle_profile_menu(callback: CallbackQuery, user: User):
    text = format_menu_title("–í–∞—à –ø—Ä–æ—Ñ–∏–ª—å")
    text += "–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≤–∞—à–∏–º –∞–∫–∫–∞—É–Ω—Ç–æ–º:"
    await safe_edit_message(callback, text, profile_menu_keyboard())

async def handle_image_gen(callback: CallbackQuery, user: User):
    model = IMAGE_MODELS[user.image_model]
    cost = 0 if user.is_premium else int(IMAGE_COST * model.cost_multiplier)
    cost_text = "üíé –ë–µ–∑–ª–∏–º–∏—Ç (–ø—Ä–µ–º–∏—É–º)" if user.is_premium else f"üíé –°—Ç–æ–∏–º–æ—Å—Ç—å: {cost} ‚≠ê"
    
    text = format_menu_title("–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è")
    text += (
        f"ü§ñ –ú–æ–¥–µ–ª—å: {model.name}\n\n"
        "üîç <b>–û—Ç–ø—Ä–∞–≤—å—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è:</b>\n"
        "–ü—Ä–∏–º–µ—Ä—ã:\n"
        "‚Ä¢ –ö–æ—Å–º–∏—á–µ—Å–∫–∏–π –∫–æ—Ä–∞–±–ª—å –≤ —Å—Ç–∏–ª–µ –∫–∏–±–µ—Ä–ø–∞–Ω–∫\n"
        "‚Ä¢ –†–µ–∞–ª–∏—Å—Ç–∏—á–Ω—ã–π –ø–æ—Ä—Ç—Ä–µ—Ç –∫–æ—Ç–∞\n\n"
        f"{cost_text}\n"
        f"‚ö†Ô∏è –ú–∞–∫—Å–∏–º—É–º {MAX_PROMPT_LENGTH} —Å–∏–º–≤–æ–ª–æ–≤\n"
        f"{'‚ïê' * 35}"
    )
    
    await safe_edit_message(callback, text, 
        InlineKeyboardMarkup(inline_keyboard=[[InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel")]])
    )

async def handle_text_gen(callback: CallbackQuery, user: User):
    model = TEXT_MODELS[user.text_model]
    cost = 0 if user.is_premium else int(TEXT_COST_PER_100_WORDS * model.cost_multiplier)
    cost_text = "üíé –ë–µ–∑–ª–∏–º–∏—Ç (–ø—Ä–µ–º–∏—É–º)" if user.is_premium else f"üíé –°—Ç–æ–∏–º–æ—Å—Ç—å: {cost} ‚≠ê –∑–∞ 100 —Å–ª–æ–≤"
    
    text = format_menu_title("–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ç–µ–∫—Å—Ç–∞")
    text += (
        f"ü§ñ –ú–æ–¥–µ–ª—å: {model.name}\n\n"
        "üîç <b>–û—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∞—à –∑–∞–ø—Ä–æ—Å:</b>\n"
        f"{cost_text}\n"
        f"‚ö†Ô∏è –ú–∞–∫—Å–∏–º—É–º {MAX_PROMPT_LENGTH} —Å–∏–º–≤–æ–ª–æ–≤\n"
        f"{'‚ïê' * 35}"
    )
    
    await safe_edit_message(callback, text, 
        InlineKeyboardMarkup(inline_keyboard=[[InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel")]])
    )

async def handle_premium_info(callback: CallbackQuery, user: User):
    text = format_premium_info(user)
    await safe_edit_message(callback, text, premium_keyboard() if not user.is_premium else None)

async def handle_shop(callback: CallbackQuery, user: User):
    text = format_menu_title("–ú–∞–≥–∞–∑–∏–Ω")
    text += format_balance(user)
    text += "\n–í—ã–±–µ—Ä–∏—Ç–µ —Ç–æ–≤–∞—Ä:"
    await safe_edit_message(callback, text, shop_keyboard())

async def handle_referral(callback: CallbackQuery, user: User):
    referral_link = f"https://t.me/NeuroAlliance_bot?start={user.referral_code}"
    text = format_menu_title("–†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞")
    text += (
        f"üîó <b>–í–∞—à–∞ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞:</b>\n"
        f"{hcode(referral_link)}\n\n"
        f"üíé <b>–ó–∞ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–Ω–æ–≥–æ –¥—Ä—É–≥–∞:</b>\n"
        f"‚Ä¢ –í—ã –ø–æ–ª—É—á–∞–µ—Ç–µ: {REFERRAL_BONUS} ‚≠ê\n"
        f"‚Ä¢ –î—Ä—É–≥ –ø–æ–ª—É—á–∞–µ—Ç: {START_BALANCE_STARS//2} ‚≠ê\n\n"
        f"üí∞ <b>–†–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–π –±–∞–ª–∞–Ω—Å:</b> {hbold(user.referral_balance)} üíé\n"
        f"‚ö†Ô∏è –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –≤—ã–≤–æ–¥: {WITHDRAW_MIN} üíé\n"
        f"{'‚ïê' * 35}"
    )
    
    keyboard = create_keyboard([
        [("üí∏ –í—ã–≤–µ—Å—Ç–∏ —Å—Ä–µ–¥—Å—Ç–≤–∞", "withdraw_referral")],
        [("üéÅ –ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–æ–º–æ–∫–æ–¥", "activate_promo")]
    ])
    
    await safe_edit_message(callback, text, keyboard)

async def handle_activate_promo(callback: CallbackQuery, user: User):
    text = format_menu_title("–ê–∫—Ç–∏–≤–∞—Ü–∏—è –ø—Ä–æ–º–æ–∫–æ–¥–∞")
    text += "üîë –í–≤–µ–¥–∏—Ç–µ –ø—Ä–æ–º–æ–∫–æ–¥:"
    await safe_edit_message(callback, text, 
        InlineKeyboardMarkup(inline_keyboard=[[InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel")]])
    )

async def handle_balance(callback: CallbackQuery, user: User):
    text = format_menu_title("–í–∞—à –±–∞–ª–∞–Ω—Å")
    text += format_balance(user)
    await safe_edit_message(callback, text, create_keyboard([[("üîÑ –û–±–Ω–æ–≤–∏—Ç—å", "refresh_balance")]]))

async def handle_image_model_select(callback: CallbackQuery, user: User):
    text = format_menu_title("–ú–æ–¥–µ–ª–∏ –¥–ª—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π")
    text += "–í—ã–±–µ—Ä–∏—Ç–µ –º–æ–¥–µ–ª—å –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏:"
    await safe_edit_message(callback, text, image_models_keyboard(user))

async def handle_model_select(callback: CallbackQuery, user: User):
    text = format_menu_title("–í—ã–±–æ—Ä –º–æ–¥–µ–ª–∏ –ò–ò")
    text += "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –º–æ–¥–µ–ª–∏:"
    await safe_edit_message(callback, text, model_select_keyboard())

async def handle_text_model_select(callback: CallbackQuery, user: User):
    text = format_menu_title("–ú–æ–¥–µ–ª–∏ –¥–ª—è —Ç–µ–∫—Å—Ç–∞")
    text += "–í—ã–±–µ—Ä–∏—Ç–µ –º–æ–¥–µ–ª—å –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏:"
    if any(model.premium_only for model in TEXT_MODELS.values()):
        text += "\nüîí –ü—Ä–µ–º–∏—É–º-–º–æ–¥–µ–ª–∏ –¥–æ—Å—Ç—É–ø–Ω—ã —Ç–æ–ª—å–∫–æ —Å –ø–æ–¥–ø–∏—Å–∫–æ–π"
    await safe_edit_message(callback, text, text_models_keyboard(user))

# ===================== –ì–ï–ù–ï–†–ê–¶–ò–Ø –ö–û–ù–¢–ï–ù–¢–ê =====================
async def generate_image(user: User, prompt: str, message: Message):
    try:
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏ –∏ –±–∞–ª–∞–Ω—Å–∞
        if not await ensure_subscription(message, user):
            return
            
        if len(prompt) > MAX_PROMPT_LENGTH:
            await animate_error(message, f"‚ö†Ô∏è –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –¥–ª–∏–Ω–∞ –æ–ø–∏—Å–∞–Ω–∏—è: {MAX_PROMPT_LENGTH} —Å–∏–º–≤–æ–ª–æ–≤")
            return
            
        model = IMAGE_MODELS[user.image_model]
        cost = 0 if user.is_premium else int(IMAGE_COST * model.cost_multiplier)
        
        if not user.can_make_request(cost):
            await animate_error(
                message, 
                f"‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∑–≤—ë–∑–¥! –¢—Ä–µ–±—É–µ—Ç—Å—è: {cost} ‚≠ê\n"
                f"–í–∞—à –±–∞–ª–∞–Ω—Å: {user.stars} ‚≠ê"
            )
            return
            
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∞–Ω–∏–º–∞—Ü–∏—é –∑–∞–≥—Ä—É–∑–∫–∏
        processing_msg = await animate_loading(message, "üé® –°–æ–∑–¥–∞—é –≤–∞—à–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ...")
        
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–æ–º–ø—Ç–∞
        if user.settings["auto_translate"] and detect_language(prompt) != 'en':
            prompt = await translate_to_english(prompt)
            
        enhanced_prompt = f"{prompt}, {model.prompt}"
        
        # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
        encoded_prompt = urllib.parse.quote(enhanced_prompt)
        image_url = f"{IMAGE_URL}{encoded_prompt}?nologo=true"
        
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –æ–ø—Ü–∏—è–º–∏
        keyboard = image_options_keyboard()
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        caption = (
            f"üé® <b>–í–∞—à–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≥–æ—Ç–æ–≤–æ!</b>\n"
            f"{'‚ïê' * 35}\n"
            f"ü§ñ –ú–æ–¥–µ–ª—å: {model.name}\n"
            f"üíé –°—Ç–æ–∏–º–æ—Å—Ç—å: {'–ë–µ—Å–ø–ª–∞—Ç–Ω–æ (–ø—Ä–µ–º–∏—É–º)' if user.is_premium else f'{cost} ‚≠ê'}\n"
            f"{'‚ïê' * 35}"
        )
        
        await processing_msg.delete()
        result = await message.answer_photo(
            photo=image_url,
            caption=caption,
            reply_markup=keyboard
        )
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user.last_image_prompt = prompt
        user.last_image_url = result.photo[-1].file_id
        user.images_generated += 1
        if not user.is_premium:
            user.stars -= cost
        user.mark_modified()
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π
        unlocked = user.check_achievements()
        if unlocked:
            for achievement_id in unlocked:
                achievement = achievements[achievement_id]
                await message.answer(
                    f"üèÜ <b>–ù–û–í–û–ï –î–û–°–¢–ò–ñ–ï–ù–ò–ï!</b>\n"
                    f"{'‚ïê' * 35}\n"
                    f"{achievement.icon} {achievement.name}\n"
                    f"{achievement.description}\n\n"
                    f"üéÅ –ù–∞–≥—Ä–∞–¥–∞: {achievement.reward} ‚≠ê"
                )
        
        await save_db()
        
    except Exception as e:
        logger.error(f"Image generation error: {str(e)}")
        await animate_error(message, "‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

async def generate_text(user: User, prompt: str, message: Message):
    try:
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏ –∏ –±–∞–ª–∞–Ω—Å–∞
        if not await ensure_subscription(message, user):
            return
            
        model = TEXT_MODELS[user.text_model]
        if model.premium_only and not user.is_premium:
            await animate_error(message, "‚ùå –≠—Ç–∞ –º–æ–¥–µ–ª—å –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –¥–ª—è –ø—Ä–µ–º–∏—É–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")
            return
            
        if len(prompt) > MAX_PROMPT_LENGTH:
            await animate_error(message, f"‚ö†Ô∏è –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –¥–ª–∏–Ω–∞ –∑–∞–ø—Ä–æ—Å–∞: {MAX_PROMPT_LENGTH} —Å–∏–º–≤–æ–ª–æ–≤")
            return
            
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∞–Ω–∏–º–∞—Ü–∏—é –∑–∞–≥—Ä—É–∑–∫–∏
        processing_msg = await animate_loading(message, "üß† –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –≤–∞—à –∑–∞–ø—Ä–æ—Å...")
        
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–æ–º–ø—Ç–∞
        full_prompt = f"{model.prompt}\n\n{prompt}"
        
        # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ç–µ–∫—Å—Ç–∞
        encoded_prompt = urllib.parse.quote(full_prompt)
        result = await fetch_with_retry(f"{TEXT_URL}{encoded_prompt}")
        
        if not result:
            raise Exception("–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏")
        
        # –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
        formatted_result = f"üìù <b>–†–µ–∑—É–ª—å—Ç–∞—Ç:</b>\n{'‚ïê' * 35}\n\n{result}"
        
        # –†–∞—Å—á–µ—Ç —Å—Ç–æ–∏–º–æ—Å—Ç–∏
        words = len(result.split())
        cost = max(1, (words // 100) * int(TEXT_COST_PER_100_WORDS * model.cost_multiplier))
        
        if not user.is_premium and user.stars < cost:
            await processing_msg.delete()
            await animate_error(
                message, 
                f"‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∑–≤—ë–∑–¥! –¢—Ä–µ–±—É–µ—Ç—Å—è: {cost} ‚≠ê\n"
                f"–í–∞—à –±–∞–ª–∞–Ω—Å: {user.stars} ‚≠ê"
            )
            return
        
        # –û—Ç–ø—Ä–∞–≤–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
        await processing_msg.delete()
        await message.answer(formatted_result, parse_mode="HTML")
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        stats_text = (
            f"‚úÖ <b>–ì–æ—Ç–æ–≤–æ!</b>\n"
            f"{'‚ïê' * 35}\n"
            f"ü§ñ –ú–æ–¥–µ–ª—å: {model.name}\n"
            f"üíé –°—Ç–æ–∏–º–æ—Å—Ç—å: {'–ë–µ—Å–ø–ª–∞—Ç–Ω–æ (–ø—Ä–µ–º–∏—É–º)' if user.is_premium else f'{cost} ‚≠ê'}\n"
            f"{'‚ïê' * 35}"
        )
        
        await message.answer(stats_text, reply_markup=text_options_keyboard(user))
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user.last_text = result
        user.texts_generated += 1
        if not user.is_premium:
            user.stars -= cost
        user.mark_modified()
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π
        unlocked = user.check_achievements()
        if unlocked:
            for achievement_id in unlocked:
                achievement = achievements[achievement_id]
                await message.answer(
                    f"üèÜ <b>–ù–û–í–û–ï –î–û–°–¢–ò–ñ–ï–ù–ò–ï!</b>\n"
                    f"{'‚ïê' * 35}\n"
                    f"{achievement.icon} {achievement.name}\n"
                    f"{achievement.description}\n\n"
                    f"üéÅ –ù–∞–≥—Ä–∞–¥–∞: {achievement.reward} ‚≠ê"
                )
        
        await save_db()
        
    except Exception as e:
        logger.error(f"Text generation error: {str(e)}")
        await animate_error(message, "‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ç–µ–∫—Å—Ç–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

# ===================== –û–ë–†–ê–ë–û–¢–ö–ê –°–û–û–ë–©–ï–ù–ò–ô =====================
@dp.message(F.text)
async def handle_message(message: Message):
    user = await get_user(message.from_user.id)
    text = message.text.strip()
    user.update_interaction()
    
    if not await ensure_subscription(message, user):
        return
        
    try:
        if user.state == "image_gen":
            await generate_image(user, text, message)
        elif user.state == "text_gen":
            await generate_text(user, text, message)
        elif user.state == "avatar_gen":
            await generate_image(user, text, message)  # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç—É –∂–µ –ª–æ–≥–∏–∫—É –¥–ª—è –∞–≤–∞—Ç–∞—Ä–æ–≤
        elif user.state == "logo_gen":
            await generate_image(user, text, message)  # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç—É –∂–µ –ª–æ–≥–∏–∫—É –¥–ª—è –ª–æ–≥–æ—Ç–∏–ø–æ–≤
        elif user.state == "activate_promo":
            await process_promo_code(user, text, message)
    except Exception as e:
        logger.error(f"Error in handle_message: {e}")
        await animate_error(message, f"‚ö†Ô∏è –û—à–∏–±–∫–∞: {str(e)}")
    finally:
        await save_db()

# ===================== –ó–ê–ü–£–°–ö –ü–†–ò–õ–û–ñ–ï–ù–ò–Ø =====================
@asynccontextmanager
async def lifespan(app: FastAPI):
    """–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∂–∏–∑–Ω–µ–Ω–Ω—ã–º —Ü–∏–∫–ª–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
    # –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ
    await load_db()
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
    bot_info = await bot.get_me()
    global BOT_USERNAME
    BOT_USERNAME = bot_info.username
    logger.info(f"Bot @{BOT_USERNAME} started")
    
    # –û—á–∏—Å—Ç–∫–∞ –ø—Ä–µ–¥—ã–¥—É—â–∏—Ö –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π
    await bot.delete_webhook(drop_pending_updates=True)
    
    # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ –≤ —Ñ–æ–Ω–µ
    asyncio.create_task(dp.start_polling(bot, skip_updates=True))
    
    yield
    
    # –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏
    await save_db()
    await bot.session.close()

app = FastAPI(lifespan=lifespan)

@app.get("/")
async def health_check():
    return {"status": "ok", "service": "AI Content Generator Bot", "version": "3.0"}

if __name__ == "__main__":
    port = int(os.environ.get("PORT", 8000))
    uvicorn.run(
        app,
        host="0.0.0.0",
        port=port,
        workers=1,
        loop="asyncio",
        timeout_keep_alive=60
    )
