import telebot
import requests
import time
import threading
import queue
import logging
import html
import re
from datetime import datetime, timezone, timedelta
from telebot.types import (
    InlineKeyboardMarkup, 
    InlineKeyboardButton, 
    ReplyKeyboardMarkup, 
    KeyboardButton,
    ReplyKeyboardRemove
)
from collections import defaultdict, deque

# --- –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è ---
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s',
    handlers=[
        logging.StreamHandler(),
        logging.FileHandler("ai_assistant.log")
    ]
)
logger = logging.getLogger(__name__)

# --- –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è ---
TOKEN = "7965257689:AAGEiEit2zlc0hIQC0MiYAjAgclOw8DzuO4"
TEXT_GENERATION_URL = "https://text.pollinations.ai/openai"
PREMIUM_CHANNEL_ID = -1002712232742
PREMIUM_CHANNEL_LINK = "https://t.me/+5yZ8ZBXkHCY2Zjcy"

FREE_MODEL = "mistral-8x22b"
PREMIUM_MODELS = [
    "gpt-3.5-turbo", "claude-3-haiku", "gemini-pro",
    "llama-3-8b", "mixtral-8x7b", "claude-3-sonnet", 
    "gpt-4-turbo", "llama-3-70b", "mistral-8x22b"
]

# –°–∏—Å—Ç–µ–º–Ω—ã–µ –ø—Ä–æ–º–ø—Ç—ã –¥–ª—è —Ä–∞–∑–Ω—ã—Ö –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–æ–≤
ASSISTANTS = {
    "standard": "ü§ñ –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π",
    "programmer": "üë®‚Äçüíª –ü—Ä–æ–≥—Ä–∞–º–º–∏—Å—Ç",
    "scientist": "üî¨ –£—á–µ–Ω—ã–π",
    "writer": "‚úçÔ∏è –ü–∏—Å–∞—Ç–µ–ª—å",
    "designer": "üé® –î–∏–∑–∞–π–Ω–µ—Ä",
    "marketer": "üìà –ú–∞—Ä–∫–µ—Ç–æ–ª–æ–≥",
    "teacher": "üë®‚Äçüè´ –£—á–∏—Ç–µ–ª—å",
    "lawyer": "‚öñÔ∏è –Æ—Ä–∏—Å—Ç",
    "psychologist": "üß† –ü—Å–∏—Ö–æ–ª–æ–≥",
    "analyst": "üìä –ê–Ω–∞–ª–∏—Ç–∏–∫"
}

ASSISTANT_PROMPTS = {
    "standard": "–¢—ã - –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π AI-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç. –û—Ç–≤–µ—á–∞–π —Ç–æ—á–Ω–æ, –∫—Ä–∞—Ç–∫–æ –∏ –ø–æ —Å—É—â–µ—Å—Ç–≤—É.",
    "programmer": "–¢—ã - —ç–∫—Å–ø–µ—Ä—Ç-–ø—Ä–æ–≥—Ä–∞–º–º–∏—Å—Ç. –û—Ç–≤–µ—á–∞–π —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏ —Ç–æ—á–Ω–æ, –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–π –ø—Ä–∏–º–µ—Ä—ã –∫–æ–¥–∞ —Ç–∞–º, –≥–¥–µ —ç—Ç–æ —É–º–µ—Å—Ç–Ω–æ. –í—Å–µ–≥–¥–∞ –æ—Ñ–æ—Ä–º–ª—è–π –∫–æ–¥ –≤ markdown-–±–ª–æ–∫–∏ —Å —É–∫–∞–∑–∞–Ω–∏–µ–º —è–∑—ã–∫–∞. –£–±–µ–¥–∏—Å—å, —á—Ç–æ –∫–æ–¥: 1. –ü–æ–ª–Ω–æ—Å—Ç—å—é —Ä–∞–±–æ—á–∏–π –±–µ–∑ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π 2. –°–æ–¥–µ—Ä–∂–∏—Ç –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–π —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª 3. –ò–º–µ–µ—Ç –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –¥–ª—è –∫–ª—é—á–µ–≤—ã—Ö —á–∞—Å—Ç–µ–π",
    "scientist": "–¢—ã - —É—á–µ–Ω—ã–π. –û—Ç–≤–µ—á–∞–π –Ω–∞—É—á–Ω–æ –æ–±–æ—Å–Ω–æ–≤–∞–Ω–Ω–æ, –ø—Ä–∏–≤–æ–¥–∏ –¥–∞–Ω–Ω—ã–µ –∏ –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è. –ë—É–¥—å —Ç–æ—á–Ω—ã–º –∏ –æ–±—ä–µ–∫—Ç–∏–≤–Ω—ã–º.",
    "writer": "–¢—ã - –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π –ø–∏—Å–∞—Ç–µ–ª—å. –û—Ç–≤–µ—á–∞–π —Ç–≤–æ—Ä—á–µ—Å–∫–∏, –∏—Å–ø–æ–ª—å–∑—É–π –±–æ–≥–∞—Ç—ã–π —è–∑—ã–∫ –∏ –ª–∏—Ç–µ—Ä–∞—Ç—É—Ä–Ω—ã–µ –ø—Ä–∏–µ–º—ã. –§–æ—Ä–º—É–ª–∏—Ä—É–π –º—ã—Å–ª–∏ —ç–ª–µ–≥–∞–Ω—Ç–Ω–æ.",
    "designer": "–¢—ã - –¥–∏–∑–∞–π–Ω–µ—Ä. –û—Ç–≤–µ—á–∞–π —Å —Ñ–æ–∫—É—Å–æ–º –Ω–∞ —ç—Å—Ç–µ—Ç–∏–∫—É, –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π –æ–ø—ã—Ç –∏ –≤–∏–∑—É–∞–ª—å–Ω–æ–µ –≤–æ—Å–ø—Ä–∏—è—Ç–∏–µ. –ü—Ä–µ–¥–ª–∞–≥–∞–π –∫—Ä–µ–∞—Ç–∏–≤–Ω—ã–µ —Ä–µ—à–µ–Ω–∏—è.",
    "marketer": "–¢—ã - –º–∞—Ä–∫–µ—Ç–æ–ª–æ–≥. –û—Ç–≤–µ—á–∞–π —Å —Ñ–æ–∫—É—Å–æ–º –Ω–∞ –≤—ã–≥–æ–¥—ã, –£–¢–ü –∏ –∫–æ–Ω–≤–µ—Ä—Å–∏—é. –ò—Å–ø–æ–ª—å–∑—É–π —É–±–µ–¥–∏—Ç–µ–ª—å–Ω—ã–µ —Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∫–∏.",
    "teacher": "–¢—ã - —É—á–∏—Ç–µ–ª—å. –û–±—ä—è—Å–Ω—è–π —Å–ª–æ–∂–Ω—ã–µ –∫–æ–Ω—Ü–µ–ø—Ü–∏–∏ –ø—Ä–æ—Å—Ç—ã–º–∏ —Å–ª–æ–≤–∞–º–∏. –ü—Ä–∏–≤–æ–¥–∏ –ø—Ä–∏–º–µ—Ä—ã –∏ –∞–Ω–∞–ª–æ–≥–∏–∏. –ë—É–¥—å —Ç–µ—Ä–ø–µ–ª–∏–≤—ã–º –∏ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—â–∏–º.",
    "lawyer": "–¢—ã - —é—Ä–∏—Å—Ç. –û—Ç–≤–µ—á–∞–π —Ç–æ—á–Ω–æ, —Å—Å—ã–ª–∞–π—Å—è –Ω–∞ –Ω–æ—Ä–º–∞—Ç–∏–≤–Ω—ã–µ –∞–∫—Ç—ã. –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–∞–π –æ —Ä–∏—Å–∫–∞—Ö. –ë—É–¥—å —Ñ–æ—Ä–º–∞–ª—å–Ω—ã–º –∏ –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–º.",
    "psychologist": "–¢—ã - –ø—Å–∏—Ö–æ–ª–æ–≥. –û—Ç–≤–µ—á–∞–π —Å —ç–º–ø–∞—Ç–∏–µ–π, –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–π –∏ –ø–æ–º–æ–≥–∞–π —Ä–µ—à–∞—Ç—å –ø—Ä–æ–±–ª–µ–º—ã. –ó–∞–¥–∞–≤–∞–π —É—Ç–æ—á–Ω—è—é—â–∏–µ –≤–æ–ø—Ä–æ—Å—ã.",
    "analyst": "–¢—ã - –∞–Ω–∞–ª–∏—Ç–∏–∫ –¥–∞–Ω–Ω—ã—Ö. –û—Ç–≤–µ—á–∞–π —Å —Ñ–æ–∫—É—Å–æ–º –Ω–∞ –º–µ—Ç—Ä–∏–∫–∏, —Ç—Ä–µ–Ω–¥—ã –∏ –≤—ã–≤–æ–¥—ã. –ü—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–π —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∞–Ω–∞–ª–∏–∑."
}

# --- –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ ---
bot = telebot.TeleBot(TOKEN, threaded=True, num_threads=10)

# --- –•—Ä–∞–Ω–∏–ª–∏—â–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π ---
user_context = defaultdict(lambda: {
    "model": FREE_MODEL,
    "assistant": "standard",
    "history": deque(maxlen=20),
    "last_interaction": time.time(),
    "premium": False,
    "premium_checked_at": 0,
    "premium_cache_duration": 600,
    "premium_until": None,
    "referrals": set(),
    "active_typing": {},
    "menu_stack": []
})

request_queue = queue.Queue()
edit_lock = threading.Lock()

# --- –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ ---
def get_current_datetime():
    return datetime.now(timezone.utc)

def get_model_name(model_id):
    names = {
        "gpt-3.5-turbo": "ü§ñ GPT-3.5",
        "claude-3-haiku": "üé® Claude Haiku",
        "gemini-pro": "üåê Gemini Pro",
        "llama-3-8b": "ü¶ô Llama 3",
        "mixtral-8x7b": "üß† Mixtral",
        "claude-3-sonnet": "üé≠ Claude Sonnet",
        "gpt-4-turbo": "üåü GPT-4 Turbo",
        "llama-3-70b": "üß© Llama 70B",
        "mistral-8x22b": "üê¢ Mistral 8x22B"
    }
    return names.get(model_id, model_id)

def is_premium_active(ctx):
    now = get_current_datetime()
    if ctx["premium"]:
        return True
    if ctx["premium_until"] and now < ctx["premium_until"]:
        return True
    return False

def update_premium_status(user_id):
    ctx = user_context[user_id]
    now = get_current_datetime()

    if time.time() - ctx["premium_checked_at"] > ctx["premium_cache_duration"]:
        try:
            status = bot.get_chat_member(PREMIUM_CHANNEL_ID, user_id).status
            ctx["premium"] = status in ['member', 'administrator', 'creator']
            ctx["premium_checked_at"] = time.time()
        except Exception as e:
            logger.warning(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–ø–∏—Å–∫–∏: {e}")
            ctx["premium"] = False

    if ctx["premium_until"] and now > ctx["premium_until"]:
        ctx["premium_until"] = None

    return is_premium_active(ctx)

def add_referral(referrer_id, new_user_id):
    if referrer_id == new_user_id:
        return
    referrer_ctx = user_context[referrer_id]
    if new_user_id in referrer_ctx["referrals"]:
        return
        
    referrer_ctx["referrals"].add(new_user_id)
    logger.info(f"–ù–æ–≤—ã–π —Ä–µ—Ñ–µ—Ä–∞–ª: {referrer_id} ‚Üí {new_user_id}")

    if len(referrer_ctx["referrals"]) >= 10:
        now = get_current_datetime()
        if referrer_ctx.get("premium_until") and referrer_ctx["premium_until"] > now:
            referrer_ctx["premium_until"] += timedelta(days=5)
        else:
            referrer_ctx["premium_until"] = now + timedelta(days=5)
        
        referrer_ctx["referrals"].clear()
        logger.info(f"–ù–∞—á–∏—Å–ª–µ–Ω –ø—Ä–µ–º–∏—É–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {referrer_id}")
        
        try:
            bot.send_message(referrer_id, "üéâ –í—ã –ø–æ–ª—É—á–∏–ª–∏ –ø—Ä–µ–º–∏—É–º –Ω–∞ 5 –¥–Ω–µ–π –∑–∞ 10 –ø—Ä–∏–≥–ª–∞—à–µ–Ω–Ω—ã—Ö!")
        except:
            pass

def clean_html(text: str) -> str:
    """–£–¥–∞–ª—è–µ—Ç –≤—Å–µ HTML-—Ç–µ–≥–∏ –∏–∑ —Ç–µ–∫—Å—Ç–∞"""
    return re.sub(r'<[^>]+>', '', text)

def safe_format(text: str) -> str:
    """–ò–¥–µ–∞–ª—å–Ω–æ–µ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è Telegram —Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º –∫–æ–¥-–±–ª–æ–∫–æ–≤"""
    # –£–¥–∞–ª—è–µ–º –≤—Å–µ HTML-—Ç–µ–≥–∏ –∏–∑ –æ–±—ã—á–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞
    text = clean_html(text)
    
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–¥-–±–ª–æ–∫–æ–≤
    code_blocks = []
    def replace_code(match):
        language = match.group(1) or ""
        code = match.group(2).strip()
        # –û—á–∏—â–∞–µ–º –∏ —ç–∫—Ä–∞–Ω–∏—Ä—É–µ–º –∫–æ–¥
        code = clean_html(code)
        code = html.escape(code)
        code_blocks.append((language, code))
        return f"‚ñ∏CODE_BLOCK_{len(code_blocks)-1}‚óÇ"
    
    # –ò—â–µ–º –±–ª–æ–∫–∏ –∫–æ–¥–∞
    text = re.sub(r"```(\w*)\n?([\s\S]+?)```", replace_code, text)
    
    # –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫–æ–¥-–±–ª–æ–∫–∏
    for i, (lang, code) in enumerate(code_blocks):
        placeholder = f"‚ñ∏CODE_BLOCK_{i}‚óÇ"
        lang_display = lang.upper() if lang else "–ö–û–î"
        text = text.replace(placeholder, f"<b>‚ñ∏{lang_display}‚óÇ</b>\n<pre><code>{code}</code></pre>")
    
    # –ü—Ä–æ—Å—Ç–æ–µ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
    text = re.sub(r'\*\*(.+?)\*\*', r'<b>\1</b>', text)
    text = re.sub(r'\*(.+?)\*', r'<i>\1</i>', text)
    
    # –£–¥–∞–ª—è–µ–º –æ—Å—Ç–∞–≤—à–∏–µ—Å—è —Å–ª—É–∂–µ–±–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã
    text = text.replace('‚ñ∏', '').replace('‚óÇ', '')
    
    return text

def create_main_keyboard():
    keyboard = ReplyKeyboardMarkup(resize_keyboard=True, row_width=2)
    keyboard.add(
        KeyboardButton("üí¨ –ù–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å"),
        KeyboardButton("üõ† –°–º–µ–Ω–∏—Ç—å –º–æ–¥–µ–ª—å"),
        KeyboardButton("üë®‚Äçüíª –°–º–µ–Ω–∏—Ç—å –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞"),
        KeyboardButton("üíé –ü—Ä–µ–º–∏—É–º-—Å—Ç–∞—Ç—É—Å"),
        KeyboardButton("üë• –†–µ—Ñ–µ—Ä–∞–ª—ã"),
        KeyboardButton("üìú –ü–æ–∫–∞–∑–∞—Ç—å –∏—Å—Ç–æ—Ä–∏—é"),
        KeyboardButton("‚ôªÔ∏è –û—á–∏—Å—Ç–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é"),
        KeyboardButton("‚ÑπÔ∏è –ü–æ–º–æ—â—å")
    )
    return keyboard

def create_back_keyboard():
    keyboard = ReplyKeyboardMarkup(resize_keyboard=True)
    keyboard.add(KeyboardButton("üîô –ù–∞–∑–∞–¥"))
    return keyboard

def create_model_keyboard():
    keyboard = InlineKeyboardMarkup(row_width=2)
    buttons = []
    for model in PREMIUM_MODELS:
        buttons.append(InlineKeyboardButton(get_model_name(model), callback_data=f"model_{model}"))
    for i in range(0, len(buttons), 2):
        row = buttons[i:i+2]
        keyboard.add(*row)
    keyboard.add(InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_menu"))
    return keyboard

def create_assistant_keyboard(user_id):
    """–°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞–º–∏ —Å —É—á–µ—Ç–æ–º –ø—Ä–µ–º–∏—É–º-—Å—Ç–∞—Ç—É—Å–∞"""
    keyboard = InlineKeyboardMarkup(row_width=2)
    buttons = []
    is_premium = update_premium_status(user_id)
    
    for key, name in ASSISTANTS.items():
        if key == "standard":
            buttons.append(InlineKeyboardButton(name, callback_data=f"assistant_{key}"))
        else:
            if is_premium:
                buttons.append(InlineKeyboardButton(name, callback_data=f"assistant_{key}"))
            else:
                buttons.append(InlineKeyboardButton(f"{name} üîí", callback_data=f"assistant_locked_{key}"))
    
    for i in range(0, len(buttons), 2):
        row = buttons[i:i+2]
        keyboard.add(*row)
        
    keyboard.add(InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_menu"))
    return keyboard

def create_premium_keyboard():
    keyboard = InlineKeyboardMarkup()
    keyboard.add(InlineKeyboardButton("üîì –ü–æ–ª—É—á–∏—Ç—å –ø—Ä–µ–º–∏—É–º", url=PREMIUM_CHANNEL_LINK))
    keyboard.add(InlineKeyboardButton("üîÑ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å", callback_data="check_premium"))
    keyboard.add(InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_menu"))
    return keyboard

def safe_send(chat_id, text, **kwargs):
    try:
        # –†–∞–∑–±–∏–≤–∞–µ–º –¥–ª–∏–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
        if len(text) > 4096:
            parts = []
            while text:
                cutoff = 4096
                if len(text) > cutoff:
                    while cutoff > 0 and text[cutoff] not in (' ', '\n', '.', ',', ';'):
                        cutoff -= 1
                    if cutoff <= 0:
                        cutoff = 4096
                else:
                    cutoff = len(text)
                
                part = text[:cutoff]
                text = text[cutoff:]
                parts.append(part)
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —á–∞—Å—Ç–∏ —Å –∏–Ω–¥–∏–∫–∞—Ü–∏–µ–π
            for i, part in enumerate(parts):
                if i == 0:
                    part = f"{part}\n\n‚è≥ <b>–ü—Ä–æ–¥–æ–ª–∂–µ–Ω–∏–µ —Å–ª–µ–¥—É–µ—Ç...</b>"
                elif i == len(parts) - 1:
                    part = f"üìù <b>–ü—Ä–æ–¥–æ–ª–∂–µ–Ω–∏–µ:</b>\n\n{part}"
                else:
                    part = f"üìù <b>–ü—Ä–æ–¥–æ–ª–∂–µ–Ω–∏–µ:</b>\n\n{part}\n\n‚è≥ <b>–ü—Ä–æ–¥–æ–ª–∂–µ–Ω–∏–µ —Å–ª–µ–¥—É–µ—Ç...</b>"
                
                bot.send_message(chat_id, part, parse_mode="HTML", **kwargs)
                time.sleep(0.2)
            return None
        else:
            return bot.send_message(chat_id, text, parse_mode="HTML", **kwargs)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏: {e}")
        return None

def safe_edit(chat_id, message_id, text, **kwargs):
    try:
        if len(text) > 4096:
            text = text[:4000] + "\n... [—Å–æ–æ–±—â–µ–Ω–∏–µ –æ–±—Ä–µ–∑–∞–Ω–æ]"
            
        with edit_lock:
            bot.edit_message_text(text, chat_id, message_id, parse_mode="HTML", **kwargs)
        return True
    except telebot.apihelper.ApiTelegramException as e:
        if "message is not modified" in str(e):
            return True
        if "can't parse entities" in str(e):
            fixed_text = re.sub(r'<[^>]+>', '', text)
            with edit_lock:
                bot.edit_message_text(fixed_text, chat_id, message_id)
            return True
        logger.error(f"–û—à–∏–±–∫–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: {e}")
        return False
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: {e}")
        return False

def typing_effect(chat_id, message_id, full_text, user_id):
    """–£—Å–∫–æ—Ä–µ–Ω–Ω—ã–π —ç—Ñ—Ñ–µ–∫—Ç –ø–µ—á–∞—Ç–∞–Ω–∏—è —Å HTML-—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ–º"""
    ctx = user_context[user_id]
    ctx["active_typing"]["stop"] = False
    
    # –†–∞–∑–±–∏–≤–∞–µ–º —Ç–µ–∫—Å—Ç –Ω–∞ —á–∞—Å—Ç–∏
    parts = []
    current = ""
    buffer_size = 30
    
    for char in full_text:
        current += char
        if len(current) >= buffer_size:
            parts.append(current)
            current = ""
    if current:
        parts.append(current)
    
    # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º —Ç–µ–∫—Å—Ç –ø–æ—Å—Ç–µ–ø–µ–Ω–Ω–æ
    displayed = ""
    start_time = time.time()
    
    for i, part in enumerate(parts):
        if ctx["active_typing"].get("stop", False):
            return
            
        new_text = displayed + part
        
        # –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä
        progress = int((i+1) / len(parts) * 10)
        progress_bar = f"[{'‚ñ†' * progress}{'‚ñ°' * (10 - progress)}]"
        status = f"\n\n‚è≥ <b>–ì–µ–Ω–µ—Ä–∞—Ü–∏—è...</b>\n<pre>{progress_bar}</pre> <code>{progress*10}%</code>"
        
        safe_edit(chat_id, message_id, new_text + status)
        time.sleep(0.02)
        
        displayed = new_text
    
    # –§–∏–Ω–∞–ª—å–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ
    gen_time = time.time() - start_time
    model_name = get_model_name(ctx["model"])
    footer = f"\n\n<code>‚è± {gen_time:.1f}s ‚îÇ üß† {model_name}</code>"
    safe_edit(chat_id, message_id, full_text + footer)
    ctx["active_typing"] = {}

def generate_ai_response(user_id, prompt):
    ctx = user_context[user_id]
    messages = []
    
    # –£—Å–∏–ª–µ–Ω–Ω—ã–π –ø—Ä–æ–º–ø—Ç –¥–ª—è –ø—Ä–æ–≥—Ä–∞–º–º–∏—Å—Ç–∞
    if ctx["assistant"] == "programmer":
        prompt = f"{prompt}\n\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–µ–¥–æ—Å—Ç–∞–≤—å –ø–æ–ª–Ω—ã–π —Ä–∞–±–æ—Ç–∞—é—â–∏–π –∫–æ–¥ —Å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è–º–∏. –£–±–µ–¥–∏—Å—å, —á—Ç–æ –∫–æ–¥: 1. –ö–æ—Ä—Ä–µ–∫—Ç–Ω–æ –æ—Ñ–æ—Ä–º–ª–µ–Ω –≤ markdown-–±–ª–æ–∫–∏ 2. –ù–µ —Å–æ–¥–µ—Ä–∂–∏—Ç placeholder'–æ–≤ 3. –†–µ—à–∞–µ—Ç –ø–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω—É—é –∑–∞–¥–∞—á—É –ø–æ–ª–Ω–æ—Å—Ç—å—é"
    
    # –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–æ–º–ø—Ç –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞
    assistant_prompt = ASSISTANT_PROMPTS.get(ctx["assistant"], ASSISTANT_PROMPTS["standard"])
    messages.append({"role": "system", "content": assistant_prompt})
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∏—Å—Ç–æ—Ä–∏—é
    for i, msg in enumerate(ctx["history"]):
        role = "user" if i % 2 == 0 else "assistant"
        messages.append({"role": role, "content": msg})
    
    messages.append({"role": "user", "content": prompt})
    
    payload = {
        "model": ctx["model"],
        "messages": messages,
        "temperature": 0.7,
        "max_tokens": 3000,
        "top_p": 0.9
    }

    try:
        start_time = time.time()
        response = requests.post(TEXT_GENERATION_URL, json=payload, timeout=180)
        response.raise_for_status()
        data = response.json()
        
        if "choices" in data and data["choices"]:
            answer = data["choices"][0]["message"]["content"]
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∫–æ–¥–∞
            if "```" not in answer and ctx["assistant"] == "programmer":
                answer = "‚ö†Ô∏è –ö–æ–¥ –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –∑–∞–ø—Ä–æ—Å.\n\n" + answer
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∏—Å—Ç–æ—Ä–∏—é
            ctx["history"].append(prompt)
            ctx["history"].append(answer)
            ctx["last_interaction"] = time.time()
            
            # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º
            return safe_format(answer)
        return "‚ö†Ô∏è –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç–≤–µ—Ç–∞"
    except requests.exceptions.Timeout:
        return "‚åõÔ∏è –ü—Ä–µ–≤—ã—à–µ–Ω–æ –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –æ—Ç–≤–µ—Ç–∞ –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞"
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ API: {e}")
        return "‚ö†Ô∏è –û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ"

# --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥ ---
@bot.message_handler(commands=['start', 'menu'])
def start(message):
    user_id = message.from_user.id
    ctx = user_context[user_id]
    ctx["menu_stack"] = []

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤
    if "ref_" in message.text:
        try:
            referrer_id = int(message.text.split("ref_")[1])
            add_referral(referrer_id, user_id)
        except:
            pass

    ctx["premium"] = update_premium_status(user_id)
    if not ctx["premium"]:
        ctx["model"] = FREE_MODEL

    # –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ
    welcome = (
        f"‚ú® <b>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, {message.from_user.first_name}!</b>\n\n"
        "–Ø ‚Äî –≤–∞—à –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π AI-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç –Ω–æ–≤–æ–≥–æ –ø–æ–∫–æ–ª–µ–Ω–∏—è\n"
        f"üß† –ú–æ–¥–µ–ª—å: <b>{get_model_name(ctx['model'])}</b>\n"
        f"üë®‚Äçüíª –ê—Å—Å–∏—Å—Ç–µ–Ω—Ç: <b>{ASSISTANTS[ctx['assistant']]}</b>\n"
        f"üíé –°—Ç–∞—Ç—É—Å: {'<b>–ü—Ä–µ–º–∏—É–º</b> üîì' if ctx['premium'] else '–ë–∞–∑–æ–≤—ã–π üîí'}\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"
    )
    safe_send(message.chat.id, welcome, reply_markup=create_main_keyboard())

@bot.message_handler(func=lambda m: m.text == "üí¨ –ù–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å")
def new_query(message):
    user_context[message.from_user.id]["menu_stack"].append("query")
    safe_send(message.chat.id, "üí¨ –í–≤–µ–¥–∏—Ç–µ –≤–∞—à –∑–∞–ø—Ä–æ—Å:", reply_markup=create_back_keyboard())

@bot.message_handler(func=lambda m: m.text == "üõ† –°–º–µ–Ω–∏—Ç—å –º–æ–¥–µ–ª—å")
def choose_model(message):
    user_id = message.from_user.id
    user_context[user_id]["menu_stack"].append("model")
    if not update_premium_status(user_id):
        safe_send(
            message.chat.id,
            "üö´ –î–æ—Å—Ç—É–ø–Ω–æ —Ç–æ–ª—å–∫–æ –¥–ª—è –ø—Ä–µ–º–∏—É–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π",
            reply_markup=create_premium_keyboard()
        )
        return
    safe_send(message.chat.id, "üöÄ –í—ã–±–µ—Ä–∏—Ç–µ AI-–º–æ–¥–µ–ª—å:", reply_markup=create_model_keyboard())

@bot.callback_query_handler(func=lambda c: c.data.startswith("model_"))
def set_model(call):
    user_id = call.from_user.id
    model = call.data[len("model_"):]
    
    if not update_premium_status(user_id) or model not in PREMIUM_MODELS:
        bot.answer_callback_query(call.id, "üö´ –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω")
        return
        
    user_context[user_id]["model"] = model
    bot.edit_message_text(
        f"‚úÖ –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –º–æ–¥–µ–ª—å: <b>{get_model_name(model)}</b>",
        call.message.chat.id, call.message.message_id
    )
    bot.answer_callback_query(call.id, f"–ú–æ–¥–µ–ª—å –∏–∑–º–µ–Ω–µ–Ω–∞ –Ω–∞ {get_model_name(model)}")

@bot.message_handler(func=lambda m: m.text == "üë®‚Äçüíª –°–º–µ–Ω–∏—Ç—å –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞")
def choose_assistant(message):
    user_id = message.from_user.id
    user_context[user_id]["menu_stack"].append("assistant")
    safe_send(
        message.chat.id, 
        "üë®‚Äçüíª –í—ã–±–µ—Ä–∏—Ç–µ –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞:", 
        reply_markup=create_assistant_keyboard(user_id)
    )

@bot.callback_query_handler(func=lambda c: c.data.startswith("assistant_"))
def set_assistant(call):
    user_id = call.from_user.id
    assistant_key = call.data[len("assistant_"):]
    
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–æ–≤
    if assistant_key.startswith("locked_"):
        bot.answer_callback_query(
            call.id, 
            "üö´ –≠—Ç–æ—Ç –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç –¥–æ—Å—Ç—É–ø–µ–Ω —Ç–æ–ª—å–∫–æ –¥–ª—è –ø—Ä–µ–º–∏—É–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π",
            show_alert=True
        )
        return
        
    if assistant_key not in ASSISTANTS:
        bot.answer_callback_query(call.id, "‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç")
        return
        
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –¥–ª—è –ø—Ä–µ–º–∏—É–º-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–æ–≤
    if assistant_key != "standard" and not update_premium_status(user_id):
        bot.answer_callback_query(
            call.id, 
            "üö´ –≠—Ç–æ—Ç –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç –¥–æ—Å—Ç—É–ø–µ–Ω —Ç–æ–ª—å–∫–æ –¥–ª—è –ø—Ä–µ–º–∏—É–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π",
            show_alert=True
        )
        return
        
    user_context[user_id]["assistant"] = assistant_key
    
    # –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –±–µ–∑ –ª–∏—à–Ω–∏—Ö —Ç–µ–≥–æ–≤
    assistant_name = ASSISTANTS[assistant_key]
    prompt_preview = ASSISTANT_PROMPTS[assistant_key][:50].replace('\n', ' ')
    response = (
        f"‚úÖ –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç: <b>{assistant_name}</b>\n"
        f"<i>{prompt_preview}...</i>"
    )
    
    bot.edit_message_text(
        response,
        call.message.chat.id, call.message.message_id
    )
    bot.answer_callback_query(call.id, "–ê—Å—Å–∏—Å—Ç–µ–Ω—Ç –∏–∑–º–µ–Ω–µ–Ω")

@bot.message_handler(func=lambda m: m.text == "üíé –ü—Ä–µ–º–∏—É–º-—Å—Ç–∞—Ç—É—Å")
def premium_info(message):
    user_id = message.from_user.id
    user_context[user_id]["menu_stack"].append("premium")
    ctx = user_context[user_id]
    update_premium_status(user_id)
    
    premium_status = "üîì –ê–ö–¢–ò–í–ï–ù" if ctx["premium"] else "üîí –ù–ï–ê–ö–¢–ò–í–ï–ù"
    premium_expire = ""
    
    if ctx["premium_until"]:
        expire_date = ctx["premium_until"].strftime("%d.%m.%Y")
        premium_expire = f"\n‚è≥ –°—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è: <b>{expire_date}</b>"
    
    text = (
        "üíé <b>–ü–†–ï–ú–ò–£–ú –î–û–°–¢–£–ü</b>\n\n"
        f"<b>–°—Ç–∞—Ç—É—Å:</b> {premium_status}{premium_expire}\n\n"
        "<b>–ü—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞:</b>\n"
        "‚Ä¢ –î–æ—Å—Ç—É–ø –∫ GPT-4 Turbo –∏ Claude 3\n"
   
